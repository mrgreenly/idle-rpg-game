(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))o(n);new MutationObserver(n=>{for(const c of n)if(c.type==="childList")for(const l of c.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&o(l)}).observe(document,{childList:!0,subtree:!0});function t(n){const c={};return n.integrity&&(c.integrity=n.integrity),n.referrerPolicy&&(c.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?c.credentials="include":n.crossOrigin==="anonymous"?c.credentials="omit":c.credentials="same-origin",c}function o(n){if(n.ep)return;n.ep=!0;const c=t(n);fetch(n.href,c)}})();const S={common:{name:"Common",color:"#9CA3AF",chance:50,affixCount:0,prefix:[],suffix:[]},uncommon:{name:"Uncommon",color:"#10B981",chance:30,affixCount:1,prefix:["Sturdy","Sharp","Keen","Fine"],suffix:["of Power","of Might","of the Warrior"]},rare:{name:"Rare",color:"#3B82F6",chance:15,affixCount:2,prefix:["Masterwork","Superior","Enhanced","Reinforced"],suffix:["of the Elite","of Excellence","of the Champion","of Mastery"]},epic:{name:"Epic",color:"#8B5CF6",chance:4,affixCount:3,prefix:["Legendary","Ancient","Mythical","Heroic","Blessed","Cursed"],suffix:["of the Gods","of Legends","of Heroes","of Destiny","of the Void","of Strength"]},legendary:{name:"Legendary",color:"#F59E0B",chance:1,affixCount:5,prefix:["Divine","Celestial","Eternal","Transcendent","Omnipotent","Radiant"],suffix:["of the Immortals","of Eternity","of the Divine","of Transcendence","of Infinity","of the Cosmos"]}},x={prefix:{Sturdy:{stats:{defense:3,blockChance:2},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Sharp:{stats:{attack:2,critChance:3},allowedTypes:["weapon"]},Keen:{stats:{critChance:5,critDamage:8},allowedTypes:["weapon","necklace","ring"]},Fine:{stats:{attack:1,defense:1,attackSpeed:2},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Masterwork:{stats:{attack:4,defense:2,critChance:3},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},Superior:{stats:{attack:3,critDamage:10,lifeSteal:2},allowedTypes:["weapon","necklace","ring"]},Enhanced:{stats:{attackSpeed:8,dodge:5,critChance:3},allowedTypes:["weapon","boots","legs","necklace","ring"]},Reinforced:{stats:{defense:6,blockChance:8,dodge:2},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Legendary:{stats:{attack:6,critChance:8,critDamage:15},allowedTypes:["weapon"]},Ancient:{stats:{attack:5,defense:4,lifeSteal:5,blockChance:5},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Mythical:{stats:{critDamage:20,lifeSteal:8,dodge:8},allowedTypes:["weapon","necklace","ring"]},Heroic:{stats:{attack:7,attackSpeed:12,critChance:10},allowedTypes:["weapon"]},Blessed:{stats:{defense:5,lifeSteal:6,dodge:6,blockChance:6},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]},Cursed:{stats:{attack:8,critChance:12,critDamage:18,attackSpeed:10},allowedTypes:["weapon","necklace","ring"]},Divine:{stats:{attack:10,critChance:15,critDamage:25,lifeSteal:10},allowedTypes:["weapon","necklace","ring"]},Celestial:{stats:{defense:8,blockChance:15,dodge:12,attackSpeed:15},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Eternal:{stats:{attack:8,defense:6,critDamage:30,lifeSteal:15},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Transcendent:{stats:{attack:12,critChance:20,dodge:15,attackSpeed:20},allowedTypes:["weapon","boots","legs","necklace","ring"]},Omnipotent:{stats:{attack:15,critChance:18,critDamage:35,lifeSteal:12},allowedTypes:["weapon","necklace","ring"]},Radiant:{stats:{defense:10,dodge:18,attackSpeed:25,blockChance:20},allowedTypes:["helmet","body","legs","boots","belt","offhand"]}},suffix:{"of Power":{stats:{attack:3},allowedTypes:["weapon","necklace","ring"]},"of Might":{stats:{attack:2,critDamage:5},allowedTypes:["weapon"]},"of the Warrior":{stats:{attack:1,defense:2,blockChance:3},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},"of the Elite":{stats:{attack:4,critChance:5,attackSpeed:5},allowedTypes:["weapon","necklace","ring"]},"of Excellence":{stats:{critChance:8,critDamage:12,lifeSteal:3},allowedTypes:["weapon","necklace","ring"]},"of the Champion":{stats:{attack:3,defense:3,dodge:5},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},"of Mastery":{stats:{attackSpeed:10,critChance:6,dodge:6},allowedTypes:["weapon","boots","legs","necklace","ring"]},"of the Gods":{stats:{attack:8,critChance:12,critDamage:20},allowedTypes:["weapon"]},"of Legends":{stats:{defense:6,blockChance:12,lifeSteal:8},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Heroes":{stats:{attack:6,attackSpeed:15,dodge:10},allowedTypes:["weapon","boots","legs"]},"of Destiny":{stats:{critDamage:25,lifeSteal:12,attackSpeed:12},allowedTypes:["weapon","necklace","ring"]},"of the Void":{stats:{attack:7,critChance:10,dodge:12,lifeSteal:6},allowedTypes:["weapon","necklace","ring"]},"of Strength":{stats:{attack:9,critDamage:22,attackSpeed:8},allowedTypes:["weapon","belt","necklace","ring"]},"of the Immortals":{stats:{attack:10,defense:8,lifeSteal:20,blockChance:15},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Eternity":{stats:{critChance:20,critDamage:35,attackSpeed:25},allowedTypes:["weapon","necklace","ring"]},"of the Divine":{stats:{attack:12,defense:10,dodge:20,lifeSteal:15},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Transcendence":{stats:{attack:15,critChance:25,critDamage:40,attackSpeed:30},allowedTypes:["weapon","necklace","ring"]},"of Infinity":{stats:{attack:13,critChance:22,critDamage:38,dodge:16},allowedTypes:["weapon","necklace","ring"]},"of the Cosmos":{stats:{defense:12,lifeSteal:25,attackSpeed:28,blockChance:18},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]}}},H={weapon:[{name:"Sword",attack:10,defense:0,attackSpeed:0,baseAttackInterval:2e3,critChance:5,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,handType:"1h"},{name:"Axe",attack:15,defense:0,attackSpeed:0,baseAttackInterval:2800,critChance:8,critDamage:15,lifeSteal:0,dodge:0,blockChance:0,handType:"1h"},{name:"Mace",attack:12,defense:0,attackSpeed:0,baseAttackInterval:2400,critChance:2,critDamage:0,lifeSteal:0,dodge:0,blockChance:5,handType:"1h"},{name:"Dagger",attack:6,defense:0,attackSpeed:0,baseAttackInterval:1600,critChance:12,critDamage:20,lifeSteal:0,dodge:8,blockChance:0,handType:"1h"},{name:"Staff",attack:8,defense:0,attackSpeed:0,baseAttackInterval:2200,critChance:10,critDamage:25,lifeSteal:3,dodge:0,blockChance:0,handType:"1h"},{name:"Greatsword",attack:20,defense:0,attackSpeed:0,baseAttackInterval:3200,critChance:3,critDamage:25,lifeSteal:0,dodge:0,blockChance:0,handType:"2h"},{name:"Battleaxe",attack:25,defense:0,attackSpeed:0,baseAttackInterval:3600,critChance:5,critDamage:30,lifeSteal:0,dodge:0,blockChance:0,handType:"2h"},{name:"Warhammer",attack:22,defense:0,attackSpeed:0,baseAttackInterval:3400,critChance:1,critDamage:0,lifeSteal:0,dodge:0,blockChance:8,handType:"2h"}],offhand:[{name:"Buckler",attack:0,defense:8,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:15},{name:"Round Shield",attack:0,defense:12,attackSpeed:-5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:20},{name:"Tower Shield",attack:0,defense:18,attackSpeed:-10,critChance:0,critDamage:0,lifeSteal:0,dodge:-5,blockChance:30},{name:"Tome",attack:3,defense:0,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0}],helmet:[{name:"Helmet",attack:0,defense:5,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:3},{name:"Cap",attack:0,defense:3,attackSpeed:2,critChance:0,critDamage:0,lifeSteal:0,dodge:2,blockChance:0},{name:"Crown",attack:0,defense:4,attackSpeed:0,critChance:3,critDamage:5,lifeSteal:0,dodge:0,blockChance:0},{name:"Hood",attack:0,defense:2,attackSpeed:3,critChance:2,critDamage:0,lifeSteal:0,dodge:5,blockChance:0}],body:[{name:"Armor",attack:0,defense:12,attackSpeed:-5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:8},{name:"Robe",attack:0,defense:8,attackSpeed:5,critChance:5,critDamage:10,lifeSteal:2,dodge:0,blockChance:0},{name:"Vest",attack:0,defense:10,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:3,blockChance:2},{name:"Tunic",attack:0,defense:6,attackSpeed:8,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:0}],legs:[{name:"Greaves",attack:0,defense:8,attackSpeed:-3,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:5},{name:"Pants",attack:0,defense:6,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:0,dodge:3,blockChance:0},{name:"Leggings",attack:0,defense:7,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:2,blockChance:2},{name:"Shorts",attack:0,defense:4,attackSpeed:10,critChance:2,critDamage:0,lifeSteal:0,dodge:8,blockChance:0}],boots:[{name:"Sandals",attack:0,defense:2,attackSpeed:8,critChance:0,critDamage:0,lifeSteal:0,dodge:8,blockChance:0},{name:"Boots",attack:0,defense:5,attackSpeed:3,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:0},{name:"Heavy Boots",attack:0,defense:8,attackSpeed:-3,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:5},{name:"Speed Boots",attack:0,defense:3,attackSpeed:15,critChance:2,critDamage:0,lifeSteal:0,dodge:12,blockChance:0}],belt:[{name:"Leather Belt",attack:0,defense:1,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0},{name:"Utility Belt",attack:0,defense:0,attackSpeed:5,critChance:3,critDamage:0,lifeSteal:0,dodge:3,blockChance:0},{name:"Chain Belt",attack:0,defense:0,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:3},{name:"War Belt",attack:0,defense:0,attackSpeed:0,critChance:5,critDamage:8,lifeSteal:0,dodge:0,blockChance:0}],necklace:[{name:"Amulet",attack:0,defense:0,attackSpeed:0,critChance:8,critDamage:15,lifeSteal:0,dodge:0,blockChance:0},{name:"Pendant",attack:0,defense:0,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:5,dodge:0,blockChance:0}],ring:[{name:"Ring",attack:0,defense:0,attackSpeed:3,critChance:5,critDamage:8,lifeSteal:0,dodge:0,blockChance:0},{name:"Bracelet",attack:0,defense:0,attackSpeed:8,critChance:6,critDamage:0,lifeSteal:0,dodge:0,blockChance:0}]},ae={town:{name:"🏘️ Town",description:"A peaceful place to rest and shop",enemies:[],isShop:!0},forest:{name:"🌲 Dark Forest",description:"A mysterious forest filled with creatures",enemies:[{name:"Slime",imageClass:"slime",hp:50,attack:4,defense:2,xp:15,gold:5,attackInterval:3e3},{name:"Goblin",imageClass:"goblin",hp:80,attack:8,defense:5,xp:25,gold:10,attackInterval:2e3},{name:"Wolf",imageClass:"wolf",hp:70,attack:12,defense:4,xp:20,gold:8,attackInterval:2200}],dropChance:25,allowedRarities:["common"]},cave:{name:"🕳️ Mysterious Cave",description:"Deep caves with stronger monsters",enemies:[{name:"Orc",imageClass:"orc",hp:120,attack:18,defense:8,xp:35,gold:15,attackInterval:2800},{name:"Skeleton",imageClass:"skeleton",hp:100,attack:20,defense:6,xp:30,gold:12,attackInterval:2300},{name:"Spider",imageClass:"spider",hp:90,attack:16,defense:4,xp:28,gold:10,attackInterval:1800}],dropChance:30,allowedRarities:["common","uncommon"]},mountain:{name:"⛰️ Snowy Mountains",description:"Treacherous peaks with powerful foes",enemies:[{name:"Yeti",imageClass:"yeti",hp:200,attack:25,defense:12,xp:50,gold:25,attackInterval:3500},{name:"Dragon",imageClass:"dragon",hp:300,attack:35,defense:15,xp:80,gold:50,attackInterval:2200},{name:"Giant",imageClass:"giant",hp:250,attack:30,defense:10,xp:65,gold:35,attackInterval:4e3}],dropChance:35,allowedRarities:["common","uncommon","rare"]},goblinCave:{name:"🏴‍☠️ Goblin Cave",description:"A dark cave infested with goblins. Defeat 15 goblins to face the Goblin King!",enemies:[{name:"Goblin Runt",imageClass:"goblin",hp:60,attack:10,defense:3,xp:18,gold:7,attackInterval:2400},{name:"Goblin Shaman",imageClass:"goblin",hp:85,attack:16,defense:6,xp:28,gold:12,attackInterval:2800},{name:"Goblin Slinger",imageClass:"goblin",hp:75,attack:14,defense:4,xp:22,gold:9,attackInterval:2100},{name:"Goblin Brute",imageClass:"goblin",hp:110,attack:20,defense:8,xp:35,gold:15,attackInterval:3200}],dropChance:40,allowedRarities:["common","uncommon","rare","epic"],boss:{name:"Goblin King",imageClass:"goblin",hp:400,attack:40,defense:20,xp:150,gold:100,requiredKills:15,isLegendaryDropper:!0,attackInterval:2500},killCount:0}},ne=[{name:"Iron Sword",type:"weapon",attack:15,defense:0,price:100},{name:"Steel Helmet",type:"helmet",attack:0,defense:8,price:80},{name:"Leather Armor",type:"body",attack:0,defense:12,price:120},{name:"Chain Legs",type:"legs",attack:0,defense:10,price:100},{name:"Studded Belt",type:"belt",attack:3,defense:6,price:70},{name:"Leather Boots",type:"boots",attack:0,defense:4,price:60},{name:"Iron Shield",type:"offhand",attack:0,defense:10,price:90},{name:"Magic Ring",type:"ring",attack:5,defense:5,price:150},{name:"Steel Sword",type:"weapon",attack:25,defense:0,price:250},{name:"Iron Plate",type:"body",attack:0,defense:20,price:300},{name:"Dragon Sword",type:"weapon",attack:40,defense:0,price:500}],Z=["Jump off a bridge","Lay facedown in a puddle","Starve yourself","Walk into a dragon's lair unarmed","Challenge a mountain troll to arm wrestling","Try to pet a wild bear","Swim with sharks while bleeding","Eat mysterious mushrooms","Sleep in a haunted cemetery","Juggle flaming torches blindfolded","Use a cursed sword as a toothpick","Tickle a sleeping giant","Dance on thin ice","Hug a cactus enthusiastically","Take a nap in quicksand","Play catch with a grenade","Use a lightning rod during a storm","Tell a vampire they have bad breath","Ask a kraken for directions","Wear meat clothing to a wolf den","Try to ride a wild griffin","Drink from the fountain of eternal poison","Challenge death to a game of chess","Use your head to test helmet durability","Go cave diving without oxygen","Practice sword swallowing with a real sword","Take a selfie with a basilisk","Use a nuclear reactor as a nightlight","Go bungee jumping with a rope that's too long","Try to milk a wild minotaur"];function N(){return Z[Math.floor(Math.random()*Z.length)]}const z={exploration:{name:"Path of Exploration",icon:"🗺️",description:"Unlock new zones and content",nodes:[{id:"exploration_1",name:"Zone Scout",description:"Unlocks additional zones earlier",effect:"Reduce zone unlock level requirements by 2",cost:50,maxLevel:1,prerequisites:[]},{id:"exploration_2",name:"Monster Hunter",description:"Encounter rare enemies more often",effect:"Increase rare enemy spawn chance by 25%",cost:75,maxLevel:1,prerequisites:["exploration_1"]},{id:"exploration_3",name:"Boss Slayer",description:"Reduce boss requirements",effect:"Reduce boss spawn requirements by 5 kills",cost:100,maxLevel:1,prerequisites:["exploration_2"]},{id:"exploration_4",name:"Zone Master",description:"Access to exclusive high-tier zones",effect:"Unlocks special endgame zones",cost:200,maxLevel:1,prerequisites:["exploration_3"]}]},power:{name:"Path of Power",icon:"⚔️",description:"Increase combat effectiveness",nodes:[{id:"power_1",name:"Warrior Training",description:"Increase base attack power",effect:"+5 base attack per level",cost:40,maxLevel:5,prerequisites:[]},{id:"power_2",name:"Combat Mastery",description:"Improve critical hit chance",effect:"+2% critical chance per level",cost:60,maxLevel:3,prerequisites:["power_1"]},{id:"power_3",name:"Berserker Rage",description:"Increase attack speed",effect:"+10% attack speed per level",cost:80,maxLevel:3,prerequisites:["power_2"]},{id:"power_4",name:"Legendary Warrior",description:"Massive combat bonuses",effect:"+50% damage, +25% crit chance",cost:250,maxLevel:1,prerequisites:["power_3"]}]},wealth:{name:"Path of Wealth",icon:"💰",description:"Increase gold gain and rewards",nodes:[{id:"wealth_1",name:"Coin Collector",description:"Increase gold drops from enemies",effect:"+25% gold gain per level",cost:45,maxLevel:4,prerequisites:[]},{id:"wealth_2",name:"Lucky Find",description:"Increase item drop chance",effect:"+10% item drop chance per level",cost:70,maxLevel:3,prerequisites:["wealth_1"]},{id:"wealth_3",name:"Treasure Hunter",description:"Higher chance for rare items",effect:"+15% chance for higher rarity per level",cost:90,maxLevel:2,prerequisites:["wealth_2"]},{id:"wealth_4",name:"Golden Touch",description:"Massive wealth bonuses",effect:"Double gold gain, +50% item drops",cost:300,maxLevel:1,prerequisites:["wealth_3"]}]},knowledge:{name:"Path of Knowledge",icon:"📚",description:"Increase experience gain",nodes:[{id:"knowledge_1",name:"Quick Learner",description:"Gain experience faster",effect:"+20% experience gain per level",cost:35,maxLevel:5,prerequisites:[]},{id:"knowledge_2",name:"Battle Wisdom",description:"Bonus XP from combat victories",effect:"+50% bonus XP from defeating enemies per level",cost:55,maxLevel:3,prerequisites:["knowledge_1"]},{id:"knowledge_3",name:"Master Scholar",description:"Reduce XP requirements for leveling",effect:"-10% XP needed per level (max 30%)",cost:85,maxLevel:3,prerequisites:["knowledge_2"]},{id:"knowledge_4",name:"Enlightened One",description:"Transcendent learning abilities",effect:"Triple XP gain, start at level 5",cost:400,maxLevel:1,prerequisites:["knowledge_3"]}]}};let P=!1,M=null,B=null;function se(s){const e={};s.forEach(g=>{S[g]&&(e[g]=S[g])}),Object.keys(e).length===0&&(e.common=S.common);const t=Math.random()*100;let o="common",n=0;for(const[g,m]of Object.entries(e))if(n+=m.dropChance,t<=n){o=g;break}const c=Object.keys(H),l=c[Math.floor(Math.random()*c.length)],i=H[l],r=i[Math.floor(Math.random()*i.length)],p=S[o],d={name:r.name,type:l,rarity:o,attack:r.attack,defense:r.defense,attackSpeed:r.attackSpeed,critChance:r.critChance,critDamage:r.critDamage,lifeSteal:r.lifeSteal,dodge:r.dodge,blockChance:r.blockChance,price:Math.floor((r.attack+r.defense)*10),handType:r.handType||"1h",baseAttackInterval:r.baseAttackInterval,prefixes:[],suffixes:[]},u=p.affixCount;if(u>0){const g=Math.min(3,Math.ceil(u/2)),m=Math.min(3,u-g),v=p.prefix.filter(w=>{const h=x.prefix[w];return h&&h.allowedTypes.includes(l)});for(let w=0;w<g&&v.length>0;w++){const h=Math.floor(Math.random()*v.length),C=v.splice(h,1)[0];d.prefixes.push(C);const k=x.prefix[C].stats;k&&Object.keys(k).forEach(b=>{d[b]+=k[b]})}const f=p.suffix.filter(w=>{const h=x.suffix[w];return h&&h.allowedTypes.includes(l)});for(let w=0;w<m&&f.length>0;w++){const h=Math.floor(Math.random()*f.length),C=f.splice(h,1)[0];d.suffixes.push(C);const k=x.suffix[C].stats;k&&Object.keys(k).forEach(b=>{d[b]+=k[b]})}}let y=d.name;if(d.prefixes.length>0&&(y=`${d.prefixes[Math.floor(Math.random()*d.prefixes.length)]} ${y}`),d.suffixes.length>0){const g=d.suffixes[Math.floor(Math.random()*d.suffixes.length)];y=`${y} ${g}`}return d.fullName=y,d}function le(){const s="legendary",e=Object.keys(H),t=e[Math.floor(Math.random()*e.length)],o=H[t],n=o[Math.floor(Math.random()*o.length)],c=S[s],l={name:n.name,type:t,rarity:s,attack:n.attack,defense:n.defense,attackSpeed:n.attackSpeed,critChance:n.critChance,critDamage:n.critDamage,lifeSteal:n.lifeSteal,dodge:n.dodge,blockChance:n.blockChance,timestamp:Date.now(),prefixes:[],suffixes:[]};t==="weapon"&&n.handType&&(l.handType=n.handType),t==="weapon"&&n.baseAttackInterval&&(l.baseAttackInterval=n.baseAttackInterval);const i=c.affixCount;if(i>0){const p=Math.min(2,Math.ceil(i/2)),d=Math.min(2,i-p),u=c.prefix.filter(g=>{const m=x.prefix[g];return m&&m.allowedTypes.includes(t)});for(let g=0;g<p&&u.length>0;g++){const m=Math.floor(Math.random()*u.length),v=u.splice(m,1)[0];l.prefixes.push(v);const f=x.prefix[v].stats;f&&Object.keys(f).forEach(w=>{l[w]+=f[w]})}const y=c.suffix.filter(g=>{const m=x.suffix[g];return m&&m.allowedTypes.includes(t)});for(let g=0;g<d&&y.length>0;g++){const m=Math.floor(Math.random()*y.length),v=y.splice(m,1)[0];l.suffixes.push(v);const f=x.suffix[v].stats;f&&Object.keys(f).forEach(w=>{l[w]+=f[w]})}}let r=n.name;if(l.prefixes.length>0&&(r=`${l.prefixes[Math.floor(Math.random()*l.prefixes.length)]} ${r}`),l.suffixes.length>0){const p=l.suffixes[Math.floor(Math.random()*l.suffixes.length)];r=`${r} ${p}`}return l.fullName=r,l}function oe(s,e=2e3){const t=1+s/100;return Math.max(500,e/t)}function I(s){if(S[s.rarity]||S.common,s.rarity==="common")return s.name;let e=s.name;return s.prefixes&&s.prefixes.length>0&&(e=s.prefixes.join(" ")+" "+e),s.suffixes&&s.suffixes.length>0&&(e=e+" "+s.suffixes.join(" ")),e}function T(s){const t=H[s.type]?.find(n=>n.name===s.name);if(!t){if(s.name==="Rusty Sword"||!s.prefixes&&!s.suffixes||console.warn("Base template not found for item:",s),s.prefixes||s.suffixes){const c={attack:0,defense:0,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0};return s.prefixes&&s.prefixes.forEach(l=>{const i=x.prefix[l]?.stats;i&&Object.keys(i).forEach(r=>{c.hasOwnProperty(r)&&(c[r]+=i[r])})}),s.suffixes&&s.suffixes.forEach(l=>{const i=x.suffix[l]?.stats;i&&Object.keys(i).forEach(r=>{c.hasOwnProperty(r)&&(c[r]+=i[r])})}),{baseStats:{attack:(s.attack||0)-c.attack,defense:(s.defense||0)-c.defense,attackSpeed:(s.attackSpeed||0)-c.attackSpeed,critChance:(s.critChance||0)-c.critChance,critDamage:(s.critDamage||0)-c.critDamage,lifeSteal:(s.lifeSteal||0)-c.lifeSteal,dodge:(s.dodge||0)-c.dodge,blockChance:(s.blockChance||0)-c.blockChance},affixStats:c}}return{baseStats:{attack:s.attack||0,defense:s.defense||0,attackSpeed:s.attackSpeed||0,critChance:s.critChance||0,critDamage:s.critDamage||0,lifeSteal:s.lifeSteal||0,dodge:s.dodge||0,blockChance:s.blockChance||0},affixStats:{attack:0,defense:0,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0}}}const o={attack:0,defense:0,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0};return s.prefixes&&s.prefixes.forEach(n=>{const c=x.prefix[n]?.stats;c&&Object.keys(c).forEach(l=>{o.hasOwnProperty(l)&&(o[l]+=c[l])})}),s.suffixes&&s.suffixes.forEach(n=>{const c=x.suffix[n]?.stats;c&&Object.keys(c).forEach(l=>{o.hasOwnProperty(l)&&(o[l]+=c[l])})}),{baseStats:{attack:t.attack||0,defense:t.defense||0,attackSpeed:t.attackSpeed||0,critChance:t.critChance||0,critDamage:t.critDamage||0,lifeSteal:t.lifeSteal||0,dodge:t.dodge||0,blockChance:t.blockChance||0},affixStats:o}}class ie{constructor(){this.player={level:1,hp:100,maxHp:100,attack:10,defense:5,equipmentAttack:0,equipmentDefense:0,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,gold:0,xp:0,nextLevelXp:100,equipment:{weapon:{name:"Rusty Sword",type:"weapon",rarity:"common",attack:5,defense:0,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,baseAttackInterval:2500},offhand:null,helmet:null,body:null,legs:null,belt:null,boots:null,necklace:null,ring:null},inventory:[]},this.currentZone="forest",this.currentEnemy=null,this.unlockedZones=["forest"],this.needsInventoryUpdate=!0,this.needsCharacterUpdate=!0,this.respawnTimer={isActive:!1,currentTime:0,maxTime:3e3},this.needsShopUpdate=!0,this.combat={isActive:!1,playerTurn:!0,lastAttackTime:0},this.attackBars={player:{currentTime:0,maxTime:2e3},enemy:{currentTime:0,maxTime:3e3}},this.activityLog=[],this.logFilter="all",this.inventorySettings={sortBy:"name",filterBy:"all",autoSell:{enabled:!1,rarities:{common:!1,uncommon:!1,rare:!1},types:{weapon:!1,offhand:!1,helmet:!1,body:!1,legs:!1,belt:!1,boots:!1,necklace:!1,ring:!1}}},this.needsInventoryUpdate=!0,this.zones=ae,this.shopItems=ne,this.talents={exploration:{},power:{},wealth:{},knowledge:{}},this.ascensionCount=0,this.isShowingTalentTree=!1,this.currentDeathMessage=N()}calculateStats(){let e=10,t=5,o=this.getBaseMaxHpWithTalents(),n=0,c=0,l=0,i=0,r=0,p=0,d=0,u=0,y=0;const g=this.getTalentLevel("power","power_1"),m=this.getTalentLevel("power","power_2"),v=this.getTalentLevel("power","power_3"),f=this.getTalentLevel("power","power_4");e+=g*5;let w=m*2,h=v*10;f>0&&(e*=1.5,w+=25);for(const k in this.player.equipment){const b=this.player.equipment[k];b&&(n+=b.attack||0,c+=b.defense||0,l+=b.maxHp||0,i+=b.attackSpeed||0,r+=b.critChance||0,p+=b.critDamage||0,d+=b.lifeSteal||0,u+=b.dodge||0,y+=b.blockChance||0)}const C=(this.player.level-1)*10;this.player.attack=e+n,this.player.defense=t+c,this.player.maxHp=o+C+l,this.player.equipmentAttack=n,this.player.equipmentDefense=c,this.player.attackSpeed=i+h,this.player.critChance=r+w,this.player.critDamage=p,this.player.lifeSteal=d,this.player.dodge=u,this.player.blockChance=y}addToInventory(e){if(e.addedTimestamp=Date.now(),this.shouldAutoSell(e)){this.sellItem(e);return}this.player.inventory.push(e),this.needsInventoryUpdate=!0}shouldAutoSell(e){if(!this.inventorySettings.autoSell.enabled)return!1;const t=e.rarity||"common",o=this.inventorySettings.autoSell.rarities[t],n=this.inventorySettings.autoSell.types[e.type];return o||n}sellItem(e,t=!0){const o=Math.floor((e.price||10)*.5);return this.player.gold+=o,t&&this.addLogMessage(`💰 Sold ${e.fullName||e.name} for ${o} gold`,"shop"),o}sellAllJunk(){let e=0,t=0;const o=[];return this.player.inventory.forEach((n,c)=>{this.shouldAutoSell(n)&&o.push({item:n,index:c})}),o.reverse().forEach(({item:n,index:c})=>{e+=this.sellItem(n,!1),this.player.inventory.splice(c,1),this.needsInventoryUpdate=!0,t++}),t>0?this.addLogMessage(`💰 Sold ${t} items for ${e} total gold`,"shop"):this.addLogMessage("No items to sell based on current auto-sell settings","system"),{itemsSold:t,totalGold:e}}getSortedAndFilteredInventory(){let e=[...this.player.inventory];return this.inventorySettings.filterBy!=="all"&&(e=e.filter(t=>t.type===this.inventorySettings.filterBy)),e.sort((t,o)=>{switch(this.inventorySettings.sortBy){case"rarity":const n=["common","uncommon","rare","epic","legendary"],c=n.indexOf(t.rarity||"common");return n.indexOf(o.rarity||"common")-c;case"type":return t.type.localeCompare(o.type);case"attack":return(o.attack||0)-(t.attack||0);case"defense":return(o.defense||0)-(t.defense||0);case"new":return(o.addedTimestamp||0)-(t.addedTimestamp||0);case"name":default:return(t.fullName||t.name).localeCompare(o.fullName||o.name)}}),e}equipItem(e,t=!1,o=-1){console.log("equipItem called with:",{item:e,fromInventory:t,inventoryIndex:o});const n=e.type;if(n==="weapon"&&e.handType==="2h"){if(this.player.equipment.offhand){const i={...this.player.equipment.offhand,type:"offhand"};i.addedTimestamp=Date.now(),this.player.inventory.push(i),this.player.equipment.offhand=null,this.addLogMessage(`Unequipped ${i.fullName||i.name} to wield 2-handed weapon`,"system")}}else if(n==="offhand"){const i=this.player.equipment.weapon;if(i&&i.handType==="2h"){this.addLogMessage("Cannot equip offhand item while wielding a 2-handed weapon!","system");return}}let c=null;this.player.equipment[n]&&(c={...this.player.equipment[n],type:n});const l={name:e.name,fullName:e.fullName||e.name,rarity:e.rarity,attack:e.attack||0,defense:e.defense||0,attackSpeed:e.attackSpeed||0,critChance:e.critChance||0,critDamage:e.critDamage||0,lifeSteal:e.lifeSteal||0,dodge:e.dodge||0,blockChance:e.blockChance||0,handType:e.handType||"1h",prefixes:e.prefixes||[],suffixes:e.suffixes||[]};console.log("Equipping to slot:",n,"new item:",l),this.player.equipment[n]=l,this.needsCharacterUpdate=!0,t&&o>=0&&(console.log("Removing from inventory at index:",o,"inventory before:",[...this.player.inventory]),this.player.inventory.splice(o,1),this.needsInventoryUpdate=!0,console.log("Inventory after removal:",[...this.player.inventory]),c&&(console.log("Adding previously equipped item to inventory:",c),c.addedTimestamp=Date.now(),this.player.inventory.push(c))),this.calculateStats(),console.log("Stats after equipping:",{attack:this.player.attack,defense:this.player.defense})}spawnEnemy(){const e=this.zones[this.currentZone];if(!e.enemies||e.enemies.length===0)return null;if(this.currentZone==="goblinCave"&&e.boss&&e.killCount>=e.boss.requiredKills){Se(e.boss.name);const n={...e.boss,maxHp:e.boss.hp,attackInterval:e.boss.attackInterval||2e3,isBoss:!0,isLegendaryDropper:e.boss.isLegendaryDropper||!1};return e.killCount=0,this.addCombatMessage("🏴‍☠️ The Goblin King emerges from the depths!","system"),n}const t=e.enemies[Math.floor(Math.random()*e.enemies.length)];return{...t,maxHp:t.hp,attackInterval:t.attackInterval||2e3}}gainXp(e){const t=this.getTalentLevel("knowledge","knowledge_1"),o=this.getTalentLevel("knowledge","knowledge_2"),n=this.getTalentLevel("knowledge","knowledge_4");let c=1+t*.2;c+=o*.5,n>0&&(c*=3);const l=Math.floor(e*c);for(this.player.xp+=l;this.player.xp>=this.player.nextLevelXp;)this.levelUp()}levelUp(){this.player.xp-=this.player.nextLevelXp,this.player.level++;const e=this.getTalentLevel("knowledge","knowledge_3"),t=Math.min(.3,e*.1);this.player.nextLevelXp=Math.floor(this.player.nextLevelXp*1.2*(1-t)),this.player.maxHp+=10,this.player.hp=this.player.maxHp,document.getElementById("character-level").classList.add("level-up"),setTimeout(()=>{document.getElementById("character-level").classList.remove("level-up")},500),this.addLogMessage(`🎉 Level up! You are now level ${this.player.level}!`,"loot","level-up"),ke()}addLogMessage(e,t="system",o=""){const n={message:e,category:t,type:o,timestamp:new Date().toLocaleTimeString()};this.activityLog.push(n),this.activityLog.length>100&&this.activityLog.shift(),this.updateActivityLog()}addCombatMessage(e,t=""){this.addLogMessage(e,"combat",t)}updateActivityLog(){const e=document.getElementById("activity-messages");if(!e)return;e.innerHTML="",(this.logFilter==="all"?this.activityLog:this.activityLog.filter(o=>o.category===this.logFilter)).forEach(o=>{const n=document.createElement("div");n.className=`activity-message ${o.category} ${o.type}`,n.innerHTML=`<span class="timestamp">[${o.timestamp}]</span> ${o.message}`,e.appendChild(n)}),e.scrollTop=e.scrollHeight}setLogFilter(e){this.logFilter=e,this.updateActivityLog(),document.querySelectorAll(".filter-btn").forEach(t=>{t.classList.remove("active")}),document.querySelector(`[data-filter="${e}"]`).classList.add("active")}clearActivityLog(){this.activityLog=[],this.updateActivityLog()}save(){const e={player:this.player,currentZone:this.currentZone,unlockedZones:this.unlockedZones};localStorage.setItem("idleRPG_save",JSON.stringify(e)),alert("Game saved successfully!")}load(){const e=localStorage.getItem("idleRPG_save");if(e){const t=JSON.parse(e);return this.player={...this.player,...t.player},this.currentZone=t.currentZone||"forest",this.unlockedZones=t.unlockedZones||["forest"],Object.keys(this.player.equipment).forEach(o=>{const n=this.player.equipment[o];n&&!n.type&&(n.type=o)}),this.calculateStats(),this.needsCharacterUpdate=!0,alert("Game loaded successfully!"),!0}return!1}reset(){confirm("Are you sure you want to reset your game? This cannot be undone!")&&(localStorage.removeItem("idleRPG_save"),location.reload())}getPlayerAttackInterval(){const t=this.player.equipment.weapon?.baseAttackInterval||2e3;return oe(this.player.attackSpeed||0,t)}getEnemyAttackInterval(e){return e?.attackInterval||2e3}updateAttackBars(e){if(!(!this.combat.isActive||!this.currentEnemy)){if(this.attackBars.player.maxTime=this.getPlayerAttackInterval(),this.attackBars.player.currentTime+=e,this.attackBars.enemy.maxTime=this.getEnemyAttackInterval(this.currentEnemy),this.attackBars.enemy.currentTime+=e,this.attackBars.player.currentTime>=this.attackBars.player.maxTime){this.performPlayerAttack(),this.attackBars.player.currentTime=0;const t=document.getElementById("player-attack-fill");t&&(t.style.width="0%")}if(this.attackBars.enemy.currentTime>=this.attackBars.enemy.maxTime){this.performEnemyAttack(),this.attackBars.enemy.currentTime=0;const t=document.getElementById("enemy-attack-fill");t&&(t.style.width="0%")}this.updateAttackBarUI()}}updateRespawnTimer(e){this.respawnTimer.isActive&&(this.respawnTimer.currentTime+=e,this.respawnTimer.currentTime>=this.respawnTimer.maxTime&&(this.respawnTimer.isActive=!1,this.respawnTimer.currentTime=0,j()))}updateAttackBarUI(){const e=this.attackBars.player.currentTime/this.attackBars.player.maxTime*100,t=this.attackBars.enemy.currentTime/this.attackBars.enemy.maxTime*100,o=document.getElementById("player-attack-fill"),n=document.getElementById("enemy-attack-fill");o&&(o.style.width=`${Math.min(100,e)}%`),n&&(n.style.width=`${Math.min(100,t)}%`);const c=document.getElementById("player-attack-label"),l=document.getElementById("enemy-attack-label");if(c){const i=Math.floor(this.attackBars.player.currentTime),r=Math.floor(this.attackBars.player.maxTime);c.textContent=`${i}/${r}`}if(l){const i=Math.floor(this.attackBars.enemy.currentTime),r=Math.floor(this.attackBars.enemy.maxTime);l.textContent=`${i}/${r}`}}performPlayerAttack(){if(!this.currentEnemy)return;let e=Math.max(1,this.player.attack-this.currentEnemy.defense),t=!1,o=0;if(this.player.critChance>0&&Math.random()*100<=this.player.critChance&&(t=!0,e=Math.floor(e*(1+this.player.critDamage/100))),this.currentEnemy.hp-=e,this.currentEnemy.hp<=0){const r=document.getElementById("enemy-hp-bar");r&&(r.classList.add("instant"),r.style.width="0%",r.classList.add("respawning"),setTimeout(()=>{r.classList.remove("instant")},50))}const n=document.getElementById("enemy-hp-bar");if(n&&this.currentEnemy.hp>0&&R(e,n,"enemy",t),this.player.lifeSteal>0&&(o=Math.floor(e*(this.player.lifeSteal/100)),o>0)){this.player.hp=Math.min(this.player.maxHp,this.player.hp+o);const r=document.getElementById("player-hp-bar");r&&R(o,r,"player",!1,!1,!0)}let c=`You attack ${this.currentEnemy.name} for ${e} damage`;t&&(c+=" (💥 CRITICAL HIT!)"),o>0&&(c+=` and heal for ${o} HP`),c+="!",this.addCombatMessage(c,t?"player-crit":"player-attack");const l=document.querySelector(".enemy-side");l&&(l.classList.add("damage-animation"),setTimeout(()=>{l.classList.remove("damage-animation")},300));const i=document.getElementById("player-image");i&&(i.classList.add("player-attacking"),setTimeout(()=>{i.classList.remove("player-attacking")},600)),this.currentEnemy.hp<=0&&this.handleEnemyDefeat()}performEnemyAttack(){if(!this.currentEnemy)return;const e=document.getElementById("enemy-image");if(e&&(console.log("Enemy attacking! Classes before:",e.className),e.classList.add("enemy-attacking"),setTimeout(()=>{console.log("Enemy attack finished! Classes after:",e.className),e.classList.remove("enemy-attacking")},600)),this.player.dodge>0&&Math.random()*100<=this.player.dodge){const r=document.getElementById("player-hp-bar");r&&R(0,r,"player",!1,!0),this.addCombatMessage(`You dodge ${this.currentEnemy.name}'s attack! 💨`,"player-dodge");return}let t=Math.max(1,this.currentEnemy.attack-this.player.defense),o=!1;this.player.blockChance>0&&Math.random()*100<=this.player.blockChance&&(o=!0,t=Math.floor(t*.5)),this.player.hp-=t;const n=document.getElementById("player-hp-bar");n&&R(t,n,"player",!1,!1,!1);let c=`${this.currentEnemy.name} attacks you for ${t} damage`;o&&(c+=" (🛡️ BLOCKED!)"),c+="!",this.addCombatMessage(c,o?"enemy-blocked":"enemy-attack");const l=document.querySelector(".player-side");l&&(l.classList.add("damage-animation"),setTimeout(()=>{l.classList.remove("damage-animation")},300)),this.player.hp<=0&&this.handlePlayerDeath()}handleEnemyDefeat(){const e=this.currentEnemy.gold,t=.1+Math.random()*.9;let o=Math.floor(e*t),n=this.currentEnemy.xp;o=Math.floor(o*this.getGoldMultiplier()),n=Math.floor(n*this.getExperienceMultiplier()),this.player.gold+=o,this.gainXp(n),this.addLogMessage(`${this.currentEnemy.name} defeated! Gained ${o} gold and ${n} XP!`,"loot","enemy-defeated"),this.currentZone==="goblinCave"&&this.currentEnemy.name.includes("Goblin")&&!this.currentEnemy.isBoss&&(this.zones.goblinCave.killCount++,this.addCombatMessage(`Goblins defeated: ${this.zones.goblinCave.killCount}/${this.zones.goblinCave.boss.requiredKills}`,"system"));let c;const l=this.zones[this.currentZone];if(this.currentEnemy.isBoss&&this.currentEnemy.isLegendaryDropper)c=le(),this.addLogMessage(`💎 The ${this.currentEnemy.name} dropped a legendary item! ${c.fullName}!`,"loot","enemy-defeated"),Ce(this.currentEnemy.name),this.addToInventory(c);else{let i=l.dropChance||30;const r=l.allowedRarities||["common","uncommon","rare","epic"],p=this.getTalentLevel("wealth","wealth_2"),d=this.getTalentLevel("wealth","wealth_4");i+=p*10,d>0&&(i+=50),Math.random()*100<=i&&(c=se(r),this.addLogMessage(`${this.currentEnemy.name} dropped ${c.fullName}!`,"loot","enemy-defeated"),this.addToInventory(c))}this.currentEnemy=null,this.combat.isActive=!1,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,this.respawnTimer.isActive=!0,this.respawnTimer.currentTime=0}handlePlayerDeath(){this.combat.isActive=!1,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,this.currentZone==="goblinCave"&&(this.zones.goblinCave.killCount=0),this.addCombatMessage("You were defeated! Choose to ascend and gain permanent power...","player-death"),this.currentEnemy=null,this.currentDeathMessage=N(),J(),pe()}getTalentLevel(e,t){return this.talents[e][t]||0}getBaseAttackWithTalents(){return 10+this.getTalentLevel("power","power_1")*5}getBaseDefenseWithTalents(){return 5}getBaseMaxHpWithTalents(){return 100}getBaseAttackSpeedWithTalents(){return this.getTalentLevel("power","power_3")*10}getBaseCritChanceWithTalents(){const e=this.getTalentLevel("power","power_2"),t=this.getTalentLevel("power","power_4");let o=e*2;return t>0&&(o+=25),o}getBaseCritDamageWithTalents(){return 0}getBaseLifeStealWithTalents(){return 0}getBaseDodgeWithTalents(){return 0}getBaseBlockChanceWithTalents(){return 0}getExperienceMultiplier(){let e=1;const t=this.getTalentLevel("knowledge","knowledge_1"),o=this.getTalentLevel("knowledge","knowledge_2"),n=this.getTalentLevel("knowledge","knowledge_4");return e+=t*.2,e+=o*.5,n>0&&(e*=3),e}getGoldMultiplier(){let e=1;const t=this.getTalentLevel("wealth","wealth_1"),o=this.getTalentLevel("wealth","wealth_4");return e+=t*.25,o>0&&(e*=2),e}canAllocateTalent(e,t){const n=z[e].nodes.find(i=>i.id===t);if(!n)return!1;const c=this.getTalentLevel(e,t);if(c>=n.maxLevel)return!1;const l=n.cost*(c+1);if(this.player.gold<l)return!1;for(const i of n.prerequisites)if(this.getTalentLevel(e,i)===0)return!1;return!0}allocateTalent(e,t){if(!this.canAllocateTalent(e,t))return!1;const n=z[e].nodes.find(i=>i.id===t),c=this.getTalentLevel(e,t),l=n.cost*(c+1);return this.player.gold-=l,this.talents[e][t]=c+1,this.addLogMessage(`Allocated ${n.name} (Level ${c+1})`,"system"),!0}getTotalTalentPoints(){let e=0;for(const t in this.talents)for(const o in this.talents[t])e+=this.talents[t][o];return e}ascend(){this.player.gold,this.player.level=1,this.player.hp=this.getBaseMaxHpWithTalents(),this.player.maxHp=this.getBaseMaxHpWithTalents(),this.player.attack=10,this.player.defense=5,this.player.equipmentAttack=0,this.player.equipmentDefense=0,this.player.attackSpeed=0,this.player.critChance=0,this.player.critDamage=0,this.player.lifeSteal=0,this.player.dodge=0,this.player.blockChance=0,this.player.xp=0,this.player.nextLevelXp=100,this.player.inventory=[],this.player.equipment={weapon:{name:"Rusty Sword",type:"weapon",rarity:"common",attack:5,defense:0,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,baseAttackInterval:2500},offhand:null,helmet:null,body:null,legs:null,belt:null,boots:null,necklace:null,ring:null},this.unlockedZones=["forest"],this.currentZone="forest",this.currentEnemy=null,this.combat.isActive=!1,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,this.applyTalentBonuses(),this.ascensionCount++,this.addLogMessage(`Ascension ${this.ascensionCount} complete! Your journey begins anew with ${this.getTotalTalentPoints()} talent points.`,"system"),this.needsCharacterUpdate=!0,this.needsInventoryUpdate=!0,this.needsShopUpdate=!0}applyTalentBonuses(){this.getTalentLevel("knowledge","knowledge_4")>0&&(this.player.level=5,this.player.xp=0,this.player.nextLevelXp=this.calculateXpForLevel(6));const t=this.getTalentLevel("power","power_1");this.player.attack+=t*5,this.getTalentLevel("exploration","exploration_1"),this.calculateStats()}calculateXpForLevel(e){return Math.floor(100*Math.pow(1.1,e-1))}}const a=new ie;function R(s,e,t="enemy",o=!1,n=!1,c=!1){const l=document.createElement("div");if(l.className="floating-damage",n?(l.textContent="MISS",l.classList.add("miss")):c?(l.textContent=`+${s}`,l.classList.add("heal")):(l.textContent=`-${s}`,l.classList.add(t),o&&(l.classList.add("critical"),l.textContent=`CRIT! -${s}`)),!e)return;const i=e.getBoundingClientRect();l.style.position="fixed",l.style.left=`${i.left+i.width/2+Math.random()*40-20}px`,l.style.top=`${i.top+i.height/2}px`,l.style.transform="translate(-50%, -50%)",document.body.appendChild(l),setTimeout(()=>{l.parentNode&&l.parentNode.removeChild(l)},1500)}function E(){const s=document.getElementById("inventory-gold");s&&(s.textContent=a.player.gold,s.style.fontSize="0.7rem");const e=document.getElementById("shop-gold");e&&(e.textContent=a.player.gold);const t=a.getPlayerAttackInterval();document.getElementById("player-attack-interval").textContent=`${(t/1e3).toFixed(1)}s`;const o=document.getElementById("player-attack"),n=document.getElementById("player-defense");o&&(o.textContent=a.player.attack),n&&(n.textContent=a.player.defense),ce(),document.getElementById("character-level").textContent=a.player.level,document.getElementById("character-xp-text").textContent=`${a.player.xp} / ${a.player.nextLevelXp}`;const c=a.player.xp/a.player.nextLevelXp*100;document.getElementById("character-xp-fill").style.width=`${c}%`;const l=a.player.hp/a.player.maxHp*100;if(document.getElementById("player-hp-bar").style.width=`${l}%`,document.getElementById("player-hp-text").textContent=`${a.player.hp}/${a.player.maxHp}`,we(),a.currentEnemy){document.getElementById("enemy-title").textContent=a.currentEnemy.name,document.getElementById("enemy-attack").textContent=a.currentEnemy.attack,document.getElementById("enemy-defense").textContent=a.currentEnemy.defense;const i=document.getElementById("enemy-image");i&&(i.classList.remove("slime","goblin","orc","skeleton","dragon"),i.classList.add("enemy-image",a.currentEnemy.imageClass),i.style.display="block",i.style.visibility="visible");const r=a.getEnemyAttackInterval(a.currentEnemy);document.getElementById("enemy-attack-interval").textContent=`${(r/1e3).toFixed(1)}s`;const p=a.currentEnemy.hp/a.currentEnemy.maxHp*100,d=document.getElementById("enemy-hp-bar");d&&(d.style.width=`${p}%`,d.classList.remove("respawning")),document.getElementById("enemy-hp-text").textContent=`${a.currentEnemy.hp}/${a.currentEnemy.maxHp}`}else if(a.respawnTimer.isActive){const i=Math.ceil((a.respawnTimer.maxTime-a.respawnTimer.currentTime)/1e3),r=a.respawnTimer.currentTime/a.respawnTimer.maxTime*100;document.getElementById("enemy-title").textContent=`Respawning in ${i}s...`,document.getElementById("enemy-attack").textContent="-",document.getElementById("enemy-defense").textContent="-",document.getElementById("enemy-attack-interval").textContent="-";const p=document.getElementById("enemy-hp-bar");p&&(p.style.width=`${r}%`,p.classList.add("respawning")),document.getElementById("enemy-hp-text").textContent="";const d=document.getElementById("enemy-image");d&&(d.style.visibility="hidden")}else{document.getElementById("enemy-title").textContent="No Enemy",document.getElementById("enemy-attack").textContent="-",document.getElementById("enemy-defense").textContent="-",document.getElementById("enemy-attack-interval").textContent="-";const i=document.getElementById("enemy-hp-bar");i&&(i.style.width="0%",i.classList.remove("respawning"));const r=document.getElementById("enemy-hp-text");r&&(r.textContent="");const p=document.getElementById("enemy-image");p&&(p.style.visibility="hidden")}if(a.needsCharacterUpdate){for(const i in a.player.equipment){const r=a.player.equipment[i],p=document.getElementById(`${i}-item`),d=document.getElementById(`${i}-tooltip`);if(p){const u=i.charAt(0).toUpperCase()+i.slice(1);if(r){const g=G(r);p.innerHTML=`
            <div class="character-slot-name">${u}</div>
            <div class="character-slot-icon">${g}</div>
            <div class="equipped-item-name">${r.name}</div>
          `}else{const g=G(i);p.innerHTML=`
            <div class="character-slot-name">${u}</div>
            <div class="character-slot-icon empty">${g}</div>
            <div class="empty-slot">Empty</div>
          `}const y=p.closest(".character-slot");r?(y.classList.add("has-item"),d&&(re(d,r),d.style.display="block")):(y.classList.remove("has-item"),p.style.color="",d&&(d.innerHTML="",d.style.display="none"))}}a.needsCharacterUpdate=!1}a.needsInventoryUpdate&&(U(),a.needsInventoryUpdate=!1),a.currentZone==="town"&&a.needsShopUpdate&&(de(),a.needsShopUpdate=!1)}function ce(){document.getElementById("stats-total-attack").textContent=a.player.attack,document.getElementById("stats-total-defense").textContent=a.player.defense,document.getElementById("stats-max-hp").textContent=a.player.maxHp;const s=a.getPlayerAttackInterval();document.getElementById("stats-actual-attack-speed").textContent=`${(s/1e3).toFixed(1)}s`,document.getElementById("stats-crit-chance").textContent=`${a.player.critChance||0}%`,document.getElementById("stats-crit-damage").textContent=`${a.player.critDamage||0}%`,document.getElementById("stats-life-steal").textContent=`${a.player.lifeSteal||0}%`,document.getElementById("stats-dodge").textContent=`${a.player.dodge||0}%`,document.getElementById("stats-block-chance").textContent=`${a.player.blockChance||0}%`,document.getElementById("stats-xp-multiplier").textContent=`${a.getExperienceMultiplier().toFixed(2)}x`,document.getElementById("stats-gold-multiplier").textContent=`${a.getGoldMultiplier().toFixed(2)}x`;const e=document.getElementById("stats-total-attack"),t=document.getElementById("stats-total-defense"),o=document.getElementById("stats-max-hp");e&&(e.className="stat-value",a.player.equipmentAttack>0&&e.classList.add("positive")),t&&(t.className="stat-value",a.player.equipmentDefense>0&&t.classList.add("positive")),o&&(o.className="stat-value"),["crit-chance","crit-damage","life-steal","dodge","block-chance"].forEach(r=>{const p=document.getElementById(`stats-${r}`);if(p){const d=parseInt(p.textContent);p.className="stat-value",d>0&&p.classList.add("positive")}});const c=document.getElementById("stats-xp-multiplier"),l=document.getElementById("stats-gold-multiplier");c&&(c.className="stat-value",a.getExperienceMultiplier()>1&&c.classList.add("positive")),l&&(l.className="stat-value",a.getGoldMultiplier()>1&&l.classList.add("positive"));const i=document.getElementById("stats-actual-attack-speed");i&&(i.className="stat-value",a.player.attackSpeed>0&&i.classList.add("positive"))}function re(s,e){const t=S[e.rarity]||S.common,o=t.color;if(!e.type){for(const[d,u]of Object.entries(a.player.equipment))if(u===e){e.type=d;break}}if(!e.type){const d=[];e.attack&&d.push(`<div class="tooltip-stat-line"><span>Attack:</span><span>${e.attack}</span></div>`),e.defense&&d.push(`<div class="tooltip-stat-line"><span>Defense:</span><span>${e.defense}</span></div>`),e.baseAttackInterval&&d.push(`<div class="tooltip-stat-line"><span>Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),e.attackSpeed&&d.push(`<div class="tooltip-stat-line"><span>Attack Speed:</span><span>${e.attackSpeed}%</span></div>`),e.critChance&&d.push(`<div class="tooltip-stat-line"><span>Critical Chance:</span><span>${e.critChance}%</span></div>`),e.critDamage&&d.push(`<div class="tooltip-stat-line"><span>Critical Damage:</span><span>${e.critDamage}%</span></div>`),e.lifeSteal&&d.push(`<div class="tooltip-stat-line"><span>Life Steal:</span><span>${e.lifeSteal}%</span></div>`),e.dodge&&d.push(`<div class="tooltip-stat-line"><span>Dodge:</span><span>${e.dodge}%</span></div>`),e.blockChance&&d.push(`<div class="tooltip-stat-line"><span>Block Chance:</span><span>${e.blockChance}%</span></div>`),s.innerHTML=`
      <div class="tooltip-name" style="color: ${o};">
        ${I(e)}
      </div>
      <div class="tooltip-stats">
        ${d.join("")}
      </div>
      <div class="tooltip-rarity" style="color: ${o};">
        ${t.name}
      </div>
    `;return}const{baseStats:n,affixStats:c}=T(e);if(!n||!c){console.error("Error separating item stats:",e);const d=[];e.attack&&d.push(`<div class="tooltip-stat-line stat-base"><span>Attack:</span><span>${e.attack}</span></div>`),e.defense&&d.push(`<div class="tooltip-stat-line stat-base"><span>Defense:</span><span>${e.defense}</span></div>`),e.baseAttackInterval&&d.push(`<div class="tooltip-stat-line stat-base"><span>Base Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),e.attackSpeed&&d.push(`<div class="tooltip-stat-line stat-base"><span>Attack Speed:</span><span>${e.attackSpeed}%</span></div>`),e.critChance&&d.push(`<div class="tooltip-stat-line stat-base"><span>Critical Chance:</span><span>${e.critChance}%</span></div>`),e.critDamage&&d.push(`<div class="tooltip-stat-line stat-base"><span>Critical Damage:</span><span>${e.critDamage}%</span></div>`),e.lifeSteal&&d.push(`<div class="tooltip-stat-line stat-base"><span>Life Steal:</span><span>${e.lifeSteal}%</span></div>`),e.dodge&&d.push(`<div class="tooltip-stat-line stat-base"><span>Dodge:</span><span>${e.dodge}%</span></div>`),e.blockChance&&d.push(`<div class="tooltip-stat-line stat-base"><span>Block Chance:</span><span>${e.blockChance}%</span></div>`),s.innerHTML=`
      <div class="tooltip-name" style="color: ${o};">
        ${I(e)}
      </div>
      <div class="tooltip-stats">
        ${d.join("")}
      </div>
      <div class="tooltip-rarity" style="color: ${o};">
        ${t.name}
      </div>
    `;return}const l=[],i=[];(e.type==="weapon"||n.attack>0)&&l.push(`<div class="tooltip-stat-line stat-base"><span>Attack:</span><span>${n.attack}</span></div>`),e.type==="weapon"&&e.baseAttackInterval&&l.push(`<div class="tooltip-stat-line stat-base"><span>Base Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),(["helmet","body","legs","boots","offhand"].includes(e.type)||n.defense>0)&&l.push(`<div class="tooltip-stat-line stat-base"><span>Defense:</span><span>${n.defense}</span></div>`);const r=[{key:"attackSpeed",label:"Attack Speed",unit:"%"},{key:"critChance",label:"Critical Chance",unit:"%"},{key:"critDamage",label:"Critical Damage",unit:"%"},{key:"lifeSteal",label:"Life Steal",unit:"%"},{key:"dodge",label:"Dodge",unit:"%"},{key:"blockChance",label:"Block Chance",unit:"%"}];r.forEach(({key:d,label:u,unit:y})=>{n[d]>0&&l.push(`<div class="tooltip-stat-line stat-base"><span>${u}:</span><span>${n[d]}${y}</span></div>`)}),c.attack>0&&i.push(`<div class="tooltip-stat-line stat-neutral"><span>Attack:</span><span>${c.attack}</span></div>`),c.defense>0&&i.push(`<div class="tooltip-stat-line stat-neutral"><span>Defense:</span><span>${c.defense}</span></div>`),r.forEach(({key:d,label:u,unit:y})=>{c[d]>0&&i.push(`<div class="tooltip-stat-line stat-neutral"><span>${u}:</span><span>${c[d]}${y}</span></div>`)});let p=l.join("");l.length>0&&i.length>0&&(p+='<div class="tooltip-separator"></div>'),p+=i.join(""),s.innerHTML=`
    <div class="tooltip-name" style="color: ${o};">
      ${I(e)}
    </div>
    <div class="tooltip-stats">
      ${p}
    </div>
    <div class="tooltip-rarity" style="color: ${o};">
      ${t.name}
    </div>
  `}function O(s){const e=a.player.equipment[s.type];if(!e)return!0;const t={attack:s.attack||0,defense:s.defense||0,maxHp:s.maxHp||0,attackSpeed:s.attackSpeed||0,critChance:s.critChance||0,critDamage:s.critDamage||0,lifeSteal:s.lifeSteal||0,dodge:s.dodge||0,blockChance:s.blockChance||0},o={attack:e.attack||0,defense:e.defense||0,maxHp:e.maxHp||0,attackSpeed:e.attackSpeed||0,critChance:e.critChance||0,critDamage:e.critDamage||0,lifeSteal:e.lifeSteal||0,dodge:e.dodge||0,blockChance:e.blockChance||0};let n=0,c=0;for(const l in t)(t[l]>0||o[l]>0)&&(c++,t[l]>o[l]&&n++);return c>0&&n/c>.5}function G(s){if(typeof s=="string")return`<img src="/idle-rpg-game/assets/gear/${{weapon:"sword",offhand:"buckler",helmet:"helmet",body:"armor",legs:"pants",belt:"leather-belt",boots:"boots",necklace:"amulet",ring:"ring"}[s]||"sword"}.svg" alt="${s}" class="gear-icon" />`;let t=s.name.toLowerCase().replace(/\s+/g,"-");const o={sword:"sword",axe:"axe",mace:"mace",dagger:"dagger",staff:"staff",greatsword:"greatsword",battleaxe:"battleaxe",warhammer:"warhammer",buckler:"buckler","round-shield":"round-shield","tower-shield":"tower-shield",tome:"tome",helmet:"helmet",cap:"cap",crown:"crown",hood:"hood",armor:"armor",robe:"robe",vest:"vest",tunic:"tunic",greaves:"greaves",pants:"pants",leggings:"leggings",shorts:"shorts",sandals:"sandals",boots:"boots","heavy-boots":"heavy-boots","speed-boots":"speed-boots","leather-belt":"leather-belt","utility-belt":"utility-belt","chain-belt":"chain-belt","war-belt":"war-belt",amulet:"amulet",pendant:"pendant",ring:"ring",bracelet:"bracelet"};o[t]&&(t=o[t]);const n=s.rarity||"common";return`<img src="/idle-rpg-game/assets/gear/${t}.svg" alt="${s.name}" class="gear-icon rarity-${n}" loading="eager" onerror="this.style.display='none';" />`}function U(){const s=document.getElementById("inventory-items");if(!s){console.error("Inventory div not found!");return}D(),s.innerHTML="";const e=a.getSortedAndFilteredInventory();if(e.length===0){const t=document.createElement("div");t.className="inventory-empty",t.textContent=a.inventorySettings.filterBy==="all"?"No items in inventory":`No ${a.inventorySettings.filterBy} items in inventory`,t.style.color="var(--light-color)",t.style.fontStyle="italic",t.style.textAlign="center",t.style.padding="20px",s.appendChild(t);return}e.forEach(t=>{const o=a.player.inventory.findIndex(l=>l===t||l.fullName===t.fullName&&l.type===t.type),n=document.createElement("div");n.className="inventory-item",n.setAttribute("data-item-index",o),O(t)&&n.classList.add("stat-improvement");const c=t.rarity&&S[t.rarity]?S[t.rarity].color:"#9CA3AF";Math.floor((t.price||10)*.5),n.innerHTML=`
      <div class="item-icon">${G(t)}</div>
      <div class="item-name" style="color: ${c}; font-weight: bold;">
        ${I(t)}
      </div>
    `,n.addEventListener("mouseenter",l=>{M=t,B=l,F(l,t,P)}),n.addEventListener("mouseleave",l=>{M=null,B=null,D()}),n.addEventListener("mousemove",l=>{B=l,Q(l)}),n.addEventListener("click",l=>{if(l.preventDefault(),l.stopPropagation(),l.shiftKey){const i=parseInt(n.getAttribute("data-item-index")),r=a.player.inventory[i];r&&i>=0&&i<a.player.inventory.length&&(a.sellItem(r),a.player.inventory.splice(i,1),a.needsInventoryUpdate=!0,D(),n.classList.add("selling"),setTimeout(()=>{E()},300))}else{const i=parseInt(n.getAttribute("data-item-index")),r=a.player.inventory[i];if(r&&i>=0&&i<a.player.inventory.length){const p={...r};D(),a.equipItem(p,!0,i),a.addLogMessage(`✨ Equipped ${p.fullName||p.name}!`,"system"),n.classList.add("equipping"),setTimeout(()=>{E()},300)}}}),n.addEventListener("contextmenu",l=>{l.preventDefault(),l.stopPropagation();const i=parseInt(n.getAttribute("data-item-index")),r=a.player.inventory[i];r&&i>=0&&i<a.player.inventory.length&&(a.sellItem(r),a.player.inventory.splice(i,1),a.needsInventoryUpdate=!0,D(),n.classList.add("selling"),setTimeout(()=>{E()},300))}),s.appendChild(n)})}function de(){if(a.currentZone!=="town")return;const s=document.getElementById("shop-items"),e=document.getElementById("shop-gold");e&&(e.textContent=a.player.gold),s.innerHTML="",a.shopItems.forEach((t,o)=>{const n=document.createElement("div");n.className="shop-item",O(t)&&n.classList.add("stat-improvement");const c=a.player.gold>=t.price,l=[];t.attack>0&&l.push(`ATK: ${t.attack}`),t.defense>0&&l.push(`DEF: ${t.defense}`);const i=l.join(" | ");n.innerHTML=`
      <div class="item-name">${t.name}</div>
      <div class="item-stats">
        ${i}
      </div>
      <div class="item-type">${t.type.charAt(0).toUpperCase()+t.type.slice(1)}</div>
      <div class="item-price ${c?"affordable":"expensive"}">${t.price}g</div>
    `,c?n.addEventListener("click",()=>{a.player.gold-=t.price;const r={...t};a.addToInventory(r),a.addLogMessage(`💰 Purchased ${t.name} for ${t.price} gold`,"shop"),a.needsShopUpdate=!0,n.classList.add("purchasing"),setTimeout(()=>{E()},300)}):(n.style.opacity="0.6",n.style.cursor="not-allowed",n.title=`Need ${t.price-a.player.gold} more gold`),s.appendChild(n)})}function j(){if(a.currentZone!=="town"&&!a.currentEnemy){if(a.currentEnemy=a.spawnEnemy(),!a.currentEnemy)return;a.addCombatMessage(`A wild ${a.currentEnemy.name} appears!`),a.combat.isActive=!0,a.combat.lastAttackTime=Date.now(),a.attackBars.player.currentTime=0,a.attackBars.enemy.currentTime=0,a.attackBars.player.maxTime=a.getPlayerAttackInterval(),a.attackBars.enemy.maxTime=a.getEnemyAttackInterval(a.currentEnemy)}}function pe(){const s=document.getElementById("death-modal");s.style.display="flex",a.combat.isActive=!1}function me(){const s=document.getElementById("death-modal");s.style.display="none",fe()}function fe(){const s=document.getElementById("talent-tree-modal");s.style.display="flex",a.isShowingTalentTree=!0,X(),Y()}function ue(){const s=document.getElementById("talent-tree-modal");s.style.display="none",a.isShowingTalentTree=!1,a.ascend(),$("forest"),E()}function X(){Object.keys(z).forEach(s=>{const e=z[s],t=document.getElementById(`pathway-${s}`);if(!t)return;const o=t.querySelector(".talent-nodes");o&&(o.innerHTML="",e.nodes.forEach(n=>{const c=a.getTalentLevel(s,n.id),l=a.canAllocateTalent(s,n.id),i=n.cost*(c+1),r=document.createElement("div");r.className=`talent-node ${c>0?"allocated":""} ${l?"available":"locked"}`,r.dataset.pathway=s,r.dataset.talent=n.id,r.innerHTML=`
          ${c>0?`<div class="purchase-counter">${c}</div>`:""}
          <div class="talent-header">
            <div class="talent-node-name">${n.name}</div>
          </div>
          <div class="talent-node-cost">${i} gold</div>
        `,r.addEventListener("mouseenter",p=>{he(p,n,c,i)}),r.addEventListener("mouseleave",()=>{ge()}),r.addEventListener("mousemove",p=>{K(p)}),r.addEventListener("click",()=>{a.canAllocateTalent(s,n.id)&&(a.allocateTalent(s,n.id),Y())}),o.appendChild(r)}))})}function Y(){const s=document.getElementById("talent-gold");s&&(s.textContent=a.player.gold);const e=document.getElementById("talent-points");e&&(e.textContent=a.getTotalTalentPoints());const t=document.getElementById("ascension-count");t&&(t.textContent=a.ascensionCount),X()}function he(s,e,t,o){const n=document.getElementById("talent-tooltip"),c=document.getElementById("talent-tooltip-name"),l=document.getElementById("talent-tooltip-level"),i=document.getElementById("talent-tooltip-description"),r=document.getElementById("talent-tooltip-effect"),p=document.getElementById("talent-tooltip-cost");n&&c&&l&&i&&r&&p&&(c.textContent=e.name,l.textContent=`${t}/${e.maxLevel}`,i.textContent=e.description,r.textContent=e.effect,t>=e.maxLevel?p.textContent="Max Level":p.textContent=`Cost: ${o} gold`,n.style.display="block",n.classList.add("visible"),K(s))}function ge(){const s=document.getElementById("talent-tooltip");s&&(s.classList.remove("visible"),setTimeout(()=>{s.classList.contains("visible")||(s.style.display="none")},200))}function K(s){const e=document.getElementById("talent-tooltip");if(e&&e.style.display==="block"){const t=s.clientX+10,o=s.clientY+10,n=e.getBoundingClientRect(),c=window.innerWidth,l=window.innerHeight;let i=t,r=o;t+n.width>c&&(i=s.clientX-n.width-10),o+n.height>l&&(r=s.clientY-n.height-10),e.style.left=i+"px",e.style.top=r+"px"}}function A(s,e,t,o,n=null){const c=document.getElementById("zone-tooltip"),l=document.getElementById("zone-tooltip-icon"),i=document.getElementById("zone-tooltip-title"),r=document.getElementById("zone-tooltip-description"),p=document.getElementById("zone-tooltip-content");if(!c||!l||!i||!r||!p)return;const d={forest:"🌲",town:"🏘️",cave:"🕳️",goblinCave:"👹",mountain:"🏔️"};l.textContent=d[e]||"🗺️",i.textContent=t.name,r.textContent=t.description;let u="";if(e==="town"?u+=`
      <div class="zone-tooltip-enemies">
        <div class="zone-tooltip-enemies-title">🏪 Features:</div>
        <div class="zone-tooltip-enemy-list">
          • Purchase equipment<br>
          • Heal over time<br>
          • Safe from combat
        </div>
      </div>
    `:t.enemies&&t.enemies.length>0&&(u+=`
      <div class="zone-tooltip-enemies">
        <div class="zone-tooltip-enemies-title">⚔️ Enemies:</div>
        <div class="zone-tooltip-enemy-list">
          ${t.enemies.map(y=>`• ${y.name} (HP: ${y.hp}, ATK: ${y.attack})`).join("<br>")}
        </div>
      </div>
    `),e==="goblinCave"&&t.boss&&(u+=`
      <div class="zone-tooltip-boss">
        <div class="zone-tooltip-boss-title">👑 Boss: ${t.boss.name}</div>
        <div class="zone-tooltip-boss-info">HP: ${t.boss.hp}, ATK: ${t.boss.attack}<br>Requires ${t.boss.requiredKills} goblin kills<br>Drops legendary items!</div>
      </div>
    `),!o)if(n){const y=a.player.level;u+=`
        <div class="zone-tooltip-unlock">
          <div class="zone-tooltip-unlock-title">🔒 Zone Locked</div>
          <div class="zone-tooltip-unlock-req">Required Level: ${n.level}</div>
          <div class="zone-tooltip-unlock-current">Current Level: ${y}</div>
        </div>
      `}else u+=`
        <div class="zone-tooltip-unlock">
          <div class="zone-tooltip-unlock-title">🔒 Zone Locked</div>
          <div class="zone-tooltip-unlock-req">Complete more areas to unlock</div>
        </div>
      `;p.innerHTML=u,c.style.display="block",c.classList.add("visible"),L(s)}function q(){const s=document.getElementById("zone-tooltip");s&&(s.classList.remove("visible"),setTimeout(()=>{s.classList.contains("visible")||(s.style.display="none")},200))}function L(s){const e=document.getElementById("zone-tooltip");if(e&&e.style.display==="block"){const t=s.clientX+15,o=s.clientY+15,n=e.getBoundingClientRect(),c=window.innerWidth,l=window.innerHeight;let i=t,r=o;t+n.width>c&&(i=s.clientX-n.width-15),o+n.height>l&&(r=s.clientY-n.height-15),e.style.left=i+"px",e.style.top=r+"px"}}function $(s){a.currentZone==="goblinCave"&&s!=="goblinCave"&&(a.zones.goblinCave.killCount=0),a.currentZone=s,a.currentEnemy=null,a.combat.isActive=!1,document.querySelectorAll(".zone-btn").forEach(o=>{o.classList.remove("active")}),document.querySelector(`[data-zone="${s}"]`).classList.add("active");const e=document.querySelector(".combat-area"),t=document.getElementById("shop-area");if(s==="town"){e.style.display="none",t.style.display="flex",a.addLogMessage("Welcome to the peaceful town. Rest and shop here.","system"),a.needsShopUpdate=!0;const o=setInterval(()=>{a.currentZone==="town"&&a.player.hp<a.player.maxHp?(a.player.hp=Math.min(a.player.maxHp,a.player.hp+2),E()):clearInterval(o)},1e3)}else e.style.display="grid",t.style.display="none",a.addLogMessage(`Entered ${a.zones[s].name}. ${a.zones[s].description}`,"system"),setTimeout(()=>j(),500);E()}function ye(){const s=document.getElementById("zone-buttons"),e={cave:{level:5,message:"The Mysterious Cave is now accessible!"},goblinCave:{level:8,message:"You discovered the Goblin Cave!"},mountain:{level:12,message:"The Snowy Mountains path has opened!"},town:{level:3,message:"You can now visit the Town to trade and rest!"}};for(const[t,o]of Object.entries(a.zones)){const n=document.createElement("button"),c=a.unlockedZones.includes(t);n.className=`zone-btn ${t==="town"?"town":""} ${c?"":"locked"}`,n.textContent=o.name,n.setAttribute("data-zone",t),c?n.addEventListener("click",()=>$(t)):n.addEventListener("click",()=>{const l=e[t];l?a.addLogMessage(`This zone is locked. Reach level ${l.level} to unlock it!`,"system"):a.addLogMessage("This zone is locked. Complete more areas to unlock it!","system")}),c?o.enemies&&o.enemies.length>0?(n.addEventListener("mouseenter",l=>{A(l,t,o,!0)}),n.addEventListener("mouseleave",()=>{q()}),n.addEventListener("mousemove",l=>{L(l)})):(n.addEventListener("mouseenter",l=>{A(l,t,o,!0)}),n.addEventListener("mouseleave",()=>{q()}),n.addEventListener("mousemove",l=>{L(l)})):(n.addEventListener("mouseenter",l=>{A(l,t,o,!1,e[t])}),n.addEventListener("mouseleave",()=>{q()}),n.addEventListener("mousemove",l=>{L(l)})),s.appendChild(n)}}function ve(){const s={cave:{level:5,message:"The Mysterious Cave is now accessible!"},goblinCave:{level:8,message:"You discovered the Goblin Cave!"},mountain:{level:12,message:"The Snowy Mountains path has opened!"},town:{level:3,message:"You can now visit the Town to trade and rest!"}};document.querySelectorAll(".zone-btn").forEach(t=>{const o=t.getAttribute("data-zone"),n=a.zones[o],c=a.unlockedZones.includes(o),l=t.cloneNode(!0);t.parentNode.replaceChild(l,t),c?l.addEventListener("click",()=>$(o)):l.addEventListener("click",()=>{const i=s[o];i?a.addLogMessage(`This zone is locked. Reach level ${i.level} to unlock it!`,"system"):a.addLogMessage("This zone is locked. Complete more areas to unlock it!","system")}),c?(l.addEventListener("mouseenter",i=>{A(i,o,n,!0)}),l.addEventListener("mouseleave",()=>{q()}),l.addEventListener("mousemove",i=>{L(i)})):(l.addEventListener("mouseenter",i=>{A(i,o,n,!1,s[o])}),l.addEventListener("mouseleave",()=>{q()}),l.addEventListener("mousemove",i=>{L(i)}))})}function ke(){const s=a.player.level;let e=!1;const t={cave:{level:5,message:"The Mysterious Cave is now accessible!"},goblinCave:{level:8,message:"You discovered the Goblin Cave!"},mountain:{level:12,message:"The Snowy Mountains path has opened!"},town:{level:3,message:"You can now visit the Town to trade and rest!"}};for(const[o,n]of Object.entries(t))!a.unlockedZones.includes(o)&&s>=n.level&&(a.unlockedZones.push(o),a.addLogMessage(n.message,"system"),e=!0);ve(),e&&be()}function be(){document.querySelectorAll(".zone-btn").forEach(e=>{const t=e.getAttribute("data-zone");if(a.unlockedZones.includes(t)&&e.classList.contains("locked")){e.classList.remove("locked");const n=e.cloneNode(!0);n.addEventListener("click",()=>$(t)),e.parentNode.replaceChild(n,e);const c=a.zones[t];if(c.enemies&&c.enemies.length>0){const l=c.enemies.map(r=>`${r.name}`).join(`
`);let i=`${c.description}

Enemies:
${l}`;t==="goblinCave"&&c.boss&&(i+=`

Boss: ${c.boss.name} (drops legendary items!)`),n.title=i}else n.title=c.description}})}function we(){const s=document.getElementById("kill-counter"),e=document.getElementById("kill-counter-text");if(a.currentZone==="goblinCave"){const t=a.zones.goblinCave;s.style.display="block",e.textContent=`Goblins defeated: ${t.killCount}/${t.boss.requiredKills}`}else s.style.display="none"}function Se(s){const e=document.getElementById("boss-warning"),t=document.getElementById("boss-warning-name");t.textContent=s,e.style.display="block",setTimeout(()=>{e.style.display="none"},2e3)}function Ce(s){const e=document.getElementById("victory-message"),t=document.getElementById("victory-subtext");t.textContent=`The ${s} has been defeated!`,e.style.display="block",setTimeout(()=>{e.style.display="none"},4e3)}function J(){const s=document.getElementById("end-run-btn");s&&(s.textContent=`💀 ${a.currentDeathMessage}`,s.title=`End current run: ${a.currentDeathMessage}`)}document.getElementById("save-game").addEventListener("click",()=>a.save());document.getElementById("load-game").addEventListener("click",()=>{a.load()&&(E(),$(a.currentZone))});document.getElementById("reset-game").addEventListener("click",()=>a.reset());document.getElementById("end-run-btn").addEventListener("click",()=>{confirm(`Are you sure you want to ${a.currentDeathMessage.toLowerCase()}? This will end your current run and trigger ascension.`)&&(a.player.hp=0,a.handlePlayerDeath())});document.getElementById("ascend-btn").addEventListener("click",()=>me());document.getElementById("confirm-ascend").addEventListener("click",()=>ue());document.querySelectorAll(".character-slot").forEach(s=>{s.addEventListener("click",()=>{const e=s.getAttribute("data-slot"),t=a.player.equipment[e];if(t){const o={...t,type:e,addedTimestamp:Date.now()};a.player.inventory.push(o),a.player.equipment[e]=null,a.needsCharacterUpdate=!0,a.calculateStats(),a.addLogMessage(`Unequipped ${t.fullName||t.name}`,"system"),s.classList.add("damage-animation"),setTimeout(()=>{s.classList.remove("damage-animation"),E()},300)}else a.addLogMessage(`No item equipped in ${e} slot`,"system")})});document.querySelectorAll(".stat-tooltip-item").forEach(s=>{const e=s.getAttribute("data-tooltip");s.addEventListener("mouseenter",t=>{Te(t,e)}),s.addEventListener("mouseleave",()=>{Be()}),s.addEventListener("mousemove",t=>{ee(t)})});let W=0,_=0;const xe=100;function V(s=performance.now()){_===0&&(_=s);const e=s-_;_=s,a.combat.isActive&&a.currentEnemy&&a.currentZone!=="town"&&a.updateAttackBars(e),a.respawnTimer.isActive&&a.currentZone!=="town"&&a.updateRespawnTimer(e),s-W>=xe&&(E(),W=s),requestAnimationFrame(V)}function Ee(){console.log("initGame: Starting game initialization"),a.calculateStats(),ye(),$("forest"),console.log("initGame: Game initialized, current zone:",a.currentZone,"Combat active:",a.combat.isActive),J(),document.querySelectorAll(".filter-btn").forEach(s=>{s.addEventListener("click",()=>{const e=s.getAttribute("data-filter");a.setLogFilter(e)})}),document.getElementById("clear-log").addEventListener("click",()=>{confirm("Clear all activity log entries?")&&a.clearActivityLog()}),document.getElementById("inventory-sort").addEventListener("change",s=>{a.inventorySettings.sortBy=s.target.value,a.needsInventoryUpdate=!0,U()}),document.getElementById("inventory-filter").addEventListener("change",s=>{a.inventorySettings.filterBy=s.target.value,a.needsInventoryUpdate=!0,U()}),document.getElementById("auto-sell-btn").addEventListener("click",()=>{document.getElementById("auto-sell-common").checked=a.inventorySettings.autoSell.rarities.common,document.getElementById("auto-sell-uncommon").checked=a.inventorySettings.autoSell.rarities.uncommon,document.getElementById("auto-sell-rare").checked=a.inventorySettings.autoSell.rarities.rare,document.getElementById("auto-sell-weapons").checked=a.inventorySettings.autoSell.types.weapon,document.getElementById("auto-sell-offhand").checked=a.inventorySettings.autoSell.types.offhand,document.getElementById("auto-sell-helmets").checked=a.inventorySettings.autoSell.types.helmet,document.getElementById("auto-sell-body").checked=a.inventorySettings.autoSell.types.body,document.getElementById("auto-sell-legs").checked=a.inventorySettings.autoSell.types.legs,document.getElementById("auto-sell-belt").checked=a.inventorySettings.autoSell.types.belt,document.getElementById("auto-sell-boots").checked=a.inventorySettings.autoSell.types.boots,document.getElementById("auto-sell-necklaces").checked=a.inventorySettings.autoSell.types.necklace,document.getElementById("auto-sell-rings").checked=a.inventorySettings.autoSell.types.ring,document.getElementById("auto-sell-modal").style.display="flex"}),document.getElementById("close-auto-sell").addEventListener("click",()=>{document.getElementById("auto-sell-modal").style.display="none"}),document.getElementById("save-auto-sell").addEventListener("click",()=>{if(a.inventorySettings.autoSell.rarities.common=document.getElementById("auto-sell-common").checked,a.inventorySettings.autoSell.rarities.uncommon=document.getElementById("auto-sell-uncommon").checked,a.inventorySettings.autoSell.rarities.rare=document.getElementById("auto-sell-rare").checked,a.inventorySettings.autoSell.types.weapon=document.getElementById("auto-sell-weapons").checked,a.inventorySettings.autoSell.types.offhand=document.getElementById("auto-sell-offhand").checked,a.inventorySettings.autoSell.types.helmet=document.getElementById("auto-sell-helmets").checked,a.inventorySettings.autoSell.types.body=document.getElementById("auto-sell-body").checked,a.inventorySettings.autoSell.types.legs=document.getElementById("auto-sell-legs").checked,a.inventorySettings.autoSell.types.belt=document.getElementById("auto-sell-belt").checked,a.inventorySettings.autoSell.types.boots=document.getElementById("auto-sell-boots").checked,a.inventorySettings.autoSell.types.necklace=document.getElementById("auto-sell-necklaces").checked,a.inventorySettings.autoSell.types.ring=document.getElementById("auto-sell-rings").checked,a.inventorySettings.autoSell.enabled){const s=[];if(a.player.inventory.forEach((e,t)=>{a.shouldAutoSell(e)&&s.push({item:e,index:t})}),s.length>0){let e=0;s.reverse().forEach(({item:t,index:o})=>{e+=a.sellItem(t,!1),a.player.inventory.splice(o,1),a.needsInventoryUpdate=!0}),a.addLogMessage(`💰 Auto-sold ${s.length} existing items for ${e} total gold`,"shop")}}document.getElementById("auto-sell-modal").style.display="none",a.addLogMessage("💾 Auto-sell settings saved","system")}),document.getElementById("auto-sell-enabled-main").addEventListener("change",s=>{if(a.inventorySettings.autoSell.enabled=s.target.checked,s.target.checked){a.addLogMessage("✅ Auto-sell enabled","system");const e=[];if(a.player.inventory.forEach((t,o)=>{a.shouldAutoSell(t)&&e.push({item:t,index:o})}),e.length>0){let t=0;e.reverse().forEach(({item:o,index:n})=>{t+=a.sellItem(o,!1),a.player.inventory.splice(n,1),a.needsInventoryUpdate=!0}),a.addLogMessage(`💰 Auto-sold ${e.length} existing items for ${t} total gold`,"shop")}}else a.addLogMessage("❌ Auto-sell disabled","system")}),document.getElementById("auto-sell-enabled-main").checked=a.inventorySettings.autoSell.enabled,a.addLogMessage("🎮 Welcome to the Idle RPG! Your adventure begins...","system"),localStorage.getItem("idleRPG_save")&&confirm("Found a saved game. Would you like to load it?")&&(a.load(),$(a.currentZone),a.addLogMessage("📂 Game loaded successfully!","system")),Object.keys(a.player.equipment).forEach(s=>{const e=a.player.equipment[s];e&&(e.type||(e.type=s))}),E(),V()}function F(s,e,t=!1){const o=document.getElementById("inventory-tooltip");if(!o||!e)return;const n=a.player.equipment[e.type],c=S[e.rarity]||S.common,l=n?S[n.rarity]||S.common:null;let i=`<div class="tooltip-title" style="color: ${c.color};">${I(e)}</div>`;i+=`<div class="tooltip-item-type">${e.type.charAt(0).toUpperCase()+e.type.slice(1)}</div>`;const{baseStats:r,affixStats:p}=T(e),d=[],u=[];if(r.attack>0){let m=`${r.attack} Base Attack`;if(t&&n){const{baseStats:v}=T(n),f=r.attack-v.attack;f>0?m=`<div class="stat-gain">${m} (+${f})</div>`:f<0?m=`<div class="stat-loss">${m} (${f})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-base">${m}</div>`;d.push(m)}if(e.type==="weapon"&&e.baseAttackInterval){let m=`${(e.baseAttackInterval/1e3).toFixed(1)}s Base Attack Speed`;if(t&&n){const v=n.baseAttackInterval||2e3,f=e.baseAttackInterval-v;f>0?m=`<div class="stat-loss">${m} (+${(f/1e3).toFixed(1)}s)</div>`:f<0?m=`<div class="stat-gain">${m} (${(f/1e3).toFixed(1)}s)</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-base">${m}</div>`;d.push(m)}if(r.defense>0){let m=`${r.defense} Defense`;if(t&&n){const{baseStats:v}=T(n),f=r.defense-v.defense;f>0?m=`<div class="stat-gain">${m} (+${f})</div>`:f<0?m=`<div class="stat-loss">${m} (${f})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-base">${m}</div>`;d.push(m)}const y=[{key:"attackSpeed",label:"Attack Speed",unit:"%"},{key:"critChance",label:"Crit Chance",unit:"%"},{key:"critDamage",label:"Crit Damage",unit:"%"},{key:"lifeSteal",label:"Life Steal",unit:"%"},{key:"dodge",label:"Dodge",unit:"%"},{key:"blockChance",label:"Block Chance",unit:"%"}];if(y.forEach(({key:m,label:v,unit:f})=>{if(r[m]>0){let h=`${r[m]}${f} ${v}`;if(t&&n){const{baseStats:C}=T(n),k=r[m]-C[m];k>0?h=`<div class="stat-gain">${h} (${k}${f})</div>`:k<0?h=`<div class="stat-loss">${h} (${k}${f})</div>`:h=`<div class="stat-neutral">${h}</div>`}else h=`<div class="stat-base">${h}</div>`;d.push(h)}}),p.attack>0){let m=`${p.attack} Attack`;if(t&&n){const{affixStats:v}=T(n),f=p.attack-v.attack;f>0?m=`<div class="stat-gain">${m} (+${f})</div>`:f<0?m=`<div class="stat-loss">${m} (${f})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-neutral">${m}</div>`;u.push(m)}if(p.defense>0){let m=`${p.defense} Defense`;if(t&&n){const{affixStats:v}=T(n),f=p.defense-v.defense;f>0?m=`<div class="stat-gain">${m} (+${f})</div>`:f<0?m=`<div class="stat-loss">${m} (${f})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-neutral">${m}</div>`;u.push(m)}if(y.forEach(({key:m,label:v,unit:f})=>{if(p[m]>0){let h=`${p[m]}${f} ${v}`;if(t&&n){const{affixStats:C}=T(n),k=p[m]-C[m];k>0?h=`<div class="stat-gain">${h} (${k}${f})</div>`:k<0?h=`<div class="stat-loss">${h} (${k}${f})</div>`:h=`<div class="stat-neutral">${h}</div>`}else h=`<div class="stat-neutral">${h}</div>`;u.push(h)}}),i+=d.join(""),d.length>0&&u.length>0&&(i+='<div class="tooltip-separator"></div>'),i+=u.join(""),t&&n){const{baseStats:m,affixStats:v}=T(n),f=[];[{key:"attack",label:"Attack",unit:"",isBase:!0},{key:"defense",label:"Defense",unit:"",isBase:!0},{key:"attackSpeed",label:"Attack Speed",unit:"%",isBase:!0},{key:"critChance",label:"Crit Chance",unit:"%",isBase:!0},{key:"critDamage",label:"Crit Damage",unit:"%",isBase:!0},{key:"lifeSteal",label:"Life Steal",unit:"%",isBase:!0},{key:"dodge",label:"Dodge",unit:"%",isBase:!0},{key:"blockChance",label:"Block Chance",unit:"%",isBase:!0}].forEach(({key:h,label:C,unit:k})=>{const b=(m[h]||0)+(v[h]||0),te=(r[h]||0)+(p[h]||0);b>0&&te===0&&f.push(`<div class="stat-missing">${C}: ${b}${k} → 0${k} (-${b}${k})</div>`)}),f.length>0&&(i+='<div class="tooltip-separator"></div>',i+=f.join("")),i+=`<div class="tooltip-comparison">Compared to: <span style="color: ${l.color};">${I(n)}</span></div>`}else n?i+='<div class="tooltip-comparison">Hold Shift for detailed comparison</div>':i+=`<div class="tooltip-comparison">No ${e.type} equipped</div>`;const g=Math.floor((e.price||10)*.5);i+=`<div class="tooltip-sell-info">Right-click to sell for ${g} gold</div>`,o.innerHTML=i,o.style.display="block",Q(s)}function D(){const s=document.getElementById("inventory-tooltip");s&&(s.style.display="none")}function Q(s){const e=document.getElementById("inventory-tooltip");if(!e)return;const t=e.getBoundingClientRect(),o=window.innerWidth,n=window.innerHeight;let c=s.clientX+10,l=s.clientY+10;c+t.width>o&&(c=s.clientX-t.width-10),l+t.height>n&&(l=s.clientY-t.height-10),c=Math.max(5,c),l=Math.max(5,l),e.style.left=c+"px",e.style.top=l+"px"}function Te(s,e){const t=document.getElementById("stats-tooltip"),o=document.getElementById("stats-tooltip-name"),n=document.getElementById("stats-tooltip-content");if(t&&o&&n){let c=function(i){const r=[];for(const p in a.player.equipment){const d=a.player.equipment[p];d&&d[i]&&d[i]>0&&r.push({slot:p,name:d.fullName||d.name,value:d[i]})}return r},l="";if(e==="attack"){const i=a.getBaseAttackWithTalents();a.player.equipmentAttack;const r=i-10,p=c("attack");o.textContent="Total Attack Breakdown",l=`
        <div class="stat-breakdown-item">
          <span>Base Attack:</span>
          <span class="stat-breakdown-value">10</span>
        </div>
        ${r>0?`
        <div class="stat-breakdown-item">
          <span>Talent Bonuses:</span>
          <span class="stat-breakdown-value">+${r}</span>
        </div>
        `:""}
        ${p.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${p.map(d=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${d.name}:</span>
            <span class="stat-breakdown-value">+${d.value}</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Attack:</span>
          <span class="stat-breakdown-value">${a.player.attack}</span>
        </div>
      `}else if(e==="defense"){const i=a.getBaseDefenseWithTalents();a.player.equipmentDefense;const r=c("defense");o.textContent="Total Defense Breakdown",l=`
        <div class="stat-breakdown-item">
          <span>Base Defense:</span>
          <span class="stat-breakdown-value">${i}</span>
        </div>
        ${r.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${r.map(p=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${p.name}:</span>
            <span class="stat-breakdown-value">+${p.value}</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Defense:</span>
          <span class="stat-breakdown-value">${a.player.defense}</span>
        </div>
      `}else if(e==="hp"){const r=c("maxHp");r.reduce((p,d)=>p+d.value,0),o.textContent="Max HP Breakdown",l=`
        <div class="stat-breakdown-item">
          <span>Base HP:</span>
          <span class="stat-breakdown-value">100</span>
        </div>
        ${r.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${r.map(p=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${p.name}:</span>
            <span class="stat-breakdown-value">+${p.value}</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Max HP:</span>
          <span class="stat-breakdown-value">${a.player.maxHp}</span>
        </div>
      `}else if(e==="attack-speed"){const r=a.player.equipment.weapon?.baseAttackInterval||2e3,p=a.player.attackSpeed||0,d=a.getBaseAttackSpeedWithTalents(),u=c("attackSpeed"),y=a.getPlayerAttackInterval();o.textContent="Attack Speed Breakdown",l=`
        <div class="stat-breakdown-item">
          <span>Base Attack Speed:</span>
          <span class="stat-breakdown-value">${(r/1e3).toFixed(1)}s</span>
        </div>
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Talent Speed Bonus:</span>
          <span class="stat-breakdown-value">+${d}%</span>
        </div>
        `:""}
        ${u.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${u.map(g=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${g.name}:</span>
            <span class="stat-breakdown-value">+${g.value}%</span>
          </div>
        `).join("")}
        `:""}
        ${p>0?`
        <div class="stat-breakdown-item">
          <span>Total Speed Bonus:</span>
          <span class="stat-breakdown-value">+${p}%</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Actual Attack Speed:</span>
          <span class="stat-breakdown-value">${(y/1e3).toFixed(1)}s</span>
        </div>
      `}else if(e==="crit-chance"){const i=a.getBaseCritChanceWithTalents(),r=c("critChance");r.reduce((p,d)=>p+d.value,0),o.textContent="Critical Chance Breakdown",l=`
        <div class="stat-breakdown-item">
          <span>Base Critical Chance:</span>
          <span class="stat-breakdown-value">0%</span>
        </div>
        ${i>0?`
        <div class="stat-breakdown-item">
          <span>Talent Bonuses:</span>
          <span class="stat-breakdown-value">+${i}%</span>
        </div>
        `:""}
        ${r.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${r.map(p=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${p.name}:</span>
            <span class="stat-breakdown-value">+${p.value}%</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Critical Chance:</span>
          <span class="stat-breakdown-value">${a.player.critChance||0}%</span>
        </div>
      `}else if(e==="crit-damage"){const i=c("critDamage");o.textContent="Critical Damage Breakdown",l=`
        <div class="stat-breakdown-item">
          <span>Base Critical Damage:</span>
          <span class="stat-breakdown-value">0%</span>
        </div>
        ${i.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${i.map(r=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${r.name}:</span>
            <span class="stat-breakdown-value">+${r.value}%</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Critical Damage:</span>
          <span class="stat-breakdown-value">${a.player.critDamage||0}%</span>
        </div>
      `}else if(e==="life-steal"){const i=c("lifeSteal");o.textContent="Life Steal Breakdown",l=`
        <div class="stat-breakdown-item">
          <span>Base Life Steal:</span>
          <span class="stat-breakdown-value">0%</span>
        </div>
        ${i.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${i.map(r=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${r.name}:</span>
            <span class="stat-breakdown-value">+${r.value}%</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Life Steal:</span>
          <span class="stat-breakdown-value">${a.player.lifeSteal||0}%</span>
        </div>
      `}else if(e==="dodge"){const i=c("dodge");o.textContent="Dodge Breakdown",l=`
        <div class="stat-breakdown-item">
          <span>Base Dodge:</span>
          <span class="stat-breakdown-value">0%</span>
        </div>
        ${i.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${i.map(r=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${r.name}:</span>
            <span class="stat-breakdown-value">+${r.value}%</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Dodge:</span>
          <span class="stat-breakdown-value">${a.player.dodge||0}%</span>
        </div>
      `}else if(e==="block-chance"){const i=c("blockChance");o.textContent="Block Chance Breakdown",l=`
        <div class="stat-breakdown-item">
          <span>Base Block Chance:</span>
          <span class="stat-breakdown-value">0%</span>
        </div>
        ${i.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${i.map(r=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${r.name}:</span>
            <span class="stat-breakdown-value">+${r.value}%</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Block Chance:</span>
          <span class="stat-breakdown-value">${a.player.blockChance||0}%</span>
        </div>
      `}else if(e==="xp-multiplier"){const r=a.getTalentLevel("knowledge","knowledge_1"),p=a.getTalentLevel("knowledge","knowledge_2"),d=a.getTalentLevel("knowledge","knowledge_4"),u=a.getExperienceMultiplier();o.textContent="Experience Multiplier Breakdown",l=`
        <div class="stat-breakdown-item">
          <span>Base Multiplier:</span>
          <span class="stat-breakdown-value">${1 .toFixed(2)}x</span>
        </div>
        ${r>0?`
        <div class="stat-breakdown-item">
          <span>Quick Learner (Lv${r}):</span>
          <span class="stat-breakdown-value">+${(r*.2).toFixed(2)}x</span>
        </div>
        `:""}
        ${p>0?`
        <div class="stat-breakdown-item">
          <span>Battle Wisdom (Lv${p}):</span>
          <span class="stat-breakdown-value">+${(p*.5).toFixed(2)}x</span>
        </div>
        `:""}
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Enlightened One:</span>
          <span class="stat-breakdown-value">×3.00x</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Experience Multiplier:</span>
          <span class="stat-breakdown-value">${u.toFixed(2)}x</span>
        </div>
      `}else if(e==="gold-multiplier"){const r=a.getTalentLevel("wealth","wealth_1"),p=a.getTalentLevel("wealth","wealth_4"),d=a.getGoldMultiplier();o.textContent="Gold Multiplier Breakdown",l=`
        <div class="stat-breakdown-item">
          <span>Base Multiplier:</span>
          <span class="stat-breakdown-value">${1 .toFixed(2)}x</span>
        </div>
        ${r>0?`
        <div class="stat-breakdown-item">
          <span>Coin Collector (Lv${r}):</span>
          <span class="stat-breakdown-value">+${(r*.25).toFixed(2)}x</span>
        </div>
        `:""}
        ${p>0?`
        <div class="stat-breakdown-item">
          <span>Golden Touch:</span>
          <span class="stat-breakdown-value">×2.00x</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Gold Multiplier:</span>
          <span class="stat-breakdown-value">${d.toFixed(2)}x</span>
        </div>
      `}n.innerHTML=l,t.style.display="block",t.classList.add("visible"),ee(s)}}function Be(){const s=document.getElementById("stats-tooltip");s&&(s.classList.remove("visible"),setTimeout(()=>{s.classList.contains("visible")||(s.style.display="none")},200))}function ee(s){const e=document.getElementById("stats-tooltip");if(e&&e.style.display==="block"){const t=s.clientX+10,o=s.clientY+10,n=e.getBoundingClientRect(),c=window.innerWidth,l=window.innerHeight;let i=t,r=o;t+n.width>c&&(i=s.clientX-n.width-10),o+n.height>l&&(r=s.clientY-n.height-10),e.style.left=`${i}px`,e.style.top=`${r}px`}}function $e(){["sword","axe","mace","dagger","staff","greatsword","battleaxe","warhammer","buckler","round-shield","tower-shield","tome","helmet","cap","crown","hood","armor","robe","vest","tunic","greaves","pants","leggings","shorts","sandals","boots","heavy-boots","speed-boots","leather-belt","utility-belt","chain-belt","war-belt","amulet","pendant","ring","bracelet"].forEach(e=>{const t=new Image;t.src=`/idle-rpg-game/assets/gear/${e}.svg`})}document.addEventListener("keydown",s=>{s.key==="Shift"&&(P=!0,M&&B&&F(B,M,P))});document.addEventListener("keyup",s=>{s.key==="Shift"&&(P=!1,M&&B&&F(B,M,P))});document.addEventListener("DOMContentLoaded",()=>{$e(),Ee()});
