(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))l(n);new MutationObserver(n=>{for(const c of n)if(c.type==="childList")for(const o of c.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&l(o)}).observe(document,{childList:!0,subtree:!0});function t(n){const c={};return n.integrity&&(c.integrity=n.integrity),n.referrerPolicy&&(c.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?c.credentials="include":n.crossOrigin==="anonymous"?c.credentials="omit":c.credentials="same-origin",c}function l(n){if(n.ep)return;n.ep=!0;const c=t(n);fetch(n.href,c)}})();const w={common:{name:"Common",color:"#9CA3AF",chance:50,affixCount:0,prefix:[],suffix:[]},uncommon:{name:"Uncommon",color:"#10B981",chance:30,affixCount:1,prefix:["Sturdy","Sharp","Keen","Fine"],suffix:["of Power","of Might","of the Warrior"]},rare:{name:"Rare",color:"#3B82F6",chance:15,affixCount:2,prefix:["Masterwork","Superior","Enhanced","Reinforced"],suffix:["of the Elite","of Excellence","of the Champion","of Mastery"]},epic:{name:"Epic",color:"#8B5CF6",chance:4,affixCount:3,prefix:["Legendary","Ancient","Mythical","Heroic","Blessed","Cursed"],suffix:["of the Gods","of Legends","of Heroes","of Destiny","of the Void","of Strength"]},legendary:{name:"Legendary",color:"#F59E0B",chance:1,affixCount:5,prefix:["Divine","Celestial","Eternal","Transcendent","Omnipotent","Radiant"],suffix:["of the Immortals","of Eternity","of the Divine","of Transcendence","of Infinity","of the Cosmos"]}},x={prefix:{Sturdy:{stats:{maxHp:15,blockChance:2},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Sharp:{stats:{attack:2,critChance:3},allowedTypes:["weapon"]},Keen:{stats:{critChance:5,critDamage:8},allowedTypes:["weapon","necklace","ring"]},Fine:{stats:{attack:1,maxHp:5,attackSpeed:2},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Masterwork:{stats:{attack:4,maxHp:10,critChance:3},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},Superior:{stats:{attack:3,critDamage:10},allowedTypes:["weapon","necklace","ring"]},Enhanced:{stats:{attackSpeed:8,dodge:5,critChance:3},allowedTypes:["weapon","boots","legs","necklace","ring"]},Reinforced:{stats:{maxHp:30,blockChance:8,dodge:2},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Legendary:{stats:{attack:6,critChance:8,critDamage:15},allowedTypes:["weapon"]},Ancient:{stats:{attack:5,maxHp:20,blockChance:5},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Mythical:{stats:{critDamage:20,dodge:8},allowedTypes:["weapon","necklace","ring"]},Heroic:{stats:{attack:7,attackSpeed:12,critChance:10},allowedTypes:["weapon"]},Blessed:{stats:{maxHp:25,dodge:6,blockChance:6},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]},Cursed:{stats:{attack:8,critChance:12,critDamage:18,attackSpeed:10},allowedTypes:["weapon","necklace","ring"]},Divine:{stats:{attack:10,critChance:15,critDamage:25},allowedTypes:["weapon","necklace","ring"]},Celestial:{stats:{maxHp:40,blockChance:15,dodge:12,attackSpeed:15},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Eternal:{stats:{attack:8,maxHp:30,critDamage:30},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Transcendent:{stats:{attack:12,critChance:20,dodge:15,attackSpeed:20},allowedTypes:["weapon","boots","legs","necklace","ring"]},Omnipotent:{stats:{attack:15,critChance:18,critDamage:35},allowedTypes:["weapon","necklace","ring"]},Radiant:{stats:{maxHp:50,dodge:18,attackSpeed:25,blockChance:20},allowedTypes:["helmet","body","legs","boots","belt","offhand"]}},suffix:{"of Power":{stats:{attack:3},allowedTypes:["weapon","necklace","ring"]},"of Might":{stats:{attack:2,critDamage:5},allowedTypes:["weapon"]},"of the Warrior":{stats:{attack:1,maxHp:10,blockChance:3},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},"of the Elite":{stats:{attack:4,critChance:5,attackSpeed:5},allowedTypes:["weapon","necklace","ring"]},"of Excellence":{stats:{critChance:8,critDamage:12},allowedTypes:["weapon","necklace","ring"]},"of the Champion":{stats:{attack:3,maxHp:15,dodge:5},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},"of Mastery":{stats:{attackSpeed:10,critChance:6,dodge:6},allowedTypes:["weapon","boots","legs","necklace","ring"]},"of the Gods":{stats:{attack:8,critChance:12,critDamage:20},allowedTypes:["weapon"]},"of Legends":{stats:{maxHp:30,blockChance:12},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Heroes":{stats:{attack:6,attackSpeed:15,dodge:10},allowedTypes:["weapon","boots","legs"]},"of Destiny":{stats:{critDamage:25,attackSpeed:12},allowedTypes:["weapon","necklace","ring"]},"of the Void":{stats:{attack:7,critChance:10,dodge:12},allowedTypes:["weapon","necklace","ring"]},"of Strength":{stats:{attack:9,critDamage:22,attackSpeed:8},allowedTypes:["weapon","belt","necklace","ring"]},"of the Immortals":{stats:{attack:10,maxHp:40,blockChance:15},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Eternity":{stats:{critChance:20,critDamage:35,attackSpeed:25},allowedTypes:["weapon","necklace","ring"]},"of the Divine":{stats:{attack:12,maxHp:50,dodge:20},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Transcendence":{stats:{attack:15,critChance:25,critDamage:40,attackSpeed:30},allowedTypes:["weapon","necklace","ring"]},"of Infinity":{stats:{attack:13,critChance:22,critDamage:38,dodge:16},allowedTypes:["weapon","necklace","ring"]},"of the Cosmos":{stats:{maxHp:60,attackSpeed:28,blockChance:18},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]}}},q={weapon:[{name:"Sword",attack:10,maxHp:0,attackSpeed:0,baseAttackInterval:2e3,critChance:5,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,handType:"1h"},{name:"Axe",attack:15,maxHp:0,attackSpeed:0,baseAttackInterval:2800,critChance:8,critDamage:15,lifeSteal:0,dodge:0,blockChance:0,handType:"1h"},{name:"Mace",attack:12,maxHp:0,attackSpeed:0,baseAttackInterval:2400,critChance:2,critDamage:0,lifeSteal:0,dodge:0,blockChance:5,handType:"1h"},{name:"Dagger",attack:6,maxHp:0,attackSpeed:0,baseAttackInterval:1600,critChance:12,critDamage:20,lifeSteal:0,dodge:8,blockChance:0,handType:"1h"},{name:"Staff",attack:8,maxHp:0,attackSpeed:0,baseAttackInterval:2200,critChance:10,critDamage:25,lifeSteal:0,dodge:0,blockChance:0,handType:"1h"},{name:"Greatsword",attack:20,maxHp:0,attackSpeed:0,baseAttackInterval:3200,critChance:3,critDamage:25,lifeSteal:0,dodge:0,blockChance:0,handType:"2h"},{name:"Battleaxe",attack:25,maxHp:0,attackSpeed:0,baseAttackInterval:3600,critChance:5,critDamage:30,lifeSteal:0,dodge:0,blockChance:0,handType:"2h"},{name:"Warhammer",attack:22,maxHp:0,attackSpeed:0,baseAttackInterval:3400,critChance:1,critDamage:0,lifeSteal:0,dodge:0,blockChance:8,handType:"2h"}],offhand:[{name:"Buckler",attack:0,maxHp:40,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:15},{name:"Round Shield",attack:0,maxHp:60,attackSpeed:-5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:20},{name:"Tower Shield",attack:0,maxHp:18,attackSpeed:-10,critChance:0,critDamage:0,lifeSteal:0,dodge:-5,blockChance:30},{name:"Tome",attack:3,maxHp:0,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0}],helmet:[{name:"Helmet",attack:0,maxHp:5,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:3},{name:"Cap",attack:0,maxHp:3,attackSpeed:2,critChance:0,critDamage:0,lifeSteal:0,dodge:2,blockChance:0},{name:"Crown",attack:0,maxHp:20,attackSpeed:0,critChance:3,critDamage:5,lifeSteal:0,dodge:0,blockChance:0},{name:"Hood",attack:0,maxHp:10,attackSpeed:3,critChance:2,critDamage:0,lifeSteal:0,dodge:5,blockChance:0}],body:[{name:"Armor",attack:0,maxHp:60,attackSpeed:-5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:8},{name:"Robe",attack:0,maxHp:40,attackSpeed:5,critChance:5,critDamage:10,lifeSteal:2,dodge:0,blockChance:0},{name:"Vest",attack:0,maxHp:50,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:3,blockChance:2},{name:"Tunic",attack:0,maxHp:30,attackSpeed:8,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:0}],legs:[{name:"Greaves",attack:0,maxHp:40,attackSpeed:-3,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:5},{name:"Pants",attack:0,maxHp:30,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:0,dodge:3,blockChance:0},{name:"Leggings",attack:0,maxHp:7,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:2,blockChance:2},{name:"Shorts",attack:0,maxHp:20,attackSpeed:10,critChance:2,critDamage:0,lifeSteal:0,dodge:8,blockChance:0}],boots:[{name:"Sandals",attack:0,maxHp:10,attackSpeed:8,critChance:0,critDamage:0,lifeSteal:0,dodge:8,blockChance:0},{name:"Boots",attack:0,maxHp:5,attackSpeed:3,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:0},{name:"Heavy Boots",attack:0,maxHp:40,attackSpeed:-3,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:5},{name:"Speed Boots",attack:0,maxHp:3,attackSpeed:15,critChance:2,critDamage:0,lifeSteal:0,dodge:12,blockChance:0}],belt:[{name:"Leather Belt",attack:0,maxHp:1,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0},{name:"Utility Belt",attack:0,maxHp:0,attackSpeed:5,critChance:3,critDamage:0,lifeSteal:0,dodge:3,blockChance:0},{name:"Chain Belt",attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:3},{name:"War Belt",attack:0,maxHp:0,attackSpeed:0,critChance:5,critDamage:8,lifeSteal:0,dodge:0,blockChance:0}],necklace:[{name:"Amulet",attack:0,maxHp:0,attackSpeed:0,critChance:8,critDamage:15,lifeSteal:0,dodge:0,blockChance:0},{name:"Pendant",attack:0,maxHp:0,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:5,dodge:0,blockChance:0}],ring:[{name:"Ring",attack:0,maxHp:0,attackSpeed:3,critChance:5,critDamage:8,lifeSteal:0,dodge:0,blockChance:0},{name:"Bracelet",attack:0,maxHp:0,attackSpeed:8,critChance:6,critDamage:0,lifeSteal:0,dodge:0,blockChance:0}]},se={town:{name:"🏘️ Town",description:"A peaceful place to rest and shop",enemies:[],isShop:!0},forest:{name:"🌲 Dark Forest",description:"A mysterious forest filled with creatures",enemies:[{name:"Slime",imageClass:"slime",hp:50,attack:4,xp:15,gold:5,attackInterval:3e3},{name:"Goblin",imageClass:"goblin",hp:80,attack:8,xp:25,gold:10,attackInterval:2e3},{name:"Wolf",imageClass:"wolf",hp:70,attack:12,xp:20,gold:8,attackInterval:2200}],dropChance:25,allowedRarities:["common"]},cave:{name:"🕳️ Mysterious Cave",description:"Deep caves with stronger monsters",enemies:[{name:"Orc",imageClass:"orc",hp:120,attack:18,xp:35,gold:15,attackInterval:2800},{name:"Skeleton",imageClass:"skeleton",hp:100,attack:20,xp:30,gold:12,attackInterval:2300},{name:"Spider",imageClass:"spider",hp:90,attack:16,xp:28,gold:10,attackInterval:1800}],dropChance:30,allowedRarities:["common","uncommon"]},mountain:{name:"⛰️ Snowy Mountains",description:"Treacherous peaks with powerful foes",enemies:[{name:"Yeti",imageClass:"yeti",hp:200,attack:25,xp:50,gold:25,attackInterval:3500},{name:"Dragon",imageClass:"dragon",hp:300,attack:35,xp:80,gold:50,attackInterval:2200},{name:"Giant",imageClass:"giant",hp:250,attack:30,xp:65,gold:35,attackInterval:4e3}],dropChance:35,allowedRarities:["common","uncommon","rare"]},goblinCave:{name:"🏴‍☠️ Goblin Cave",description:"A dark cave infested with goblins. Defeat 15 goblins to face the Goblin King!",enemies:[{name:"Goblin Runt",imageClass:"goblin",hp:60,attack:10,xp:18,gold:7,attackInterval:2400},{name:"Goblin Shaman",imageClass:"goblin",hp:85,attack:16,xp:28,gold:12,attackInterval:2800},{name:"Goblin Slinger",imageClass:"goblin",hp:75,attack:14,xp:22,gold:9,attackInterval:2100},{name:"Goblin Brute",imageClass:"goblin",hp:110,attack:20,xp:35,gold:15,attackInterval:3200}],dropChance:40,allowedRarities:["common","uncommon","rare","epic"],boss:{name:"Goblin King",imageClass:"goblin",hp:400,attack:40,xp:150,gold:100,requiredKills:15,isLegendaryDropper:!0,attackInterval:2500},killCount:0}},oe=[{name:"Iron Sword",type:"weapon",attack:15,maxHp:0,price:100},{name:"Steel Helmet",type:"helmet",attack:0,maxHp:8,price:80},{name:"Leather Armor",type:"body",attack:0,maxHp:12,price:120},{name:"Chain Legs",type:"legs",attack:0,maxHp:10,price:100},{name:"Studded Belt",type:"belt",attack:3,maxHp:6,price:70},{name:"Leather Boots",type:"boots",attack:0,maxHp:4,price:60},{name:"Iron Shield",type:"offhand",attack:0,maxHp:10,price:90},{name:"Magic Ring",type:"ring",attack:5,maxHp:5,price:150},{name:"Steel Sword",type:"weapon",attack:25,maxHp:0,price:250},{name:"Iron Plate",type:"body",attack:0,maxHp:20,price:300},{name:"Dragon Sword",type:"weapon",attack:40,maxHp:0,price:500}],N=["Jump off a bridge","Lay facedown in a puddle","Starve yourself","Walk into a dragon's lair unarmed","Challenge a mountain troll to arm wrestling","Try to pet a wild bear","Swim with sharks while bleeding","Eat mysterious mushrooms","Sleep in a haunted cemetery","Juggle flaming torches blindfolded","Use a cursed sword as a toothpick","Tickle a sleeping giant","Dance on thin ice","Hug a cactus enthusiastically","Take a nap in quicksand","Play catch with a grenade","Use a lightning rod during a storm","Tell a vampire they have bad breath","Ask a kraken for directions","Wear meat clothing to a wolf den","Try to ride a wild griffin","Drink from the fountain of eternal poison","Challenge death to a game of chess","Use your head to test helmet durability","Go cave diving without oxygen","Practice sword swallowing with a real sword","Take a selfie with a basilisk","Use a nuclear reactor as a nightlight","Go bungee jumping with a rope that's too long","Try to milk a wild minotaur"];function W(){return N[Math.floor(Math.random()*N.length)]}function U(s){const e="/idle-rpg-game/",t=s.startsWith("/")?s.slice(1):s;return e+t}const _={exploration:{name:"Path of Exploration",icon:"🗺️",description:"Unlock new zones and content",nodes:[{id:"exploration_1",name:"Zone Scout",icon:"🧭",description:"Unlocks additional zones earlier",effect:"Reduce zone unlock level requirements by 2",cost:50,maxLevel:1,prerequisites:[]},{id:"exploration_2",name:"Monster Hunter",icon:"🏹",description:"Encounter rare enemies more often",effect:"Increase rare enemy spawn chance by 25%",cost:75,maxLevel:1,prerequisites:["exploration_1"]},{id:"exploration_3",name:"Boss Slayer",icon:"🗡️",description:"Reduce boss requirements",effect:"Reduce boss spawn requirements by 5 kills",cost:100,maxLevel:1,prerequisites:["exploration_2"]},{id:"exploration_4",name:"Zone Master",icon:"👑",description:"Access to exclusive high-tier zones",effect:"Unlocks special endgame zones",cost:200,maxLevel:1,prerequisites:["exploration_3"]}]},power:{name:"Path of Power",icon:"⚔️",description:"Increase combat effectiveness",nodes:[{id:"power_1",name:"Warrior Training",icon:"💪",description:"Increase base attack power",effect:"+5 base attack per level",cost:40,maxLevel:5,prerequisites:[]},{id:"power_2",name:"Combat Mastery",icon:"🎯",description:"Improve critical hit chance",effect:"+2% critical chance per level",cost:60,maxLevel:3,prerequisites:["power_1"]},{id:"power_3",name:"Berserker Rage",icon:"⚡",description:"Increase attack speed",effect:"+10% attack speed per level",cost:80,maxLevel:3,prerequisites:["power_2"]},{id:"power_4",name:"Legendary Warrior",icon:"🏆",description:"Massive combat bonuses",effect:"+50% damage, +25% crit chance",cost:250,maxLevel:1,prerequisites:["power_3"]}]},wealth:{name:"Path of Wealth",icon:"💰",description:"Increase gold gain and rewards",nodes:[{id:"wealth_1",name:"Coin Collector",icon:"🪙",description:"Increase gold drops from enemies",effect:"+25% gold gain per level",cost:45,maxLevel:4,prerequisites:[]},{id:"wealth_2",name:"Lucky Find",icon:"🍀",description:"Increase item drop chance",effect:"+10% item drop chance per level",cost:70,maxLevel:3,prerequisites:["wealth_1"]},{id:"wealth_3",name:"Treasure Hunter",icon:"💎",description:"Higher chance for rare items",effect:"+15% chance for higher rarity per level",cost:90,maxLevel:2,prerequisites:["wealth_2"]},{id:"wealth_4",name:"Golden Touch",icon:"✨",description:"Massive wealth bonuses",effect:"Double gold gain, +50% item drops",cost:300,maxLevel:1,prerequisites:["wealth_3"]}]},knowledge:{name:"Path of Knowledge",icon:"📚",description:"Increase experience gain",nodes:[{id:"knowledge_1",name:"Quick Learner",icon:"📖",description:"Gain experience faster",effect:"+20% experience gain per level",cost:35,maxLevel:5,prerequisites:[]},{id:"knowledge_2",name:"Battle Wisdom",icon:"⚔️",description:"Bonus XP from combat victories",effect:"+50% bonus XP from defeating enemies per level",cost:55,maxLevel:3,prerequisites:["knowledge_1"]},{id:"knowledge_3",name:"Master Scholar",icon:"🎓",description:"Reduce XP requirements for leveling",effect:"-10% XP needed per level (max 30%)",cost:85,maxLevel:3,prerequisites:["knowledge_2"]},{id:"knowledge_4",name:"Enlightened One",icon:"🔮",description:"Transcendent learning abilities",effect:"Triple XP gain, start at level 5",cost:400,maxLevel:1,prerequisites:["knowledge_3"]}]}};let P=!1,$=null,I=null;function le(){$=null,I=null,["weapon","helmet","body","legs","accessory1","accessory2"].forEach(t=>{const l=document.getElementById(`${t}-tooltip`);l&&(l.innerHTML="",l.style.display="none")}),document.querySelectorAll(".tooltip, .zone-tooltip, .stat-tooltip").forEach(t=>{t.style.display="none",t.innerHTML=""})}function ie(s){const e={};s.forEach(y=>{w[y]&&(e[y]=w[y])}),Object.keys(e).length===0&&(e.common=w.common);const t=Math.random()*100;let l="common",n=0;for(const[y,m]of Object.entries(e))if(n+=m.chance,t<=n){l=y;break}const c=Object.keys(q),o=c[Math.floor(Math.random()*c.length)],i=q[o],r=i[Math.floor(Math.random()*i.length)],d=w[l],p={name:r.name,type:o,rarity:l,attack:r.attack,maxHp:r.maxHp,attackSpeed:r.attackSpeed,critChance:r.critChance,critDamage:r.critDamage,dodge:r.dodge,blockChance:r.blockChance,price:Math.floor((r.attack+r.maxHp)*10),handType:r.handType||"1h",baseAttackInterval:r.baseAttackInterval,prefixes:[],suffixes:[]},g=d.affixCount;if(g>0){const y=Math.min(3,Math.ceil(g/2)),m=Math.min(3,g-y),v=d.prefix.filter(b=>{const h=x.prefix[b];return h&&h.allowedTypes.includes(o)});for(let b=0;b<y&&v.length>0;b++){const h=Math.floor(Math.random()*v.length),S=v.splice(h,1)[0];p.prefixes.push(S);const k=x.prefix[S].stats;k&&Object.keys(k).forEach(E=>{p[E]+=k[E]})}const u=d.suffix.filter(b=>{const h=x.suffix[b];return h&&h.allowedTypes.includes(o)});for(let b=0;b<m&&u.length>0;b++){const h=Math.floor(Math.random()*u.length),S=u.splice(h,1)[0];p.suffixes.push(S);const k=x.suffix[S].stats;k&&Object.keys(k).forEach(E=>{p[E]+=k[E]})}}let f=p.name;if(p.prefixes.length>0&&(f=`${p.prefixes[Math.floor(Math.random()*p.prefixes.length)]} ${f}`),p.suffixes.length>0){const y=p.suffixes[Math.floor(Math.random()*p.suffixes.length)];f=`${f} ${y}`}return p.fullName=f,p}function ce(){const s="legendary",e=Object.keys(q),t=e[Math.floor(Math.random()*e.length)],l=q[t],n=l[Math.floor(Math.random()*l.length)],c=w[s],o={name:n.name,type:t,rarity:s,attack:n.attack,maxHp:n.maxHp,attackSpeed:n.attackSpeed,critChance:n.critChance,critDamage:n.critDamage,lifeSteal:n.lifeSteal,dodge:n.dodge,blockChance:n.blockChance,timestamp:Date.now(),prefixes:[],suffixes:[]};t==="weapon"&&n.handType&&(o.handType=n.handType),t==="weapon"&&n.baseAttackInterval&&(o.baseAttackInterval=n.baseAttackInterval);const i=c.affixCount;if(i>0){const d=Math.min(2,Math.ceil(i/2)),p=Math.min(2,i-d),g=c.prefix.filter(y=>{const m=x.prefix[y];return m&&m.allowedTypes.includes(t)});for(let y=0;y<d&&g.length>0;y++){const m=Math.floor(Math.random()*g.length),v=g.splice(m,1)[0];o.prefixes.push(v);const u=x.prefix[v].stats;u&&Object.keys(u).forEach(b=>{o[b]+=u[b]})}const f=c.suffix.filter(y=>{const m=x.suffix[y];return m&&m.allowedTypes.includes(t)});for(let y=0;y<p&&f.length>0;y++){const m=Math.floor(Math.random()*f.length),v=f.splice(m,1)[0];o.suffixes.push(v);const u=x.suffix[v].stats;u&&Object.keys(u).forEach(b=>{o[b]+=u[b]})}}let r=n.name;if(o.prefixes.length>0&&(r=`${o.prefixes[Math.floor(Math.random()*o.prefixes.length)]} ${r}`),o.suffixes.length>0){const d=o.suffixes[Math.floor(Math.random()*o.suffixes.length)];r=`${r} ${d}`}return o.fullName=r,o}function re(s,e=2e3){const t=1+s/100;return Math.max(500,e/t)}function M(s){if(w[s.rarity]||w.common,s.rarity==="common")return s.name;let e=s.name;return s.prefixes&&s.prefixes.length>0&&(e=s.prefixes.join(" ")+" "+e),s.suffixes&&s.suffixes.length>0&&(e=e+" "+s.suffixes.join(" ")),e}function T(s){const t=q[s.type]?.find(n=>n.name===s.name);if(!t){if(s.name==="Rusty Sword"||!s.prefixes&&!s.suffixes||console.warn("Base template not found for item:",s),s.prefixes||s.suffixes){const c={attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0};return s.prefixes&&s.prefixes.forEach(o=>{const i=x.prefix[o]?.stats;i&&Object.keys(i).forEach(r=>{c.hasOwnProperty(r)&&(c[r]+=i[r])})}),s.suffixes&&s.suffixes.forEach(o=>{const i=x.suffix[o]?.stats;i&&Object.keys(i).forEach(r=>{c.hasOwnProperty(r)&&(c[r]+=i[r])})}),{baseStats:{attack:(s.attack||0)-c.attack,maxHp:(s.maxHp||0)-c.maxHp,attackSpeed:(s.attackSpeed||0)-c.attackSpeed,critChance:(s.critChance||0)-c.critChance,critDamage:(s.critDamage||0)-c.critDamage,dodge:(s.dodge||0)-c.dodge,blockChance:(s.blockChance||0)-c.blockChance},affixStats:c}}return{baseStats:{attack:s.attack||0,maxHp:s.maxHp||0,attackSpeed:s.attackSpeed||0,critChance:s.critChance||0,critDamage:s.critDamage||0,dodge:s.dodge||0,blockChance:s.blockChance||0},affixStats:{attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0}}}const l={attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0};return s.prefixes&&s.prefixes.forEach(n=>{const c=x.prefix[n]?.stats;c&&Object.keys(c).forEach(o=>{l.hasOwnProperty(o)&&(l[o]+=c[o])})}),s.suffixes&&s.suffixes.forEach(n=>{const c=x.suffix[n]?.stats;c&&Object.keys(c).forEach(o=>{l.hasOwnProperty(o)&&(l[o]+=c[o])})}),{baseStats:{attack:t.attack||0,maxHp:t.maxHp||0,attackSpeed:t.attackSpeed||0,critChance:t.critChance||0,critDamage:t.critDamage||0,dodge:t.dodge||0,blockChance:t.blockChance||0},affixStats:l}}class de{constructor(){this.player={level:1,hp:100,maxHp:100,attack:10,equipmentAttack:0,equipmentMaxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0,gold:0,xp:0,nextLevelXp:100,equipment:{weapon:{name:"Rusty Sword",type:"weapon",rarity:"common",attack:5,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0,price:0,baseAttackInterval:2500},offhand:null,helmet:null,body:null,legs:null,belt:null,boots:null,necklace:null,ring:null},inventory:[]},this.currentZone="forest",this.currentEnemy=null,this.unlockedZones=["forest","town"],this.needsInventoryUpdate=!0,this.needsCharacterUpdate=!0,this.respawnTimer={isActive:!1,currentTime:0,maxTime:3e3},this.needsShopUpdate=!0,this.combat={isActive:!1,playerTurn:!0,lastAttackTime:0},this.attackBars={player:{currentTime:0,maxTime:2e3},enemy:{currentTime:0,maxTime:3e3}},this.activityLog=[],this.logFilter="all",this.inventorySettings={sortBy:"name",filterBy:"all",autoSell:{enabled:!1,rarities:{common:!1,uncommon:!1,rare:!1},types:{weapon:!1,offhand:!1,helmet:!1,body:!1,legs:!1,belt:!1,boots:!1,necklace:!1,ring:!1}}},this.needsInventoryUpdate=!0,this.zones=se,this.shopItems=oe,this.talents={exploration:{},power:{},wealth:{},knowledge:{}},this.ascensionCount=0,this.isShowingTalentTree=!1,this.currentDeathMessage=W()}calculateStats(){let e=this.getBaseAttackWithTalents(),t=this.getBaseMaxHpWithTalents(),l=0,n=0,c=0,o=0,i=0,r=0,d=0;const p=this.getTalentLevel("power","power_1"),g=this.getTalentLevel("power","power_2"),f=this.getTalentLevel("power","power_3"),y=this.getTalentLevel("power","power_4");e+=p*5;let m=g*2,v=f*10;y>0&&(e*=1.5,m+=25);for(const b in this.player.equipment){const h=this.player.equipment[b];h&&(l+=h.attack||0,n+=h.maxHp||0,c+=h.attackSpeed||0,o+=h.critChance||0,i+=h.critDamage||0,r+=h.dodge||0,d+=h.blockChance||0)}const u=(this.player.level-1)*10;this.player.attack=e+l,this.player.maxHp=t+u+n,this.player.equipmentAttack=l,this.player.equipmentMaxHp=n,this.player.attackSpeed=c+v,this.player.critChance=o+m,this.player.critDamage=i,this.player.dodge=r,this.player.blockChance=d,this.player.hp>this.player.maxHp&&(this.player.hp=this.player.maxHp)}addToInventory(e){if(e.addedTimestamp=Date.now(),this.shouldAutoSell(e)){this.sellItem(e);return}this.player.inventory.push(e),this.needsInventoryUpdate=!0}shouldAutoSell(e){if(!this.inventorySettings.autoSell.enabled)return!1;const t=e.rarity||"common",l=this.inventorySettings.autoSell.rarities[t],n=this.inventorySettings.autoSell.types[e.type];return l||n}sellItem(e,t=!0){const l=Math.floor((e.price||10)*.5);return this.player.gold+=l,t&&this.addLogMessage(`💰 Sold ${e.fullName||e.name} for ${l} gold`,"shop"),l}sellAllJunk(){let e=0,t=0;const l=[];return this.player.inventory.forEach((n,c)=>{this.shouldAutoSell(n)&&l.push({item:n,index:c})}),l.reverse().forEach(({item:n,index:c})=>{e+=this.sellItem(n,!1),this.player.inventory.splice(c,1),this.needsInventoryUpdate=!0,t++}),t>0?this.addLogMessage(`💰 Sold ${t} items for ${e} total gold`,"shop"):this.addLogMessage("No items to sell based on current auto-sell settings","system"),{itemsSold:t,totalGold:e}}getSortedAndFilteredInventory(){let e=[...this.player.inventory];return this.inventorySettings.filterBy!=="all"&&(e=e.filter(t=>t.type===this.inventorySettings.filterBy)),e.sort((t,l)=>{switch(this.inventorySettings.sortBy){case"rarity":const n=["common","uncommon","rare","epic","legendary"],c=n.indexOf(t.rarity||"common");return n.indexOf(l.rarity||"common")-c;case"type":return t.type.localeCompare(l.type);case"attack":return(l.attack||0)-(t.attack||0);case"new":return(l.addedTimestamp||0)-(t.addedTimestamp||0);case"name":default:return(t.fullName||t.name).localeCompare(l.fullName||l.name)}}),e}equipItem(e,t=!1,l=-1){console.log("equipItem called with:",{item:e,fromInventory:t,inventoryIndex:l});const n=e.type;if(n==="weapon"&&e.handType==="2h"){if(this.player.equipment.offhand){const i={...this.player.equipment.offhand,type:"offhand"};i.addedTimestamp=Date.now(),this.player.inventory.push(i),this.player.equipment.offhand=null,this.addLogMessage(`Unequipped ${i.fullName||i.name} to wield 2-handed weapon`,"system")}}else if(n==="offhand"){const i=this.player.equipment.weapon;if(i&&i.handType==="2h"){this.addLogMessage("Cannot equip offhand item while wielding a 2-handed weapon!","system");return}}let c=null;this.player.equipment[n]&&(c={...this.player.equipment[n],type:n});const o={name:e.name,fullName:e.fullName||e.name,rarity:e.rarity,attack:e.attack||0,maxHp:e.maxHp||0,attackSpeed:e.attackSpeed||0,critChance:e.critChance||0,critDamage:e.critDamage||0,dodge:e.dodge||0,blockChance:e.blockChance||0,handType:e.handType||"1h",prefixes:e.prefixes||[],suffixes:e.suffixes||[]};console.log("Equipping to slot:",n,"new item:",o),this.player.equipment[n]=o,this.needsCharacterUpdate=!0,t&&l>=0&&(console.log("Removing from inventory at index:",l,"inventory before:",[...this.player.inventory]),this.player.inventory.splice(l,1),this.needsInventoryUpdate=!0,console.log("Inventory after removal:",[...this.player.inventory]),c&&(console.log("Adding previously equipped item to inventory:",c),c.addedTimestamp=Date.now(),this.player.inventory.push(c))),this.calculateStats(),console.log("Stats after equipping:",{attack:this.player.attack,maxHp:this.player.maxHp})}spawnEnemy(){const e=this.zones[this.currentZone];if(!e.enemies||e.enemies.length===0)return null;if(this.currentZone==="goblinCave"&&e.boss&&e.killCount>=e.boss.requiredKills){Se(e.boss.name);const n={...e.boss,hp:e.boss.hp,maxHp:e.boss.hp,attackInterval:e.boss.attackInterval||2e3,isBoss:!0,isLegendaryDropper:e.boss.isLegendaryDropper||!1};return e.killCount=0,this.addCombatMessage("🏴‍☠️ The Goblin King emerges from the depths!","system"),n}const t=e.enemies[Math.floor(Math.random()*e.enemies.length)];return{...t,hp:t.hp,maxHp:t.hp,attackInterval:t.attackInterval||2e3}}gainXp(e){const t=this.getTalentLevel("knowledge","knowledge_1"),l=this.getTalentLevel("knowledge","knowledge_2"),n=this.getTalentLevel("knowledge","knowledge_4");let c=1+t*.2;c+=l*.5,n>0&&(c*=3);const o=Math.floor(e*c);for(this.player.xp+=o;this.player.xp>=this.player.nextLevelXp;)this.levelUp()}levelUp(){this.player.xp-=this.player.nextLevelXp,this.player.level++;const e=this.getTalentLevel("knowledge","knowledge_3"),t=Math.min(.3,e*.1);this.player.nextLevelXp=Math.floor(this.player.nextLevelXp*1.2*(1-t)),this.player.maxHp+=10,this.player.hp=this.player.maxHp,document.getElementById("character-level").classList.add("level-up"),setTimeout(()=>{document.getElementById("character-level").classList.remove("level-up")},500),this.addLogMessage(`🎉 Level up! You are now level ${this.player.level}!`,"loot","level-up"),V()}addLogMessage(e,t="system",l=""){const n={message:e,category:t,type:l,timestamp:new Date().toLocaleTimeString()};this.activityLog.push(n),this.activityLog.length>100&&this.activityLog.shift(),this.updateActivityLog()}addCombatMessage(e,t=""){this.addLogMessage(e,"combat",t)}updateActivityLog(){const e=document.getElementById("activity-messages");if(!e)return;e.innerHTML="",(this.logFilter==="all"?this.activityLog:this.activityLog.filter(l=>l.category===this.logFilter)).forEach(l=>{const n=document.createElement("div");n.className=`activity-message ${l.category} ${l.type}`,n.innerHTML=`<span class="timestamp">[${l.timestamp}]</span> ${l.message}`,e.appendChild(n)}),e.scrollTop=e.scrollHeight}setLogFilter(e){this.logFilter=e,this.updateActivityLog(),document.querySelectorAll(".filter-btn").forEach(t=>{t.classList.remove("active")}),document.querySelector(`[data-filter="${e}"]`).classList.add("active")}clearActivityLog(){this.activityLog=[],this.updateActivityLog()}save(){const e={player:this.player,currentZone:this.currentZone,unlockedZones:this.unlockedZones};localStorage.setItem("idleRPG_save",JSON.stringify(e)),alert("Game saved successfully!")}load(){const e=localStorage.getItem("idleRPG_save");if(e){const t=JSON.parse(e);return this.player={...this.player,...t.player},this.currentZone=t.currentZone||"forest",this.unlockedZones=t.unlockedZones||["forest"],Object.keys(this.player.equipment).forEach(l=>{const n=this.player.equipment[l];n&&!n.type&&(n.type=l)}),this.calculateStats(),this.needsCharacterUpdate=!0,alert("Game loaded successfully!"),!0}return!1}reset(){confirm("Are you sure you want to reset your game? This cannot be undone!")&&(localStorage.removeItem("idleRPG_save"),location.reload())}getPlayerAttackInterval(){const t=this.player.equipment.weapon?.baseAttackInterval||2e3;return re(this.player.attackSpeed||0,t)}getEnemyAttackInterval(e){return e?.attackInterval||2e3}updateAttackBars(e){if(!(!this.combat.isActive||!this.currentEnemy)){if(this.attackBars.player.maxTime=this.getPlayerAttackInterval(),this.attackBars.player.currentTime+=e,this.attackBars.enemy.maxTime=this.getEnemyAttackInterval(this.currentEnemy),this.attackBars.enemy.currentTime+=e,this.attackBars.player.currentTime>=this.attackBars.player.maxTime){this.performPlayerAttack(),this.attackBars.player.currentTime=0;const t=document.getElementById("player-attack-fill");t&&(t.style.width="0%")}if(this.attackBars.enemy.currentTime>=this.attackBars.enemy.maxTime){this.performEnemyAttack(),this.attackBars.enemy.currentTime=0;const t=document.getElementById("enemy-attack-fill");t&&(t.style.width="0%")}this.updateAttackBarUI()}}updateRespawnTimer(e){this.respawnTimer.isActive&&(this.respawnTimer.currentTime+=e,this.respawnTimer.currentTime>=this.respawnTimer.maxTime&&(this.respawnTimer.isActive=!1,this.respawnTimer.currentTime=0,X()))}updateAttackBarUI(){const e=this.attackBars.player.currentTime/this.attackBars.player.maxTime*100,t=this.attackBars.enemy.currentTime/this.attackBars.enemy.maxTime*100,l=document.getElementById("player-attack-fill"),n=document.getElementById("enemy-attack-fill");l&&(l.style.width=`${Math.min(100,e)}%`),n&&(n.style.width=`${Math.min(100,t)}%`);const c=document.getElementById("player-attack-label"),o=document.getElementById("enemy-attack-label");if(c){const i=Math.floor(this.attackBars.player.currentTime),r=Math.floor(this.attackBars.player.maxTime);c.textContent=`${i}/${r}`}if(o){const i=Math.floor(this.attackBars.enemy.currentTime),r=Math.floor(this.attackBars.enemy.maxTime);o.textContent=`${i}/${r}`}}performPlayerAttack(){if(!this.currentEnemy)return;let e=this.player.attack,t=!1;if(this.player.critChance>0&&Math.random()*100<=this.player.critChance&&(t=!0,e=Math.floor(e*(1+this.player.critDamage/100))),this.currentEnemy.hp-=e,this.currentEnemy.hp<=0){const i=document.getElementById("enemy-hp-bar");i&&(i.classList.add("instant"),i.style.width="0%",i.classList.add("respawning"),setTimeout(()=>{i.classList.remove("instant")},50))}const l=document.getElementById("enemy-hp-bar");l&&this.currentEnemy.hp>0&&z(e,l,"enemy",t);let n=`You attack ${this.currentEnemy.name} for ${e} damage`;t&&(n+=" (💥 CRITICAL HIT!)"),n+="!",this.addCombatMessage(n,t?"player-crit":"player-attack");const c=document.querySelector(".enemy-side");c&&(c.classList.add("damage-animation"),setTimeout(()=>{c.classList.remove("damage-animation")},300));const o=document.getElementById("player-image");o&&(o.classList.add("player-attacking"),setTimeout(()=>{o.classList.remove("player-attacking")},600)),this.currentEnemy.hp<=0&&this.handleEnemyDefeat()}performEnemyAttack(){if(!this.currentEnemy)return;const e=document.getElementById("enemy-image");if(e&&(console.log("Enemy attacking! Classes before:",e.className),e.classList.add("enemy-attacking"),setTimeout(()=>{console.log("Enemy attack finished! Classes after:",e.className),e.classList.remove("enemy-attacking")},600)),this.player.dodge>0&&Math.random()*100<=this.player.dodge){const r=document.getElementById("player-hp-bar");r&&z(0,r,"player",!1,!0),this.addCombatMessage(`You dodge ${this.currentEnemy.name}'s attack! 💨`,"player-dodge");return}let t=this.currentEnemy.attack,l=!1;this.player.blockChance>0&&Math.random()*100<=this.player.blockChance&&(l=!0,t=Math.floor(t*.5)),this.player.hp-=t;const n=document.getElementById("player-hp-bar");n&&z(t,n,"player",!1,!1,!1);let c=`${this.currentEnemy.name} attacks you for ${t} damage`;l&&(c+=" (🛡️ BLOCKED!)"),c+="!",this.addCombatMessage(c,l?"enemy-blocked":"enemy-attack");const o=document.querySelector(".player-side");o&&(o.classList.add("damage-animation"),setTimeout(()=>{o.classList.remove("damage-animation")},300)),this.player.hp<=0&&this.handlePlayerDeath()}handleEnemyDefeat(){const e=this.currentEnemy.gold,t=.1+Math.random()*.9;let l=Math.floor(e*t),n=this.currentEnemy.xp;l=Math.floor(l*this.getGoldMultiplier()),n=Math.floor(n*this.getExperienceMultiplier()),this.player.gold+=l,this.gainXp(n),this.addLogMessage(`${this.currentEnemy.name} defeated! Gained ${l} gold and ${n} XP!`,"loot","enemy-defeated"),this.currentZone==="goblinCave"&&this.currentEnemy.name.includes("Goblin")&&!this.currentEnemy.isBoss&&(this.zones.goblinCave.killCount++,this.addCombatMessage(`Goblins defeated: ${this.zones.goblinCave.killCount}/${this.zones.goblinCave.boss.requiredKills}`,"system"));let c;const o=this.zones[this.currentZone];if(this.currentEnemy.isBoss&&this.currentEnemy.isLegendaryDropper)c=ce(),this.addLogMessage(`💎 The ${this.currentEnemy.name} dropped a legendary item! ${c.fullName}!`,"loot","enemy-defeated"),Ee(this.currentEnemy.name),this.addToInventory(c);else{let i=25;const r=o.allowedRarities||["common","uncommon","rare","epic"],d=this.getItemDropMultiplier();let p=i*d;Math.random()*100<=p&&(c=ie(r),this.addLogMessage(`${this.currentEnemy.name} dropped ${c.fullName}!`,"loot","enemy-defeated"),this.addToInventory(c))}this.currentEnemy=null,this.combat.isActive=!1,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,this.respawnTimer.isActive=!0,this.respawnTimer.currentTime=0}handlePlayerDeath(){this.combat.isActive=!1,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,le(),this.currentZone==="goblinCave"&&(this.zones.goblinCave.killCount=0),this.addCombatMessage("You were defeated! Choose to ascend and gain permanent power...","player-death"),this.currentEnemy=null,this.currentDeathMessage=W(),Q(),he()}getTalentLevel(e,t){return this.talents[e][t]||0}getBaseAttackWithTalents(){return 10+this.getTalentLevel("power","power_1")*5}getBaseMaxHpWithTalents(){return 100}getBaseAttackSpeedWithTalents(){return this.getTalentLevel("power","power_3")*10}getBaseCritChanceWithTalents(){const e=this.getTalentLevel("power","power_2"),t=this.getTalentLevel("power","power_4");let l=e*2;return t>0&&(l+=25),l}getBaseCritDamageWithTalents(){return 0}getBaseLifeStealWithTalents(){return 0}getBaseDodgeWithTalents(){return 0}getBaseBlockChanceWithTalents(){return 0}getExperienceMultiplier(){let e=1;const t=this.getTalentLevel("knowledge","knowledge_1"),l=this.getTalentLevel("knowledge","knowledge_2"),n=this.getTalentLevel("knowledge","knowledge_4");return e+=t*.2,e+=l*.5,n>0&&(e*=3),e}getGoldMultiplier(){let e=1;const t=this.getTalentLevel("wealth","wealth_1"),l=this.getTalentLevel("wealth","wealth_4");return e+=t*.25,l>0&&(e*=2),e}getItemDropMultiplier(){let e=1;const t=this.getTalentLevel("wealth","wealth_2"),l=this.getTalentLevel("wealth","wealth_4");return e+=t*.1,l>0&&(e+=.5),e}canAllocateTalent(e,t){const n=_[e].nodes.find(i=>i.id===t);if(!n)return!1;const c=this.getTalentLevel(e,t);if(c>=n.maxLevel)return!1;const o=n.cost*(c+1);if(this.player.gold<o)return!1;for(const i of n.prerequisites)if(this.getTalentLevel(e,i)===0)return!1;return!0}allocateTalent(e,t){if(!this.canAllocateTalent(e,t))return!1;const n=_[e].nodes.find(i=>i.id===t),c=this.getTalentLevel(e,t),o=n.cost*(c+1);return this.player.gold-=o,this.talents[e][t]=c+1,this.addLogMessage(`Allocated ${n.name} (Level ${c+1})`,"system"),!0}getTotalTalentPoints(){let e=0;for(const t in this.talents)for(const l in this.talents[t])e+=this.talents[t][l];return e}ascend(){this.player.gold,this.player.level=1,this.player.hp=this.getBaseMaxHpWithTalents(),this.player.maxHp=this.getBaseMaxHpWithTalents(),this.player.attack=10,this.player.maxHp=5,this.player.equipmentAttack=0,this.player.equipmentMaxHp=0,this.player.attackSpeed=0,this.player.critChance=0,this.player.critDamage=0,this.player.dodge=0,this.player.blockChance=0,this.player.xp=0,this.player.nextLevelXp=100,this.player.inventory=[],this.player.equipment={weapon:{name:"Rusty Sword",type:"weapon",rarity:"common",attack:5,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0,price:0,baseAttackInterval:2500},offhand:null,helmet:null,body:null,legs:null,belt:null,boots:null,necklace:null,ring:null},this.unlockedZones=["forest"],this.currentZone="forest",this.currentEnemy=null,this.combat.isActive=!1,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,this.applyTalentBonuses(),this.ascensionCount++,this.addLogMessage(`Ascension ${this.ascensionCount} complete! Your journey begins anew with ${this.getTotalTalentPoints()} talent points.`,"system"),this.needsCharacterUpdate=!0,this.needsInventoryUpdate=!0,this.needsShopUpdate=!0}applyTalentBonuses(){this.getTalentLevel("knowledge","knowledge_4")>0&&(this.player.level=5,this.player.xp=0,this.player.nextLevelXp=this.calculateXpForLevel(6));const t=this.getTalentLevel("power","power_1");this.player.attack+=t*5,this.getTalentLevel("exploration","exploration_1"),this.calculateStats()}calculateXpForLevel(e){return Math.floor(100*Math.pow(1.1,e-1))}}const a=new de;function z(s,e,t="enemy",l=!1,n=!1,c=!1){const o=document.createElement("div");if(o.className="floating-damage",n?(o.textContent="MISS",o.classList.add("miss")):c?(o.textContent=`+${s}`,o.classList.add("heal")):(o.textContent=`-${s}`,o.classList.add(t),l&&(o.classList.add("critical"),o.textContent=`CRIT! -${s}`)),!e)return;const i=e.getBoundingClientRect();o.style.position="fixed",o.style.left=`${i.left+i.width/2+Math.random()*40-20}px`,o.style.top=`${i.top+i.height/2}px`,o.style.transform="translate(-50%, -50%)",document.body.appendChild(o),setTimeout(()=>{o.parentNode&&o.parentNode.removeChild(o)},1500)}function C(){const s=document.getElementById("inventory-gold");s&&(s.textContent=a.player.gold,s.style.fontSize="0.7rem");const e=document.getElementById("shop-gold");e&&(e.textContent=a.player.gold);const t=a.getPlayerAttackInterval();document.getElementById("player-attack-interval").textContent=`${(t/1e3).toFixed(1)}s`;const l=document.getElementById("player-attack");l&&(l.textContent=a.player.attack),pe(),document.getElementById("character-level").textContent=a.player.level,document.getElementById("character-xp-text").textContent=`${a.player.xp} / ${a.player.nextLevelXp}`;const n=a.player.xp/a.player.nextLevelXp*100;document.getElementById("character-xp-fill").style.width=`${n}%`;const c=a.player.hp/a.player.maxHp*100;if(document.getElementById("player-hp-bar").style.width=`${c}%`,document.getElementById("player-hp-text").textContent=`${a.player.hp}/${a.player.maxHp}`,Ce(),a.currentEnemy){document.getElementById("enemy-title").textContent=a.currentEnemy.name,document.getElementById("enemy-attack").textContent=a.currentEnemy.attack;const o=document.getElementById("enemy-image");o&&(o.classList.remove("slime","goblin","orc","skeleton","dragon"),o.classList.add("enemy-image",a.currentEnemy.imageClass),o.style.display="block",o.style.visibility="visible");const i=a.getEnemyAttackInterval(a.currentEnemy);document.getElementById("enemy-attack-interval").textContent=`${(i/1e3).toFixed(1)}s`;const r=a.currentEnemy.hp/a.currentEnemy.maxHp*100,d=document.getElementById("enemy-hp-bar");d&&(d.style.width=`${r}%`,d.classList.remove("respawning")),document.getElementById("enemy-hp-text").textContent=`${a.currentEnemy.hp}/${a.currentEnemy.maxHp}`}else if(a.respawnTimer.isActive){const o=Math.ceil((a.respawnTimer.maxTime-a.respawnTimer.currentTime)/1e3),i=a.respawnTimer.currentTime/a.respawnTimer.maxTime*100;document.getElementById("enemy-title").textContent=`Respawning in ${o}s...`,document.getElementById("enemy-attack").textContent="-",document.getElementById("enemy-attack-interval").textContent="-";const r=document.getElementById("enemy-hp-bar");r&&(r.style.width=`${i}%`,r.classList.add("respawning")),document.getElementById("enemy-hp-text").textContent="";const d=document.getElementById("enemy-image");d&&(d.style.visibility="hidden")}else{document.getElementById("enemy-title").textContent="No Enemy",document.getElementById("enemy-attack").textContent="-",document.getElementById("enemy-attack-interval").textContent="-";const o=document.getElementById("enemy-hp-bar");o&&(o.style.width="0%",o.classList.remove("respawning"));const i=document.getElementById("enemy-hp-text");i&&(i.textContent="");const r=document.getElementById("enemy-image");r&&(r.style.visibility="hidden")}if(a.needsCharacterUpdate){for(const o in a.player.equipment){const i=a.player.equipment[o],r=document.getElementById(`${o}-item`),d=document.getElementById(`${o}-tooltip`);if(r){const p=o.charAt(0).toUpperCase()+o.slice(1);if(i){const f=F(i);r.innerHTML=`
            <div class="character-slot-name">${p}</div>
            <div class="character-slot-icon">${f}</div>
            <div class="equipped-item-name">${i.name}</div>
          `}else{const f=F(o);r.innerHTML=`
            <div class="character-slot-name">${p}</div>
            <div class="character-slot-icon empty">${f}</div>
            <div class="empty-slot">Empty</div>
          `}const g=r.closest(".character-slot");i?(g.classList.add("has-item"),d&&(me(d,i),d.style.display="block")):(g.classList.remove("has-item"),r.style.color="",d&&(d.innerHTML="",d.style.display="none"))}}a.needsCharacterUpdate=!1}a.needsInventoryUpdate&&(G(),a.needsInventoryUpdate=!1),a.currentZone==="town"&&a.needsShopUpdate&&(ue(),a.needsShopUpdate=!1)}function pe(){document.getElementById("stats-total-attack").textContent=a.player.attack,document.getElementById("stats-max-hp").textContent=a.player.maxHp;const s=a.getPlayerAttackInterval();document.getElementById("stats-actual-attack-speed").textContent=`${(s/1e3).toFixed(1)}s`,document.getElementById("stats-crit-chance").textContent=`${a.player.critChance||0}%`,document.getElementById("stats-crit-damage").textContent=`${a.player.critDamage||0}%`,document.getElementById("stats-dodge").textContent=`${a.player.dodge||0}%`,document.getElementById("stats-block-chance").textContent=`${a.player.blockChance||0}%`,document.getElementById("stats-xp-multiplier").textContent=`${a.getExperienceMultiplier().toFixed(2)}x`,document.getElementById("stats-gold-multiplier").textContent=`${a.getGoldMultiplier().toFixed(2)}x`,document.getElementById("stats-item-drop-chance").textContent=`${(25*a.getItemDropMultiplier()).toFixed(0)}%`;const e=document.getElementById("stats-total-attack"),t=document.getElementById("stats-max-hp");e&&(e.className="stat-value",a.player.equipmentAttack>0&&e.classList.add("positive")),t&&(t.className="stat-value",a.player.equipmentMaxHp>0&&t.classList.add("positive")),["crit-chance","crit-damage","dodge","block-chance"].forEach(r=>{const d=document.getElementById(`stats-${r}`);if(d){const p=parseInt(d.textContent);d.className="stat-value",p>0&&d.classList.add("positive")}});const n=document.getElementById("stats-xp-multiplier"),c=document.getElementById("stats-gold-multiplier"),o=document.getElementById("stats-item-drop-chance");n&&(n.className="stat-value",a.getExperienceMultiplier()>1&&n.classList.add("positive")),c&&(c.className="stat-value",a.getGoldMultiplier()>1&&c.classList.add("positive")),o&&(o.className="stat-value",a.getItemDropMultiplier()>1&&o.classList.add("positive"));const i=document.getElementById("stats-actual-attack-speed");i&&(i.className="stat-value",a.player.attackSpeed>0&&i.classList.add("positive"))}function me(s,e){const t=w[e.rarity]||w.common,l=t.color;if(!e.type){for(const[p,g]of Object.entries(a.player.equipment))if(g===e){e.type=p;break}}if(!e.type){const p=[];e.attack&&p.push(`<div class="tooltip-stat-line"><span>Attack:</span><span>${e.attack}</span></div>`),e.maxHp&&p.push(`<div class="tooltip-stat-line"><span>Max HP:</span><span>${e.maxHp}</span></div>`),e.baseAttackInterval&&p.push(`<div class="tooltip-stat-line"><span>Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),e.attackSpeed&&p.push(`<div class="tooltip-stat-line"><span>Attack Speed:</span><span>${e.attackSpeed}%</span></div>`),e.critChance&&p.push(`<div class="tooltip-stat-line"><span>Critical Chance:</span><span>${e.critChance}%</span></div>`),e.critDamage&&p.push(`<div class="tooltip-stat-line"><span>Critical Damage:</span><span>${e.critDamage}%</span></div>`),e.dodge&&p.push(`<div class="tooltip-stat-line"><span>Dodge:</span><span>${e.dodge}%</span></div>`),e.blockChance&&p.push(`<div class="tooltip-stat-line"><span>Block Chance:</span><span>${e.blockChance}%</span></div>`),s.innerHTML=`
      <div class="tooltip-name" style="color: ${l};">
        ${M(e)}
      </div>
      <div class="tooltip-stats">
        ${p.join("")}
      </div>
      <div class="tooltip-rarity" style="color: ${l};">
        ${t.name}
      </div>
    `;return}const{baseStats:n,affixStats:c}=T(e);if(!n||!c){console.error("Error separating item stats:",e);const p=[];e.attack&&p.push(`<div class="tooltip-stat-line stat-base"><span>Attack:</span><span>${e.attack}</span></div>`),e.maxHp&&p.push(`<div class="tooltip-stat-line stat-base"><span>Max HP:</span><span>${e.maxHp}</span></div>`),e.baseAttackInterval&&p.push(`<div class="tooltip-stat-line stat-base"><span>Base Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),e.attackSpeed&&p.push(`<div class="tooltip-stat-line stat-base"><span>Attack Speed:</span><span>${e.attackSpeed}%</span></div>`),e.critChance&&p.push(`<div class="tooltip-stat-line stat-base"><span>Critical Chance:</span><span>${e.critChance}%</span></div>`),e.critDamage&&p.push(`<div class="tooltip-stat-line stat-base"><span>Critical Damage:</span><span>${e.critDamage}%</span></div>`),e.dodge&&p.push(`<div class="tooltip-stat-line stat-base"><span>Dodge:</span><span>${e.dodge}%</span></div>`),e.blockChance&&p.push(`<div class="tooltip-stat-line stat-base"><span>Block Chance:</span><span>${e.blockChance}%</span></div>`),s.innerHTML=`
      <div class="tooltip-name" style="color: ${l};">
        ${M(e)}
      </div>
      <div class="tooltip-stats">
        ${p.join("")}
      </div>
      <div class="tooltip-rarity" style="color: ${l};">
        ${t.name}
      </div>
    `;return}const o=[],i=[];(e.type==="weapon"||n.attack>0)&&o.push(`<div class="tooltip-stat-line stat-base"><span>Attack:</span><span>${n.attack}</span></div>`),e.type==="weapon"&&e.baseAttackInterval&&o.push(`<div class="tooltip-stat-line stat-base"><span>Base Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),(["helmet","body","legs","boots","offhand"].includes(e.type)||n.maxHp>0)&&o.push(`<div class="tooltip-stat-line stat-base"><span>Max HP:</span><span>${n.maxHp}</span></div>`);const r=[{key:"attackSpeed",label:"Attack Speed",unit:"%"},{key:"critChance",label:"Critical Chance",unit:"%"},{key:"critDamage",label:"Critical Damage",unit:"%"},{key:"lifeSteal",label:"Life Steal",unit:"%"},{key:"dodge",label:"Dodge",unit:"%"},{key:"blockChance",label:"Block Chance",unit:"%"}];r.forEach(({key:p,label:g,unit:f})=>{n[p]>0&&o.push(`<div class="tooltip-stat-line stat-base"><span>${g}:</span><span>${n[p]}${f}</span></div>`)}),c.attack>0&&i.push(`<div class="tooltip-stat-line stat-neutral"><span>Attack:</span><span>${c.attack}</span></div>`),c.maxHp>0&&i.push(`<div class="tooltip-stat-line stat-neutral"><span>Max HP:</span><span>${c.maxHp}</span></div>`),r.forEach(({key:p,label:g,unit:f})=>{c[p]>0&&i.push(`<div class="tooltip-stat-line stat-neutral"><span>${g}:</span><span>${c[p]}${f}</span></div>`)});let d=o.join("");o.length>0&&i.length>0&&(d+='<div class="tooltip-separator"></div>'),d+=i.join(""),s.innerHTML=`
    <div class="tooltip-name" style="color: ${l};">
      ${M(e)}
    </div>
    <div class="tooltip-stats">
      ${d}
    </div>
    <div class="tooltip-rarity" style="color: ${l};">
      ${t.name}
    </div>
  `}function j(s){const e=a.player.equipment[s.type];if(!e)return!0;const t={attack:s.attack||0,maxHp:s.maxHp||0,attackSpeed:s.attackSpeed||0,critChance:s.critChance||0,critDamage:s.critDamage||0,lifeSteal:s.lifeSteal||0,dodge:s.dodge||0,blockChance:s.blockChance||0},l={attack:e.attack||0,maxHp:e.maxHp||0,attackSpeed:e.attackSpeed||0,critChance:e.critChance||0,critDamage:e.critDamage||0,lifeSteal:e.lifeSteal||0,dodge:e.dodge||0,blockChance:e.blockChance||0};let n=0,c=0;for(const o in t)(t[o]>0||l[o]>0)&&(c++,t[o]>l[o]&&n++);return c>0&&n/c>.5}function F(s){if(typeof s=="string"){const o={weapon:"sword",offhand:"buckler",helmet:"helmet",body:"armor",legs:"pants",belt:"leather-belt",boots:"boots",necklace:"amulet",ring:"ring"}[s]||"sword";return`<img src="${U(`assets/gear/${o}.svg`)}" alt="${s}" class="gear-icon" />`}let t=s.name.toLowerCase().replace(/\s+/g,"-");const l={sword:"sword",axe:"axe",mace:"mace",dagger:"dagger",staff:"staff",greatsword:"greatsword",battleaxe:"battleaxe",warhammer:"warhammer",buckler:"buckler","round-shield":"round-shield","tower-shield":"tower-shield",tome:"tome",helmet:"helmet",cap:"cap",crown:"crown",hood:"hood",armor:"armor",robe:"robe",vest:"vest",tunic:"tunic",greaves:"greaves",pants:"pants",leggings:"leggings",shorts:"shorts",sandals:"sandals",boots:"boots","heavy-boots":"heavy-boots","speed-boots":"speed-boots","leather-belt":"leather-belt","utility-belt":"utility-belt","chain-belt":"chain-belt","war-belt":"war-belt",amulet:"amulet",pendant:"pendant",ring:"ring",bracelet:"bracelet"};l[t]&&(t=l[t]);const n=s.rarity||"common";return`<img src="${U(`assets/gear/${t}.svg`)}" alt="${s.name}" class="gear-icon rarity-${n}" loading="eager" onerror="this.style.display='none';" />`}function G(){const s=document.getElementById("inventory-items");if(!s){console.error("Inventory div not found!");return}D(),s.innerHTML="";const e=a.getSortedAndFilteredInventory();if(e.length===0){const t=document.createElement("div");t.className="inventory-empty",t.textContent=a.inventorySettings.filterBy==="all"?"No items in inventory":`No ${a.inventorySettings.filterBy} items in inventory`,t.style.color="var(--light-color)",t.style.fontStyle="italic",t.style.textAlign="center",t.style.padding="20px",s.appendChild(t);return}e.forEach(t=>{const l=a.player.inventory.findIndex(o=>o===t||o.fullName===t.fullName&&o.type===t.type),n=document.createElement("div");n.className="inventory-item",n.setAttribute("data-item-index",l),j(t)&&n.classList.add("stat-improvement");const c=t.rarity&&w[t.rarity]?w[t.rarity].color:"#9CA3AF";Math.floor((t.price||10)*.5),n.innerHTML=`
      <div class="item-icon">${F(t)}</div>
      <div class="item-name" style="color: ${c}; font-weight: bold;">
        ${M(t)}
      </div>
    `,n.addEventListener("mouseenter",o=>{$=t,I=o,Z(o,t,P)}),n.addEventListener("mouseleave",o=>{$=null,I=null,D()}),n.addEventListener("mousemove",o=>{I=o,te(o)}),n.addEventListener("click",o=>{if(o.preventDefault(),o.stopPropagation(),o.shiftKey){const i=parseInt(n.getAttribute("data-item-index")),r=a.player.inventory[i];r&&i>=0&&i<a.player.inventory.length&&(a.sellItem(r),a.player.inventory.splice(i,1),a.needsInventoryUpdate=!0,D(),n.classList.add("selling"),setTimeout(()=>{C()},300))}else{const i=parseInt(n.getAttribute("data-item-index")),r=a.player.inventory[i];if(r&&i>=0&&i<a.player.inventory.length){const d={...r};D(),a.equipItem(d,!0,i),a.addLogMessage(`✨ Equipped ${d.fullName||d.name}!`,"system"),n.classList.add("equipping"),setTimeout(()=>{C()},300)}}}),n.addEventListener("contextmenu",o=>{o.preventDefault(),o.stopPropagation();const i=parseInt(n.getAttribute("data-item-index")),r=a.player.inventory[i];r&&i>=0&&i<a.player.inventory.length&&(a.sellItem(r),a.player.inventory.splice(i,1),a.needsInventoryUpdate=!0,D(),n.classList.add("selling"),setTimeout(()=>{C()},300))}),s.appendChild(n)})}function ue(){if(a.currentZone!=="town")return;const s=document.getElementById("shop-items"),e=document.getElementById("shop-gold");e&&(e.textContent=a.player.gold),s.innerHTML="",a.shopItems.forEach((t,l)=>{const n=document.createElement("div");n.className="shop-item",j(t)&&n.classList.add("stat-improvement");const c=a.player.gold>=t.price,o=[];t.attack>0&&o.push(`ATK: ${t.attack}`),t.maxHp>0&&o.push(`HP: ${t.maxHp}`);const i=o.join(" | ");n.innerHTML=`
      <div class="item-name">${t.name}</div>
      <div class="item-stats">
        ${i}
      </div>
      <div class="item-type">${t.type.charAt(0).toUpperCase()+t.type.slice(1)}</div>
      <div class="item-price ${c?"affordable":"expensive"}">${t.price}g</div>
    `,c?n.addEventListener("click",()=>{a.player.gold-=t.price;const r={...t};a.addToInventory(r),a.addLogMessage(`💰 Purchased ${t.name} for ${t.price} gold`,"shop"),a.needsShopUpdate=!0,n.classList.add("purchasing"),setTimeout(()=>{C()},300)}):(n.style.opacity="0.6",n.style.cursor="not-allowed",n.title=`Need ${t.price-a.player.gold} more gold`),s.appendChild(n)})}function X(){if(a.currentZone!=="town"&&!a.currentEnemy){if(a.currentEnemy=a.spawnEnemy(),!a.currentEnemy)return;a.addCombatMessage(`A wild ${a.currentEnemy.name} appears!`),a.combat.isActive=!0,a.combat.lastAttackTime=Date.now(),a.attackBars.player.currentTime=0,a.attackBars.enemy.currentTime=0,a.attackBars.player.maxTime=a.getPlayerAttackInterval(),a.attackBars.enemy.maxTime=a.getEnemyAttackInterval(a.currentEnemy),C()}}function he(){const s=document.getElementById("death-modal");s.style.display="flex",a.combat.isActive=!1}function ge(){const s=document.getElementById("death-modal");s.style.display="none",fe()}function fe(){const s=document.getElementById("talent-tree-modal");s.style.display="flex",a.isShowingTalentTree=!0,Y(),K()}function ye(){const s=document.getElementById("talent-tree-modal");s.style.display="none",a.isShowingTalentTree=!1,a.ascend(),L("forest"),C()}function Y(){Object.keys(_).forEach(s=>{const e=_[s],t=document.getElementById(`pathway-${s}`);if(!t)return;const l=t.querySelector(".talent-nodes");l&&(l.innerHTML="",e.nodes.forEach(n=>{const c=a.getTalentLevel(s,n.id),o=a.canAllocateTalent(s,n.id),i=n.cost*(c+1),r=document.createElement("div");r.className=`talent-node ${c>0?"allocated":""} ${o?"available":"locked"}`,r.dataset.pathway=s,r.dataset.talent=n.id,r.innerHTML=`
          ${c>0?`<div class="purchase-counter">${c}</div>`:""}
          <div class="talent-icon">${n.icon}</div>
        `,r.addEventListener("mouseenter",d=>{ve(d,n,c,i)}),r.addEventListener("mouseleave",()=>{ke()}),r.addEventListener("mousemove",d=>{J(d)}),r.addEventListener("click",()=>{a.canAllocateTalent(s,n.id)&&(a.allocateTalent(s,n.id),K())}),l.appendChild(r)}))})}function K(){const s=document.getElementById("talent-gold");s&&(s.textContent=a.player.gold);const e=document.getElementById("talent-points");e&&(e.textContent=a.getTotalTalentPoints());const t=document.getElementById("ascension-count");t&&(t.textContent=a.ascensionCount),Y()}function ve(s,e,t,l){const n=document.getElementById("talent-tooltip"),c=document.getElementById("talent-tooltip-name"),o=document.getElementById("talent-tooltip-level"),i=document.getElementById("talent-tooltip-description"),r=document.getElementById("talent-tooltip-effect"),d=document.getElementById("talent-tooltip-cost");n&&c&&o&&i&&r&&d&&(c.textContent=e.name,o.textContent=`${t}/${e.maxLevel}`,i.textContent=e.description,r.textContent=e.effect,t>=e.maxLevel?d.textContent="Max Level":d.textContent=`Cost: ${l} gold`,n.style.display="block",n.classList.add("visible"),J(s))}function ke(){const s=document.getElementById("talent-tooltip");s&&(s.classList.remove("visible"),setTimeout(()=>{s.classList.contains("visible")||(s.style.display="none")},200))}function J(s){const e=document.getElementById("talent-tooltip");if(e&&e.style.display==="block"){const t=s.clientX+10,l=s.clientY+10,n=e.getBoundingClientRect(),c=window.innerWidth,o=window.innerHeight;let i=t,r=l;t+n.width>c&&(i=s.clientX-n.width-10),l+n.height>o&&(r=s.clientY-n.height-10),e.style.left=i+"px",e.style.top=r+"px"}}function H(s,e,t,l,n=null){const c=document.getElementById("zone-tooltip"),o=document.getElementById("zone-tooltip-icon"),i=document.getElementById("zone-tooltip-title"),r=document.getElementById("zone-tooltip-description"),d=document.getElementById("zone-tooltip-content");if(!c||!o||!i||!r||!d)return;const p={forest:"🌲",town:"🏘️",cave:"🕳️",goblinCave:"👹",mountain:"🏔️"};o.textContent=p[e]||"🗺️",i.textContent=t.name,r.textContent=t.description;let g="";if(e==="town"?g+=`
      <div class="zone-tooltip-enemies">
        <div class="zone-tooltip-enemies-title">🏪 Features:</div>
        <div class="zone-tooltip-enemy-list">
          • Purchase equipment<br>
          • Heal over time<br>
          • Safe from combat
        </div>
      </div>
    `:t.enemies&&t.enemies.length>0&&(g+=`
      <div class="zone-tooltip-enemies">
        <div class="zone-tooltip-enemies-title">⚔️ Enemies:</div>
        <div class="zone-tooltip-enemy-list">
          ${t.enemies.map(f=>`• ${f.name} (HP: ${f.hp}, ATK: ${f.attack})`).join("<br>")}
        </div>
      </div>
    `),e==="goblinCave"&&t.boss&&(g+=`
      <div class="zone-tooltip-boss">
        <div class="zone-tooltip-boss-title">👑 Boss: ${t.boss.name}</div>
        <div class="zone-tooltip-boss-info">HP: ${t.boss.hp}, ATK: ${t.boss.attack}<br>Requires ${t.boss.requiredKills} goblin kills<br>Drops legendary items!</div>
      </div>
    `),!l)if(n){const f=a.player.level;g+=`
        <div class="zone-tooltip-unlock">
          <div class="zone-tooltip-unlock-title">🔒 Zone Locked</div>
          <div class="zone-tooltip-unlock-req">Required Level: ${n.level}</div>
          <div class="zone-tooltip-unlock-current">Current Level: ${f}</div>
        </div>
      `}else g+=`
        <div class="zone-tooltip-unlock">
          <div class="zone-tooltip-unlock-title">🔒 Zone Locked</div>
          <div class="zone-tooltip-unlock-req">Complete more areas to unlock</div>
        </div>
      `;d.innerHTML=g,c.style.display="block",c.classList.add("visible"),B(s)}function A(){const s=document.getElementById("zone-tooltip");s&&(s.classList.remove("visible"),setTimeout(()=>{s.classList.contains("visible")||(s.style.display="none")},200))}function B(s){const e=document.getElementById("zone-tooltip");if(e&&e.style.display==="block"){const t=s.clientX+15,l=s.clientY+15,n=e.getBoundingClientRect(),c=window.innerWidth,o=window.innerHeight;let i=t,r=l;t+n.width>c&&(i=s.clientX-n.width-15),l+n.height>o&&(r=s.clientY-n.height-15),e.style.left=i+"px",e.style.top=r+"px"}}function L(s){a.currentZone==="goblinCave"&&s!=="goblinCave"&&(a.zones.goblinCave.killCount=0),a.currentZone=s,a.currentEnemy=null,a.combat.isActive=!1,document.querySelectorAll(".zone-btn").forEach(l=>{l.classList.remove("active")}),document.querySelector(`[data-zone="${s}"]`).classList.add("active");const e=document.querySelector(".combat-area"),t=document.getElementById("shop-area");if(s==="town"){e.style.display="none",t.style.display="flex",a.addLogMessage("Welcome to the peaceful town. Rest and shop here.","system"),a.needsShopUpdate=!0;const l=setInterval(()=>{a.currentZone==="town"&&a.player.hp<a.player.maxHp?(a.player.hp=Math.min(a.player.maxHp,a.player.hp+2),C()):clearInterval(l)},1e3)}else e.style.display="grid",t.style.display="none",a.addLogMessage(`Entered ${a.zones[s].name}. ${a.zones[s].description}`,"system"),setTimeout(()=>X(),500);C()}function be(){const s=document.getElementById("zone-buttons"),e={cave:{level:5,message:"The Mysterious Cave is now accessible!"},goblinCave:{level:8,message:"You discovered the Goblin Cave!"},mountain:{level:12,message:"The Snowy Mountains path has opened!"},town:{level:3,message:"You can now visit the Town to trade and rest!"}};for(const[t,l]of Object.entries(a.zones)){const n=document.createElement("button"),c=a.unlockedZones.includes(t);n.className=`zone-btn ${t==="town"?"town":""} ${c?"":"locked"}`,n.textContent=l.name,n.setAttribute("data-zone",t),c?n.addEventListener("click",()=>L(t)):n.addEventListener("click",()=>{const o=e[t];o?a.addLogMessage(`This zone is locked. Reach level ${o.level} to unlock it!`,"system"):a.addLogMessage("This zone is locked. Complete more areas to unlock it!","system")}),c?l.enemies&&l.enemies.length>0?(n.addEventListener("mouseenter",o=>{H(o,t,l,!0)}),n.addEventListener("mouseleave",()=>{A()}),n.addEventListener("mousemove",o=>{B(o)})):(n.addEventListener("mouseenter",o=>{H(o,t,l,!0)}),n.addEventListener("mouseleave",()=>{A()}),n.addEventListener("mousemove",o=>{B(o)})):(n.addEventListener("mouseenter",o=>{H(o,t,l,!1,e[t])}),n.addEventListener("mouseleave",()=>{A()}),n.addEventListener("mousemove",o=>{B(o)})),s.appendChild(n)}}function we(){const s={cave:{level:5,message:"The Mysterious Cave is now accessible!"},goblinCave:{level:8,message:"You discovered the Goblin Cave!"},mountain:{level:12,message:"The Snowy Mountains path has opened!"},town:{level:3,message:"You can now visit the Town to trade and rest!"}};document.querySelectorAll(".zone-btn").forEach(t=>{const l=t.getAttribute("data-zone"),n=a.zones[l],c=a.unlockedZones.includes(l),o=t.cloneNode(!0);t.parentNode.replaceChild(o,t),c?o.addEventListener("click",()=>L(l)):o.addEventListener("click",()=>{const i=s[l];i?a.addLogMessage(`This zone is locked. Reach level ${i.level} to unlock it!`,"system"):a.addLogMessage("This zone is locked. Complete more areas to unlock it!","system")}),c?(o.addEventListener("mouseenter",i=>{H(i,l,n,!0)}),o.addEventListener("mouseleave",()=>{A()}),o.addEventListener("mousemove",i=>{B(i)})):(o.addEventListener("mouseenter",i=>{H(i,l,n,!1,s[l])}),o.addEventListener("mouseleave",()=>{A()}),o.addEventListener("mousemove",i=>{B(i)}))})}function V(){const s=a.player.level;let e=!1;const t={cave:{level:5,message:"The Mysterious Cave is now accessible!"},goblinCave:{level:8,message:"You discovered the Goblin Cave!"},mountain:{level:12,message:"The Snowy Mountains path has opened!"},town:{level:3,message:"You can now visit the Town to trade and rest!"}};for(const[l,n]of Object.entries(t))!a.unlockedZones.includes(l)&&s>=n.level&&(a.unlockedZones.push(l),a.addLogMessage(n.message,"system"),e=!0);we(),e&&xe()}function xe(){document.querySelectorAll(".zone-btn").forEach(e=>{const t=e.getAttribute("data-zone");if(a.unlockedZones.includes(t)&&e.classList.contains("locked")){e.classList.remove("locked");const n=e.cloneNode(!0);n.addEventListener("click",()=>L(t));const c=a.zones[t];n.addEventListener("mouseenter",o=>{H(o,t,c,!0)}),n.addEventListener("mouseleave",()=>{A()}),n.addEventListener("mousemove",o=>{B(o)}),e.parentNode.replaceChild(n,e)}})}function Ce(){const s=document.getElementById("kill-counter"),e=document.getElementById("kill-counter-text");if(a.currentZone==="goblinCave"){const t=a.zones.goblinCave;s.style.display="block",e.textContent=`Goblins defeated: ${t.killCount}/${t.boss.requiredKills}`}else s.style.display="none"}function Se(s){const e=document.getElementById("boss-warning"),t=document.getElementById("boss-warning-name");t.textContent=s,e.style.display="block",setTimeout(()=>{e.style.display="none"},2e3)}function Ee(s){const e=document.getElementById("victory-message"),t=document.getElementById("victory-subtext");t.textContent=`The ${s} has been defeated!`,e.style.display="block",setTimeout(()=>{e.style.display="none"},4e3)}function Q(){const s=document.getElementById("end-run-btn");s&&(s.textContent=`💀 ${a.currentDeathMessage}`,s.title=`End current run: ${a.currentDeathMessage}`)}document.getElementById("save-game").addEventListener("click",()=>a.save());document.getElementById("load-game").addEventListener("click",()=>{a.load()&&(C(),L(a.currentZone))});document.getElementById("reset-game").addEventListener("click",()=>a.reset());document.getElementById("end-run-btn").addEventListener("click",()=>{confirm(`Are you sure you want to ${a.currentDeathMessage.toLowerCase()}? This will end your current run and trigger ascension.`)&&(a.player.hp=0,a.handlePlayerDeath())});document.getElementById("ascend-btn").addEventListener("click",()=>ge());document.getElementById("confirm-ascend").addEventListener("click",()=>ye());document.querySelectorAll(".character-slot").forEach(s=>{s.addEventListener("click",()=>{const e=s.getAttribute("data-slot"),t=a.player.equipment[e];if(t){const l={...t,type:e,addedTimestamp:Date.now()};a.player.inventory.push(l),a.player.equipment[e]=null,a.needsCharacterUpdate=!0,a.needsInventoryUpdate=!0,a.calculateStats(),a.addLogMessage(`Unequipped ${t.fullName||t.name}`,"system"),s.classList.add("damage-animation"),setTimeout(()=>{s.classList.remove("damage-animation"),C()},300)}else a.addLogMessage(`No item equipped in ${e} slot`,"system")})});document.querySelectorAll(".stat-tooltip-item").forEach(s=>{const e=s.getAttribute("data-tooltip");s.addEventListener("mouseenter",t=>{Be(t,e)}),s.addEventListener("mouseleave",()=>{$e()}),s.addEventListener("mousemove",t=>{ae(t)})});let O=0,R=0;const Te=100;function ee(s=performance.now()){R===0&&(R=s);const e=s-R;R=s,a.combat.isActive&&a.currentEnemy&&a.currentZone!=="town"&&a.updateAttackBars(e),a.respawnTimer.isActive&&a.currentZone!=="town"&&a.updateRespawnTimer(e),s-O>=Te&&(C(),O=s),requestAnimationFrame(ee)}function Ie(){a.calculateStats(),V(),be(),L("forest"),Q(),document.querySelectorAll(".filter-btn").forEach(s=>{s.addEventListener("click",()=>{const e=s.getAttribute("data-filter");a.setLogFilter(e)})}),document.getElementById("clear-log").addEventListener("click",()=>{confirm("Clear all activity log entries?")&&a.clearActivityLog()}),document.getElementById("inventory-sort").addEventListener("change",s=>{a.inventorySettings.sortBy=s.target.value,a.needsInventoryUpdate=!0,G()}),document.getElementById("inventory-filter").addEventListener("change",s=>{a.inventorySettings.filterBy=s.target.value,a.needsInventoryUpdate=!0,G()}),document.getElementById("auto-sell-btn").addEventListener("click",()=>{document.getElementById("auto-sell-common").checked=a.inventorySettings.autoSell.rarities.common,document.getElementById("auto-sell-uncommon").checked=a.inventorySettings.autoSell.rarities.uncommon,document.getElementById("auto-sell-rare").checked=a.inventorySettings.autoSell.rarities.rare,document.getElementById("auto-sell-weapons").checked=a.inventorySettings.autoSell.types.weapon,document.getElementById("auto-sell-offhand").checked=a.inventorySettings.autoSell.types.offhand,document.getElementById("auto-sell-helmets").checked=a.inventorySettings.autoSell.types.helmet,document.getElementById("auto-sell-body").checked=a.inventorySettings.autoSell.types.body,document.getElementById("auto-sell-legs").checked=a.inventorySettings.autoSell.types.legs,document.getElementById("auto-sell-belt").checked=a.inventorySettings.autoSell.types.belt,document.getElementById("auto-sell-boots").checked=a.inventorySettings.autoSell.types.boots,document.getElementById("auto-sell-necklaces").checked=a.inventorySettings.autoSell.types.necklace,document.getElementById("auto-sell-rings").checked=a.inventorySettings.autoSell.types.ring,document.getElementById("auto-sell-modal").style.display="flex"}),document.getElementById("close-auto-sell").addEventListener("click",()=>{document.getElementById("auto-sell-modal").style.display="none"}),document.getElementById("save-auto-sell").addEventListener("click",()=>{if(a.inventorySettings.autoSell.rarities.common=document.getElementById("auto-sell-common").checked,a.inventorySettings.autoSell.rarities.uncommon=document.getElementById("auto-sell-uncommon").checked,a.inventorySettings.autoSell.rarities.rare=document.getElementById("auto-sell-rare").checked,a.inventorySettings.autoSell.types.weapon=document.getElementById("auto-sell-weapons").checked,a.inventorySettings.autoSell.types.offhand=document.getElementById("auto-sell-offhand").checked,a.inventorySettings.autoSell.types.helmet=document.getElementById("auto-sell-helmets").checked,a.inventorySettings.autoSell.types.body=document.getElementById("auto-sell-body").checked,a.inventorySettings.autoSell.types.legs=document.getElementById("auto-sell-legs").checked,a.inventorySettings.autoSell.types.belt=document.getElementById("auto-sell-belt").checked,a.inventorySettings.autoSell.types.boots=document.getElementById("auto-sell-boots").checked,a.inventorySettings.autoSell.types.necklace=document.getElementById("auto-sell-necklaces").checked,a.inventorySettings.autoSell.types.ring=document.getElementById("auto-sell-rings").checked,a.inventorySettings.autoSell.enabled){const s=[];if(a.player.inventory.forEach((e,t)=>{a.shouldAutoSell(e)&&s.push({item:e,index:t})}),s.length>0){let e=0;s.reverse().forEach(({item:t,index:l})=>{e+=a.sellItem(t,!1),a.player.inventory.splice(l,1),a.needsInventoryUpdate=!0}),a.addLogMessage(`💰 Auto-sold ${s.length} existing items for ${e} total gold`,"shop")}}document.getElementById("auto-sell-modal").style.display="none",a.addLogMessage("💾 Auto-sell settings saved","system")}),document.getElementById("auto-sell-enabled-main").addEventListener("change",s=>{if(a.inventorySettings.autoSell.enabled=s.target.checked,s.target.checked){a.addLogMessage("✅ Auto-sell enabled","system");const e=[];if(a.player.inventory.forEach((t,l)=>{a.shouldAutoSell(t)&&e.push({item:t,index:l})}),e.length>0){let t=0;e.reverse().forEach(({item:l,index:n})=>{t+=a.sellItem(l,!1),a.player.inventory.splice(n,1),a.needsInventoryUpdate=!0}),a.addLogMessage(`💰 Auto-sold ${e.length} existing items for ${t} total gold`,"shop")}}else a.addLogMessage("❌ Auto-sell disabled","system")}),document.getElementById("auto-sell-enabled-main").checked=a.inventorySettings.autoSell.enabled,a.addLogMessage("🎮 Welcome to the Idle RPG! Your adventure begins...","system"),localStorage.getItem("idleRPG_save")&&confirm("Found a saved game. Would you like to load it?")&&(a.load(),L(a.currentZone),a.addLogMessage("📂 Game loaded successfully!","system")),Object.keys(a.player.equipment).forEach(s=>{const e=a.player.equipment[s];e&&(e.type||(e.type=s))}),C(),ee()}function Z(s,e,t=!1){const l=document.getElementById("inventory-tooltip");if(!l||!e)return;const n=a.player.equipment[e.type],c=w[e.rarity]||w.common,o=n?w[n.rarity]||w.common:null;let i=`<div class="tooltip-title" style="color: ${c.color};">${M(e)}</div>`;i+=`<div class="tooltip-item-type">${e.type.charAt(0).toUpperCase()+e.type.slice(1)}</div>`;const{baseStats:r,affixStats:d}=T(e),p=[],g=[];if(r.attack>0){let m=`${r.attack} Base Attack`;if(t&&n){const{baseStats:v}=T(n),u=r.attack-v.attack;u>0?m=`<div class="stat-gain">${m} (+${u})</div>`:u<0?m=`<div class="stat-loss">${m} (${u})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-base">${m}</div>`;p.push(m)}if(e.type==="weapon"&&e.baseAttackInterval){let m=`${(e.baseAttackInterval/1e3).toFixed(1)}s Base Attack Speed`;if(t&&n){const v=n.baseAttackInterval||2e3,u=e.baseAttackInterval-v;u>0?m=`<div class="stat-loss">${m} (+${(u/1e3).toFixed(1)}s)</div>`:u<0?m=`<div class="stat-gain">${m} (${(u/1e3).toFixed(1)}s)</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-base">${m}</div>`;p.push(m)}if(r.maxHp>0){let m=`${r.maxHp} Max HP`;if(t&&n){const{baseStats:v}=T(n),u=r.maxHp-equippedbaseStats.maxHp;u>0?m=`<div class="stat-gain">${m} (+${u})</div>`:u<0?m=`<div class="stat-loss">${m} (${u})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-base">${m}</div>`;p.push(m)}const f=[{key:"attackSpeed",label:"Attack Speed",unit:"%"},{key:"critChance",label:"Crit Chance",unit:"%"},{key:"critDamage",label:"Crit Damage",unit:"%"},{key:"lifeSteal",label:"Life Steal",unit:"%"},{key:"dodge",label:"Dodge",unit:"%"},{key:"blockChance",label:"Block Chance",unit:"%"}];if(f.forEach(({key:m,label:v,unit:u})=>{if(r[m]>0){let h=`${r[m]}${u} ${v}`;if(t&&n){const{baseStats:S}=T(n),k=r[m]-S[m];k>0?h=`<div class="stat-gain">${h} (${k}${u})</div>`:k<0?h=`<div class="stat-loss">${h} (${k}${u})</div>`:h=`<div class="stat-neutral">${h}</div>`}else h=`<div class="stat-base">${h}</div>`;p.push(h)}}),d.attack>0){let m=`${d.attack} Attack`;if(t&&n){const{affixStats:v}=T(n),u=d.attack-v.attack;u>0?m=`<div class="stat-gain">${m} (+${u})</div>`:u<0?m=`<div class="stat-loss">${m} (${u})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-neutral">${m}</div>`;g.push(m)}if(d.maxHp>0){let m=`${d.maxHp} Max HP`;if(t&&n){const{affixStats:v}=T(n),u=d.maxHp-equippedaffixStats.maxHp;u>0?m=`<div class="stat-gain">${m} (+${u})</div>`:u<0?m=`<div class="stat-loss">${m} (${u})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-neutral">${m}</div>`;g.push(m)}if(f.forEach(({key:m,label:v,unit:u})=>{if(d[m]>0){let h=`${d[m]}${u} ${v}`;if(t&&n){const{affixStats:S}=T(n),k=d[m]-S[m];k>0?h=`<div class="stat-gain">${h} (${k}${u})</div>`:k<0?h=`<div class="stat-loss">${h} (${k}${u})</div>`:h=`<div class="stat-neutral">${h}</div>`}else h=`<div class="stat-neutral">${h}</div>`;g.push(h)}}),i+=p.join(""),p.length>0&&g.length>0&&(i+='<div class="tooltip-separator"></div>'),i+=g.join(""),t&&n){const{baseStats:m,affixStats:v}=T(n),u=[];[{key:"attack",label:"Attack",unit:"",isBase:!0},{key:"maxHp",label:"Max HP",unit:"",isBase:!0},{key:"attackSpeed",label:"Attack Speed",unit:"%",isBase:!0},{key:"critChance",label:"Crit Chance",unit:"%",isBase:!0},{key:"critDamage",label:"Crit Damage",unit:"%",isBase:!0},{key:"lifeSteal",label:"Life Steal",unit:"%",isBase:!0},{key:"dodge",label:"Dodge",unit:"%",isBase:!0},{key:"blockChance",label:"Block Chance",unit:"%",isBase:!0}].forEach(({key:h,label:S,unit:k})=>{const E=(m[h]||0)+(v[h]||0),ne=(r[h]||0)+(d[h]||0);E>0&&ne===0&&u.push(`<div class="stat-missing">${S}: ${E}${k} → 0${k} (-${E}${k})</div>`)}),u.length>0&&(i+='<div class="tooltip-separator"></div>',i+=u.join("")),i+=`<div class="tooltip-comparison">Compared to: <span style="color: ${o.color};">${M(n)}</span></div>`}else n?i+='<div class="tooltip-comparison">Hold Shift for detailed comparison</div>':i+=`<div class="tooltip-comparison">No ${e.type} equipped</div>`;const y=Math.floor((e.price||10)*.5);i+=`<div class="tooltip-sell-info">Right-click to sell for ${y} gold</div>`,l.innerHTML=i,l.style.display="block",te(s)}function D(){const s=document.getElementById("inventory-tooltip");s&&(s.style.display="none")}function te(s){const e=document.getElementById("inventory-tooltip");if(!e)return;const t=e.getBoundingClientRect(),l=window.innerWidth,n=window.innerHeight;let c=s.clientX+10,o=s.clientY+10;c+t.width>l&&(c=s.clientX-t.width-10),o+t.height>n&&(o=s.clientY-t.height-10),c=Math.max(5,c),o=Math.max(5,o),e.style.left=c+"px",e.style.top=o+"px"}function Be(s,e){const t=document.getElementById("stats-tooltip"),l=document.getElementById("stats-tooltip-name"),n=document.getElementById("stats-tooltip-content");if(t&&l&&n){let c=function(i){const r=[];for(const d in a.player.equipment){const p=a.player.equipment[d];p&&p[i]&&p[i]>0&&r.push({slot:d,name:p.fullName||p.name,value:p[i]})}return r},o="";if(e==="attack"){const i=a.getBaseAttackWithTalents();a.player.equipmentAttack;const r=i-10,d=c("attack");l.textContent="Total Attack Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Attack:</span>
          <span class="stat-breakdown-value">10</span>
        </div>
        ${r>0?`
        <div class="stat-breakdown-item">
          <span>Talent Bonuses:</span>
          <span class="stat-breakdown-value">+${r}</span>
        </div>
        `:""}
        ${d.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${d.map(p=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${p.name}:</span>
            <span class="stat-breakdown-value">+${p.value}</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Attack:</span>
          <span class="stat-breakdown-value">${a.player.attack}</span>
        </div>
      `}else if(e==="hp"){const r=(a.player.level-1)*10,d=c("maxHp");d.reduce((p,g)=>p+g.value,0),l.textContent="Max HP Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base HP:</span>
          <span class="stat-breakdown-value">100</span>
        </div>
        <div class="stat-breakdown-item">
          <span>Level Bonus (${a.player.level-1} × 10):</span>
          <span class="stat-breakdown-value">+${r}</span>
        </div>
        ${d.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${d.map(p=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${p.name}:</span>
            <span class="stat-breakdown-value">+${p.value}</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Max HP:</span>
          <span class="stat-breakdown-value">${a.player.maxHp}</span>
        </div>
      `}else if(e==="attack-speed"){const r=a.player.equipment.weapon?.baseAttackInterval||2e3,d=a.player.attackSpeed||0,p=a.getBaseAttackSpeedWithTalents(),g=c("attackSpeed"),f=a.getPlayerAttackInterval();l.textContent="Attack Speed Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Attack Speed:</span>
          <span class="stat-breakdown-value">${(r/1e3).toFixed(1)}s</span>
        </div>
        ${p>0?`
        <div class="stat-breakdown-item">
          <span>Talent Speed Bonus:</span>
          <span class="stat-breakdown-value">+${p}%</span>
        </div>
        `:""}
        ${g.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${g.map(y=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${y.name}:</span>
            <span class="stat-breakdown-value">+${y.value}%</span>
          </div>
        `).join("")}
        `:""}
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Total Speed Bonus:</span>
          <span class="stat-breakdown-value">+${d}%</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Actual Attack Speed:</span>
          <span class="stat-breakdown-value">${(f/1e3).toFixed(1)}s</span>
        </div>
      `}else if(e==="crit-chance"){const i=a.getBaseCritChanceWithTalents(),r=c("critChance");r.reduce((d,p)=>d+p.value,0),l.textContent="Critical Chance Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Critical Chance:</span>
          <span class="stat-breakdown-value">0%</span>
        </div>
        ${i>0?`
        <div class="stat-breakdown-item">
          <span>Talent Bonuses:</span>
          <span class="stat-breakdown-value">+${i}%</span>
        </div>
        `:""}
        ${r.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${r.map(d=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${d.name}:</span>
            <span class="stat-breakdown-value">+${d.value}%</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Critical Chance:</span>
          <span class="stat-breakdown-value">${a.player.critChance||0}%</span>
        </div>
      `}else if(e==="crit-damage"){const i=c("critDamage");l.textContent="Critical Damage Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Critical Damage:</span>
          <span class="stat-breakdown-value">0%</span>
        </div>
        ${i.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${i.map(r=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${r.name}:</span>
            <span class="stat-breakdown-value">+${r.value}%</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Critical Damage:</span>
          <span class="stat-breakdown-value">${a.player.critDamage||0}%</span>
        </div>
      `}else if(e==="life-steal"){const i=c("lifeSteal");l.textContent="Life Steal Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Life Steal:</span>
          <span class="stat-breakdown-value">0%</span>
        </div>
        ${i.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${i.map(r=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${r.name}:</span>
            <span class="stat-breakdown-value">+${r.value}%</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Life Steal:</span>
          <span class="stat-breakdown-value">${a.player.lifeSteal||0}%</span>
        </div>
      `}else if(e==="dodge"){const i=c("dodge");l.textContent="Dodge Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Dodge:</span>
          <span class="stat-breakdown-value">0%</span>
        </div>
        ${i.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${i.map(r=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${r.name}:</span>
            <span class="stat-breakdown-value">+${r.value}%</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Dodge:</span>
          <span class="stat-breakdown-value">${a.player.dodge||0}%</span>
        </div>
      `}else if(e==="block-chance"){const i=c("blockChance");l.textContent="Block Chance Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Block Chance:</span>
          <span class="stat-breakdown-value">0%</span>
        </div>
        ${i.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${i.map(r=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${r.name}:</span>
            <span class="stat-breakdown-value">+${r.value}%</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Block Chance:</span>
          <span class="stat-breakdown-value">${a.player.blockChance||0}%</span>
        </div>
      `}else if(e==="xp-multiplier"){const r=a.getTalentLevel("knowledge","knowledge_1"),d=a.getTalentLevel("knowledge","knowledge_2"),p=a.getTalentLevel("knowledge","knowledge_4"),g=a.getExperienceMultiplier();l.textContent="Experience Multiplier Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Multiplier:</span>
          <span class="stat-breakdown-value">${1 .toFixed(2)}x</span>
        </div>
        ${r>0?`
        <div class="stat-breakdown-item">
          <span>Quick Learner (Lv${r}):</span>
          <span class="stat-breakdown-value">+${(r*.2).toFixed(2)}x</span>
        </div>
        `:""}
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Battle Wisdom (Lv${d}):</span>
          <span class="stat-breakdown-value">+${(d*.5).toFixed(2)}x</span>
        </div>
        `:""}
        ${p>0?`
        <div class="stat-breakdown-item">
          <span>Enlightened One:</span>
          <span class="stat-breakdown-value">×3.00x</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Experience Multiplier:</span>
          <span class="stat-breakdown-value">${g.toFixed(2)}x</span>
        </div>
      `}else if(e==="gold-multiplier"){const r=a.getTalentLevel("wealth","wealth_1"),d=a.getTalentLevel("wealth","wealth_4"),p=a.getGoldMultiplier();l.textContent="Gold Multiplier Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Multiplier:</span>
          <span class="stat-breakdown-value">${1 .toFixed(2)}x</span>
        </div>
        ${r>0?`
        <div class="stat-breakdown-item">
          <span>Coin Collector (Lv${r}):</span>
          <span class="stat-breakdown-value">+${(r*.25).toFixed(2)}x</span>
        </div>
        `:""}
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Golden Touch:</span>
          <span class="stat-breakdown-value">×2.00x</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Gold Multiplier:</span>
          <span class="stat-breakdown-value">${p.toFixed(2)}x</span>
        </div>
      `}else if(e==="item-drop-chance"){const r=a.getTalentLevel("wealth","wealth_2"),d=a.getTalentLevel("wealth","wealth_4"),p=a.getItemDropMultiplier();l.textContent="Item Drop Chance Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Drop Chance:</span>
          <span class="stat-breakdown-value">25%</span>
        </div>
        ${r>0?`
        <div class="stat-breakdown-item">
          <span>Lucky Find (Lv${r}):</span>
          <span class="stat-breakdown-value">+${(r*10).toFixed(0)}%</span>
        </div>
        `:""}
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Golden Touch:</span>
          <span class="stat-breakdown-value">+50%</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Drop Chance:</span>
          <span class="stat-breakdown-value">${(25*p).toFixed(0)}%</span>
        </div>
      `}n.innerHTML=o,t.style.display="block",t.classList.add("visible"),ae(s)}}function $e(){const s=document.getElementById("stats-tooltip");s&&(s.classList.remove("visible"),setTimeout(()=>{s.classList.contains("visible")||(s.style.display="none")},200))}function ae(s){const e=document.getElementById("stats-tooltip");if(e&&e.style.display==="block"){const t=s.clientX+10,l=s.clientY+10,n=e.getBoundingClientRect(),c=window.innerWidth,o=window.innerHeight;let i=t,r=l;t+n.width>c&&(i=s.clientX-n.width-10),l+n.height>o&&(r=s.clientY-n.height-10),e.style.left=`${i}px`,e.style.top=`${r}px`}}function Le(){["sword","axe","mace","dagger","staff","greatsword","battleaxe","warhammer","buckler","round-shield","tower-shield","tome","helmet","cap","crown","hood","armor","robe","vest","tunic","greaves","pants","leggings","shorts","sandals","boots","heavy-boots","speed-boots","leather-belt","utility-belt","chain-belt","war-belt","amulet","pendant","ring","bracelet"].forEach(e=>{const t=new Image;t.src=U(`assets/gear/${e}.svg`)})}document.addEventListener("keydown",s=>{s.key==="Shift"&&(P=!0,$&&I&&Z(I,$,P))});document.addEventListener("keyup",s=>{s.key==="Shift"&&(P=!1,$&&I&&Z(I,$,P))});document.addEventListener("DOMContentLoaded",()=>{Le(),Ie()});
