(function(){const a=document.createElement("link").relList;if(a&&a.supports&&a.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))l(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const n of i.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&l(n)}).observe(document,{childList:!0,subtree:!0});function e(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function l(s){if(s.ep)return;s.ep=!0;const i=e(s);fetch(s.href,i)}})();function H(t){if(S[t.rarity]||S.common,t.rarity==="common")return t.name;let a=t.name;return t.prefixes&&t.prefixes.length>0&&(a=t.prefixes.join(" ")+" "+a),t.suffixes&&t.suffixes.length>0&&(a=a+" "+t.suffixes.join(" ")),a}function ce(){const t="legendary",a=Object.keys(G),e=a[Math.floor(Math.random()*a.length)],l=G[e],s=l[Math.floor(Math.random()*l.length)],i=S[t],n={name:s.name,type:e,rarity:t,attack:s.attack,maxHp:s.maxHp,attackSpeed:s.attackSpeed,critChance:s.critChance,critDamage:s.critDamage,lifeSteal:s.lifeSteal,dodge:s.dodge,blockChance:s.blockChance,timestamp:Date.now(),prefixes:[],suffixes:[]};e==="weapon"&&s.handType&&(n.handType=s.handType),e==="weapon"&&s.baseAttackInterval&&(n.baseAttackInterval=s.baseAttackInterval);const c=i.affixCount;if(c>0){const d=Math.min(2,Math.ceil(c/2)),u=Math.min(2,c-d),p=i.prefix.filter(h=>{const k=L.prefix[h];return k&&k.allowedTypes.includes(e)});for(let h=0;h<d&&p.length>0;h++){const k=Math.floor(Math.random()*p.length),w=p.splice(k,1)[0];n.prefixes.push(w);const m=L.prefix[w].stats;m&&Object.keys(m).forEach(v=>{n[v]+=m[v]})}const g=i.suffix.filter(h=>{const k=L.suffix[h];return k&&k.allowedTypes.includes(e)});for(let h=0;h<u&&g.length>0;h++){const k=Math.floor(Math.random()*g.length),w=g.splice(k,1)[0];n.suffixes.push(w);const m=L.suffix[w].stats;m&&Object.keys(m).forEach(v=>{n[v]+=m[v]})}}let r=s.name;if(n.prefixes.length>0&&(r=`${n.prefixes[Math.floor(Math.random()*n.prefixes.length)]} ${r}`),n.suffixes.length>0){const d=n.suffixes[Math.floor(Math.random()*n.suffixes.length)];r=`${r} ${d}`}return n.fullName=r,n}function re(t){const a={};t.forEach(h=>{S[h]&&(a[h]=S[h])}),Object.keys(a).length===0&&(a.common=S.common);const e=Math.random()*100;let l="common",s=0;for(const[h,k]of Object.entries(a))if(s+=k.chance,e<=s){l=h;break}const i=Object.keys(G),n=i[Math.floor(Math.random()*i.length)],c=G[n],r=c[Math.floor(Math.random()*c.length)],d=S[l],u={name:r.name,type:n,rarity:l,attack:r.attack,maxHp:r.maxHp,attackSpeed:r.attackSpeed,critChance:r.critChance,critDamage:r.critDamage,dodge:r.dodge,blockChance:r.blockChance,price:Math.floor((r.baseValue||10)*(d.priceMultiplier||1)),handType:r.handType||"1h",baseAttackInterval:r.baseAttackInterval,prefixes:[],suffixes:[]},p=d.affixCount;if(p>0){const h=Math.min(3,Math.ceil(p/2)),k=Math.min(3,p-h),w=d.prefix.filter(v=>{const f=L.prefix[v];return f&&f.allowedTypes.includes(n)});for(let v=0;v<h&&w.length>0;v++){const f=Math.floor(Math.random()*w.length),b=w.splice(f,1)[0];u.prefixes.push(b);const y=L.prefix[b].stats;y&&Object.keys(y).forEach(x=>{u[x]+=y[x]})}const m=d.suffix.filter(v=>{const f=L.suffix[v];return f&&f.allowedTypes.includes(n)});for(let v=0;v<k&&m.length>0;v++){const f=Math.floor(Math.random()*m.length),b=m.splice(f,1)[0];u.suffixes.push(b);const y=L.suffix[b].stats;y&&Object.keys(y).forEach(x=>{u[x]+=y[x]})}}let g=u.name;if(u.prefixes.length>0&&(g=`${u.prefixes[Math.floor(Math.random()*u.prefixes.length)]} ${g}`),u.suffixes.length>0){const h=u.suffixes[Math.floor(Math.random()*u.suffixes.length)];g=`${g} ${h}`}return u.fullName=g,u}function I(t){const e=G[t.type]?.find(s=>s.name===t.name);if(!e){if(t.name==="Rusty Sword"||!t.prefixes&&!t.suffixes||console.warn("Base template not found for item:",t),t.prefixes||t.suffixes){const i={attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0};return t.prefixes&&t.prefixes.forEach(n=>{const c=L.prefix[n]?.stats;c&&Object.keys(c).forEach(r=>{i.hasOwnProperty(r)&&(i[r]+=c[r])})}),t.suffixes&&t.suffixes.forEach(n=>{const c=L.suffix[n]?.stats;c&&Object.keys(c).forEach(r=>{i.hasOwnProperty(r)&&(i[r]+=c[r])})}),{baseStats:{attack:(t.attack||0)-i.attack,maxHp:(t.maxHp||0)-i.maxHp,attackSpeed:(t.attackSpeed||0)-i.attackSpeed,critChance:(t.critChance||0)-i.critChance,critDamage:(t.critDamage||0)-i.critDamage,dodge:(t.dodge||0)-i.dodge,blockChance:(t.blockChance||0)-i.blockChance},affixStats:i}}return{baseStats:{attack:t.attack||0,maxHp:t.maxHp||0,attackSpeed:t.attackSpeed||0,critChance:t.critChance||0,critDamage:t.critDamage||0,dodge:t.dodge||0,blockChance:t.blockChance||0},affixStats:{attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0}}}const l={attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0};return t.prefixes&&t.prefixes.forEach(s=>{const i=L.prefix[s]?.stats;i&&Object.keys(i).forEach(n=>{l.hasOwnProperty(n)&&(l[n]+=i[n])})}),t.suffixes&&t.suffixes.forEach(s=>{const i=L.suffix[s]?.stats;i&&Object.keys(i).forEach(n=>{l.hasOwnProperty(n)&&(l[n]+=i[n])})}),{baseStats:{attack:e.attack||0,maxHp:e.maxHp||0,attackSpeed:e.attackSpeed||0,critChance:e.critChance||0,critDamage:e.critDamage||0,dodge:e.dodge||0,blockChance:e.blockChance||0},affixStats:l}}const S={common:{name:"Common",color:"#9CA3AF",chance:50,affixCount:0,prefix:[],suffix:[],priceMultiplier:1},uncommon:{name:"Uncommon",color:"#10B981",chance:30,affixCount:1,prefix:["Sturdy","Sharp","Keen","Fine"],suffix:["of Power","of Might","of the Warrior"],priceMultiplier:1.5},rare:{name:"Rare",color:"#3B82F6",chance:15,affixCount:2,prefix:["Masterwork","Superior","Enhanced","Reinforced"],suffix:["of the Elite","of Excellence","of the Champion","of Mastery"],priceMultiplier:2.5},epic:{name:"Epic",color:"#8B5CF6",chance:4,affixCount:3,prefix:["Legendary","Ancient","Mythical","Heroic","Blessed","Cursed"],suffix:["of the Gods","of Legends","of Heroes","of Destiny","of the Void","of Strength"],priceMultiplier:4},legendary:{name:"Legendary",color:"#F59E0B",chance:1,affixCount:5,prefix:["Divine","Celestial","Eternal","Transcendent","Omnipotent","Radiant"],suffix:["of the Immortals","of Eternity","of the Divine","of Transcendence","of Infinity","of the Cosmos"],priceMultiplier:8}},L={prefix:{Sturdy:{stats:{maxHp:15,blockChance:2,baseValue:5},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Sharp:{stats:{attack:2,critChance:3},allowedTypes:["weapon"]},Keen:{stats:{critChance:5,critDamage:8},allowedTypes:["weapon","necklace","ring"]},Fine:{stats:{attack:1,maxHp:5,attackSpeed:2},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Masterwork:{stats:{attack:4,maxHp:10,critChance:3},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},Superior:{stats:{attack:3,critDamage:10},allowedTypes:["weapon","necklace","ring"]},Enhanced:{stats:{attackSpeed:8,dodge:5,critChance:3},allowedTypes:["weapon","boots","legs","necklace","ring"]},Reinforced:{stats:{maxHp:30,blockChance:8,dodge:2},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Legendary:{stats:{attack:6,critChance:8,critDamage:15},allowedTypes:["weapon"]},Ancient:{stats:{attack:5,maxHp:20,blockChance:5,baseValue:6},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Mythical:{stats:{critDamage:20,dodge:8},allowedTypes:["weapon","necklace","ring"]},Heroic:{stats:{attack:7,attackSpeed:12,critChance:10},allowedTypes:["weapon"]},Blessed:{stats:{maxHp:25,dodge:6,blockChance:6,baseValue:25},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]},Cursed:{stats:{attack:8,critChance:12,critDamage:18,attackSpeed:10},allowedTypes:["weapon","necklace","ring"]},Divine:{stats:{attack:10,critChance:15,critDamage:25},allowedTypes:["weapon","necklace","ring"]},Celestial:{stats:{maxHp:40,blockChance:15,dodge:12,attackSpeed:15},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Eternal:{stats:{attack:8,maxHp:30,critDamage:30},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Transcendent:{stats:{attack:12,critChance:20,dodge:15,attackSpeed:20},allowedTypes:["weapon","boots","legs","necklace","ring"]},Omnipotent:{stats:{attack:15,critChance:18,critDamage:35},allowedTypes:["weapon","necklace","ring"]},Radiant:{stats:{maxHp:50,dodge:18,attackSpeed:25,blockChance:20,baseValue:32},allowedTypes:["helmet","body","legs","boots","belt","offhand"]}},suffix:{"of Power":{stats:{attack:3},allowedTypes:["weapon","necklace","ring"]},"of Might":{stats:{attack:2,critDamage:5},allowedTypes:["weapon"]},"of the Warrior":{stats:{attack:1,maxHp:10,blockChance:3,baseValue:10},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},"of the Elite":{stats:{attack:4,critChance:5,attackSpeed:5},allowedTypes:["weapon","necklace","ring"]},"of Excellence":{stats:{critChance:8,critDamage:12},allowedTypes:["weapon","necklace","ring"]},"of the Champion":{stats:{attack:3,maxHp:15,dodge:5},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},"of Mastery":{stats:{attackSpeed:10,critChance:6,dodge:6},allowedTypes:["weapon","boots","legs","necklace","ring"]},"of the Gods":{stats:{attack:8,critChance:12,critDamage:20},allowedTypes:["weapon"]},"of Legends":{stats:{maxHp:30,blockChance:12,baseValue:14},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Heroes":{stats:{attack:6,attackSpeed:15,dodge:10},allowedTypes:["weapon","boots","legs"]},"of Destiny":{stats:{critDamage:25,attackSpeed:12},allowedTypes:["weapon","necklace","ring"]},"of the Void":{stats:{attack:7,critChance:10,dodge:12},allowedTypes:["weapon","necklace","ring"]},"of Strength":{stats:{attack:9,critDamage:22,attackSpeed:8},allowedTypes:["weapon","belt","necklace","ring"]},"of the Immortals":{stats:{attack:10,maxHp:40,blockChance:15,baseValue:27},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Eternity":{stats:{critChance:20,critDamage:35,attackSpeed:25},allowedTypes:["weapon","necklace","ring"]},"of the Divine":{stats:{attack:12,maxHp:50,dodge:20},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Transcendence":{stats:{attack:15,critChance:25,critDamage:40,attackSpeed:30},allowedTypes:["weapon","necklace","ring"]},"of Infinity":{stats:{attack:13,critChance:22,critDamage:38,dodge:16},allowedTypes:["weapon","necklace","ring"]},"of the Cosmos":{stats:{maxHp:60,attackSpeed:28,blockChance:18,baseValue:45},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]}}},G={weapon:[{name:"Sword",attack:10,maxHp:0,attackSpeed:0,baseAttackInterval:2e3,critChance:5,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,handType:"1h",baseValue:5},{name:"Axe",attack:15,maxHp:0,attackSpeed:0,baseAttackInterval:2800,critChance:8,critDamage:15,lifeSteal:0,dodge:0,blockChance:0,handType:"1h",baseValue:5},{name:"Mace",attack:12,maxHp:0,attackSpeed:0,baseAttackInterval:2400,critChance:2,critDamage:0,lifeSteal:0,dodge:0,blockChance:5,handType:"1h",baseValue:5},{name:"Dagger",attack:6,maxHp:0,attackSpeed:0,baseAttackInterval:1600,critChance:12,critDamage:20,lifeSteal:0,dodge:8,blockChance:0,handType:"1h",baseValue:5},{name:"Staff",attack:8,maxHp:0,attackSpeed:0,baseAttackInterval:2200,critChance:10,critDamage:25,lifeSteal:0,dodge:0,blockChance:0,handType:"1h",baseValue:5},{name:"Greatsword",attack:20,maxHp:0,attackSpeed:0,baseAttackInterval:3200,critChance:3,critDamage:25,lifeSteal:0,dodge:0,blockChance:0,handType:"2h",baseValue:5},{name:"Battleaxe",attack:25,maxHp:0,attackSpeed:0,baseAttackInterval:3600,critChance:5,critDamage:30,lifeSteal:0,dodge:0,blockChance:0,handType:"2h",baseValue:5},{name:"Warhammer",attack:22,maxHp:0,attackSpeed:0,baseAttackInterval:3400,critChance:1,critDamage:0,lifeSteal:0,dodge:0,blockChance:8,handType:"2h",baseValue:5}],offhand:[{name:"Buckler",attack:0,maxHp:40,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:15,baseValue:5},{name:"Round Shield",attack:0,maxHp:60,attackSpeed:-5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:20,baseValue:5},{name:"Tower Shield",attack:0,maxHp:18,attackSpeed:-10,critChance:0,critDamage:0,lifeSteal:0,dodge:-5,blockChance:30,baseValue:5},{name:"Tome",attack:3,maxHp:0,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,baseValue:5}],helmet:[{name:"Helmet",attack:0,maxHp:5,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:3,baseValue:5},{name:"Cap",attack:0,maxHp:3,attackSpeed:2,critChance:0,critDamage:0,lifeSteal:0,dodge:2,blockChance:0,baseValue:5},{name:"Crown",attack:0,maxHp:20,attackSpeed:0,critChance:3,critDamage:5,lifeSteal:0,dodge:0,blockChance:0,baseValue:6},{name:"Hood",attack:0,maxHp:10,attackSpeed:3,critChance:2,critDamage:0,lifeSteal:0,dodge:5,blockChance:0,baseValue:5}],body:[{name:"Armor",attack:0,maxHp:60,attackSpeed:-5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:8,baseValue:5},{name:"Robe",attack:0,maxHp:40,attackSpeed:5,critChance:5,critDamage:10,lifeSteal:2,dodge:0,blockChance:0,baseValue:5},{name:"Vest",attack:0,maxHp:50,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:3,blockChance:2,baseValue:5},{name:"Tunic",attack:0,maxHp:30,attackSpeed:8,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:0,baseValue:5}],legs:[{name:"Greaves",attack:0,maxHp:40,attackSpeed:-3,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:5,baseValue:5},{name:"Pants",attack:0,maxHp:30,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:0,dodge:3,blockChance:0,baseValue:5},{name:"Leggings",attack:0,maxHp:7,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:2,blockChance:2,baseValue:5},{name:"Shorts",attack:0,maxHp:20,attackSpeed:10,critChance:2,critDamage:0,lifeSteal:0,dodge:8,blockChance:0,baseValue:5}],boots:[{name:"Sandals",attack:0,maxHp:10,attackSpeed:8,critChance:0,critDamage:0,lifeSteal:0,dodge:8,blockChance:0,baseValue:5},{name:"Boots",attack:0,maxHp:5,attackSpeed:3,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:0,baseValue:5},{name:"Heavy Boots",attack:0,maxHp:40,attackSpeed:-3,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:5,baseValue:5},{name:"Speed Boots",attack:0,maxHp:3,attackSpeed:15,critChance:2,critDamage:0,lifeSteal:0,dodge:12,blockChance:0,baseValue:5}],belt:[{name:"Leather Belt",attack:0,maxHp:1,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,baseValue:5},{name:"Utility Belt",attack:0,maxHp:0,attackSpeed:5,critChance:3,critDamage:0,lifeSteal:0,dodge:3,blockChance:0,baseValue:5},{name:"Chain Belt",attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:3,baseValue:5},{name:"War Belt",attack:0,maxHp:0,attackSpeed:0,critChance:5,critDamage:8,lifeSteal:0,dodge:0,blockChance:0,baseValue:5}],necklace:[{name:"Amulet",attack:0,maxHp:0,attackSpeed:0,critChance:8,critDamage:15,lifeSteal:0,dodge:0,blockChance:0,baseValue:5},{name:"Pendant",attack:0,maxHp:0,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:5,dodge:0,blockChance:0,baseValue:5}],ring:[{name:"Ring",attack:0,maxHp:0,attackSpeed:3,critChance:5,critDamage:8,lifeSteal:0,dodge:0,blockChance:0,baseValue:5},{name:"Bracelet",attack:0,maxHp:0,attackSpeed:8,critChance:6,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,baseValue:5}]};function de(t,a,e){const l=a.getElementById("zone-buttons"),s={forest:{level:1},cave:{level:5,message:"The Mysterious Cave is now accessible!"},goblinCave:{level:8,message:"You discovered the Goblin Cave!"},mountain:{level:12,message:"The Snowy Mountains path has opened!"}};let i={};for(const c in s)i[c]={...s[c]};const n=Object.entries(t.zones).sort(([,c],[,r])=>(c.zoneNumber||0)-(r.zoneNumber||0));for(const[c,r]of n){const d=a.createElement("button"),u=t.unlockedZones.includes(c);d.className=`zone-btn ${c==="town"?"town":""} ${u?"":"locked"}`,d.textContent=r.name,d.setAttribute("data-zone",c),console.log(c),u?d.addEventListener("click",()=>R(t,a,c,e)):d.addEventListener("click",()=>{const p=i[c];p?t.addLogMessage(`This zone is locked. Reach level ${p.level} to unlock it!`,"system"):t.addLogMessage("This zone is locked. Complete more areas to unlock it!","system")}),u?r.enemies&&r.enemies.length>0?(d.addEventListener("mouseenter",p=>{D(t,p,c,r,!0)}),d.addEventListener("mouseleave",()=>{q()}),d.addEventListener("mousemove",p=>{$(p)})):(d.addEventListener("mouseenter",p=>{D(t,p,c,r,!0)}),d.addEventListener("mouseleave",()=>{q()}),d.addEventListener("mousemove",p=>{$(p)})):(d.addEventListener("mouseenter",p=>{const g=i[c]?{...i[c]}:null;D(t,p,c,r,!1,g)}),d.addEventListener("mouseleave",()=>{q()}),d.addEventListener("mousemove",p=>{$(p)})),l.appendChild(d)}}function Q(t,a){const e=t.player.level;let l=!1;const s={forest:{level:1},cave:{level:5,message:"The Mysterious Cave is now accessible!"},goblinCave:{level:8,message:"You discovered the Goblin Cave!"},mountain:{level:12,message:"The Snowy Mountains path has opened!"}};let i={};for(const n in s)i[n]={...s[n]};for(const[n,c]of Object.entries(i))!t.unlockedZones.includes(n)&&e>=c.level&&(t.unlockedZones.push(n),t.addLogMessage(c.message,"system"),l=!0);pe(t,a),l&&me(t)}function D(t,a,e,l,s,i=null){const n=document.getElementById("zone-tooltip"),c=document.getElementById("zone-tooltip-icon"),r=document.getElementById("zone-tooltip-title"),d=document.getElementById("zone-tooltip-description"),u=document.getElementById("zone-tooltip-content");if(!n||!c||!r||!d||!u)return;n.style.display="block",setTimeout(()=>n.classList.add("visible"),10);const p={forest:"🌲",cave:"🕳️",goblinCave:"👹",mountain:"🏔️"};c.textContent=p[e]||"🗺️",r.textContent=l.name,d.textContent=l.description;let g="";if(l.enemies&&l.enemies.length>0&&(g+=`
      <div class="zone-tooltip-enemies">
        <div class="zone-tooltip-enemies-title">⚔️ Enemies:</div>
        <div class="zone-tooltip-enemy-list">
          ${l.enemies.map(h=>`• ${h.name} (HP: ${h.hp}, ATK: ${h.attack})`).join("<br>")}
        </div>
      </div>
    `),e==="goblinCave"&&l.boss&&(g+=`
      <div class="zone-tooltip-boss">
        <div class="zone-tooltip-boss-title">👑 Boss: ${l.boss.name}</div>
        <div class="zone-tooltip-boss-info">HP: ${l.boss.hp}, ATK: ${l.boss.attack}<br>Requires ${l.boss.requiredKills} goblin kills<br>Drops legendary items!</div>
      </div>
    `),!s)if(i){const h=t.player.level;g+=`
        <div class="zone-tooltip-unlock">
          <div class="zone-tooltip-unlock-title">🔒 Zone Locked</div>
          <div class="zone-tooltip-unlock-req">Required Level: ${i.level}</div>
          <div class="zone-tooltip-unlock-current">Current Level: ${h}</div>
        </div>
      `}else g+=`
        <div class="zone-tooltip-unlock">
          <div class="zone-tooltip-unlock-title">🔒 Zone Locked</div>
          <div class="zone-tooltip-unlock-req">Complete more areas to unlock</div>
        </div>
      `;u.innerHTML=g,n.style.display="block",n.classList.add("visible"),$(a)}function R(t,a,e,l){t.currentZone==="goblinCave"&&e!=="goblinCave"&&(t.zones.goblinCave.killCount=0),t.currentZone=e,t.currentEnemy=null,t.combat.isActive=!1,a.querySelectorAll(".zone-btn").forEach(n=>{n.classList.remove("active")}),console.log(e),a.querySelector(`[data-zone="${e}"]`).classList.add("active");const s=a.querySelector(".combat-area"),i=a.getElementById("shop-area");e==="restArea"?(s.style.display="grid",i.style.display="none",t.addLogMessage(`${t.zones[e].name} - ${t.zones[e].description}`,"system")):(s.style.display="grid",i.style.display="none",t.addLogMessage(`Entered ${t.zones[e].name}. ${t.zones[e].description}`,"system")),setTimeout(()=>l(),500)}function $(t){const a=document.getElementById("zone-tooltip");if(a&&a.style.display==="block"){const e=t.clientX+15,l=t.clientY+15,s=a.getBoundingClientRect(),i=window.innerWidth,n=window.innerHeight;let c=e,r=l;e+s.width>i&&(c=t.clientX-s.width-15),l+s.height>n&&(r=t.clientY-s.height-15),a.style.left=c+"px",a.style.top=r+"px"}}function pe(t,a){const e={forest:{level:1},cave:{level:5,message:"The Mysterious Cave is now accessible!"},goblinCave:{level:8,message:"You discovered the Goblin Cave!"},mountain:{level:12,message:"The Snowy Mountains path has opened!"}};let l={};for(const i in e)l[i]={...e[i]};document.querySelectorAll(".zone-btn").forEach(i=>{const n=i.getAttribute("data-zone"),c=t.zones[n],r=t.unlockedZones.includes(n),d=i.cloneNode(!0);i.parentNode.replaceChild(d,i),r?d.addEventListener("click",()=>R(t,document,n,a)):d.addEventListener("click",()=>{const u=l[n];u?t.addLogMessage(`This zone is locked. Reach level ${u.level} to unlock it!`,"system"):t.addLogMessage("This zone is locked. Complete more areas to unlock it!","system")}),r?(d.addEventListener("mouseenter",u=>{D(t,u,n,c,!0)}),d.addEventListener("mouseleave",()=>{q()}),d.addEventListener("mousemove",u=>{$(u)})):(d.addEventListener("mouseenter",u=>{const p=l[n]?{...l[n]}:null;D(t,u,n,c,!1,p)}),d.addEventListener("mouseleave",()=>{q()}),d.addEventListener("mousemove",u=>{$(u)}))})}function me(t){document.querySelectorAll(".zone-btn").forEach(e=>{const l=e.getAttribute("data-zone");if(t.unlockedZones.includes(l)&&e.classList.contains("locked")){e.classList.remove("locked");const i=e.cloneNode(!0);i.addEventListener("click",()=>R(t,document,l,startCombat));const n=t.zones[l];i.addEventListener("mouseenter",c=>{D(t,c,l,n,!0)}),i.addEventListener("mouseleave",()=>{q()}),i.addEventListener("mousemove",c=>{$(c)}),e.parentNode.replaceChild(i,e)}})}function q(){const t=document.getElementById("zone-tooltip");t&&(t.classList.remove("visible"),setTimeout(()=>{t.classList.contains("visible")||(t.style.display="none")},200))}function ue(t){const a=document.getElementById("boss-warning"),e=document.getElementById("boss-warning-name");e.textContent=t,a.style.display="block",setTimeout(()=>{a.style.display="none"},2e3)}function he(t){const a=document.getElementById("victory-message"),e=document.getElementById("victory-subtext");e.textContent=`The ${t} has been defeated!`,a.style.display="block",setTimeout(()=>{a.style.display="none"},4e3)}const fe={restArea:{name:"Rest Area",description:"A peaceful campsite where you can pause and relax. Nothing happens here.",zoneNumber:0,enemies:[],isRestArea:!0},basement:{name:"The Basement",description:"A damp, dark basement infested with weak rats. Perfect for beginners.",zoneNumber:1,enemies:[{name:"Sewer Rat",imageClass:"sewerRat",hp:25,attack:2,xp:5,gold:2,attackInterval:1800},{name:"Giant Rat",imageClass:"giantRat",hp:50,attack:4,xp:8,gold:5,attackInterval:3e3},{name:"Diseased Rat",imageClass:"diseasedRat",hp:30,attack:3,xp:6,gold:3,attackInterval:2200}]},forest:{name:"Dark Forest",description:"A mysterious forest filled with creatures",zoneNumber:2,enemies:[{name:"Slime",imageClass:"slime",hp:120,attack:4,xp:15,gold:5,attackInterval:3e3},{name:"Goblin",imageClass:"goblin",hp:40,attack:6,xp:25,gold:10,attackInterval:2e3},{name:"Wolf",imageClass:"wolf",hp:60,attack:12,xp:20,gold:8,attackInterval:2200}],dropChance:25,allowedRarities:["common","uncommon"]},cave:{name:"Mysterious Cave",description:"Deep caves with stronger monsters",zoneNumber:3,enemies:[{name:"Orc",imageClass:"orc",hp:120,attack:18,xp:35,gold:15,attackInterval:2800},{name:"Skeleton",imageClass:"skeleton",hp:100,attack:20,xp:30,gold:12,attackInterval:2300},{name:"Spider",imageClass:"spider",hp:90,attack:16,xp:28,gold:10,attackInterval:1800}],dropChance:30,allowedRarities:["common","uncommon","rare"]},mountain:{name:"Snowy Mountains",description:"Treacherous peaks with powerful foes",zoneNumber:5,enemies:[{name:"Yeti",imageClass:"yeti",hp:200,attack:25,xp:50,gold:25,attackInterval:3500},{name:"Dragon",imageClass:"dragon",hp:300,attack:35,xp:80,gold:50,attackInterval:3200},{name:"Giant",imageClass:"giant",hp:250,attack:30,xp:65,gold:35,attackInterval:4e3}],dropChance:35,allowedRarities:["common","uncommon","rare"]},goblinCave:{name:"Goblin Cave",description:"A dark cave infested with goblins. Defeat 15 goblins to face the Goblin King!",zoneNumber:4,enemies:[{name:"Goblin Runt",imageClass:"goblinRunt",hp:60,attack:10,xp:18,gold:7,attackInterval:2400},{name:"Goblin Shaman",imageClass:"goblinShaman",hp:85,attack:16,xp:28,gold:12,attackInterval:2800},{name:"Goblin Slinger",imageClass:"goblinSlinger",hp:75,attack:14,xp:22,gold:9,attackInterval:2100},{name:"Goblin Brute",imageClass:"goblinBrute",hp:110,attack:20,xp:35,gold:15,attackInterval:3200}],dropChance:40,allowedRarities:["common","uncommon","rare","epic"],boss:{name:"Goblin King",imageClass:"goblinKing",hp:400,attack:40,xp:150,gold:100,requiredKills:15,isLegendaryDropper:!0,attackInterval:2500,xp:150},killCount:0}};function ee(t,a){const e=a.getElementById("end-run-btn");e&&(e.textContent=`💀 ${t.currentDeathMessage}`,e.title=`End current run: ${t.currentDeathMessage}`)}function K(){return Y[Math.floor(Math.random()*Y.length)]}const Y=["Jump off a bridge","Lay facedown in a puddle","Starve yourself","Walk into a dragon's lair unarmed","Challenge a mountain troll to arm wrestling","Try to pet a wild bear","Swim with sharks while bleeding","Eat mysterious mushrooms","Sleep in a haunted cemetery","Juggle flaming torches blindfolded","Use a cursed sword as a toothpick","Tickle a sleeping giant","Dance on thin ice","Hug a cactus enthusiastically","Take a nap in quicksand","Play catch with a grenade","Use a lightning rod during a storm","Tell a vampire they have bad breath","Ask a kraken for directions","Wear meat clothing to a wolf den","Try to ride a wild griffin","Drink from the fountain of eternal poison","Challenge death to a game of chess","Use your head to test helmet durability","Go cave diving without oxygen","Practice sword swallowing with a real sword","Take a selfie with a basilisk","Use a nuclear reactor as a nightlight","Go bungee jumping with a rope that's too long","Try to milk a wild minotaur"];function ye(t,a){const e=a.getElementById("talent-tree-modal");e.style.display="none",t.isShowingTalentTree=!1,t.ascend()}function te(t,a){setTimeout(()=>{Object.keys(_).forEach(e=>{const l=_[e],s=a.getElementById(`pathway-${e}`);if(!s)return;let i=s.querySelector(".talent-nodes-container"),n=s.querySelector(".talent-connections");if(i||(i=a.getElementById(`${e}-nodes`)),n||(n=a.getElementById(`${e}-connections`)),!i||!n)return;i.innerHTML="",n.innerHTML="";const c=i.clientWidth||180,r=i.clientHeight||350,d=60,u=Math.max(...l.nodes.map(h=>h.position.x)),p=Math.max(...l.nodes.map(h=>h.position.y));if(u===0||p===0)return;const g={};l.nodes.forEach(h=>{const k=t.getTalentLevel(e,h.id),w=t.canAllocateTalent(e,h.id);let m=h.cost*(k+1);t.getTalentLevel("knowledge","knowledge_4")>0&&(m=Math.floor(m*.5));const f=h.position.x/u*(c-d)+d/2,b=h.position.y/p*(r-d)+d/2;g[h.id]={x:f,y:b};const y=a.createElement("div");y.className=`talent-node tier-${h.tier} ${k>0?"allocated":""} ${w?"available":"locked"}`,y.dataset.pathway=e,y.dataset.talent=h.id,y.style.left=`${f}px`,y.style.top=`${b}px`,y.innerHTML=`
          ${k>0?`<div class="purchase-counter">${k}</div>`:""}
          <div class="talent-icon">${h.icon}</div>
        `,y.addEventListener("mouseenter",x=>{ve(x,h,k,m)}),y.addEventListener("mouseleave",()=>{ke()}),y.addEventListener("mousemove",x=>{ne(x,a)}),y.addEventListener("click",()=>{t.canAllocateTalent(e,h.id)&&(t.allocateTalent(e,h.id),ae(t))}),i.appendChild(y)}),l.nodes.forEach(h=>{h.prerequisites&&h.prerequisites.length>0&&h.prerequisites.forEach(k=>{l.nodes.find(m=>m.id===k)&&g[h.id]&&g[k]&&ge(n,g[k],g[h.id],t.getTalentLevel(e,k)>0,t.canAllocateTalent(e,h.id))})})})},100)}function ge(t,a,e,l,s){const i=document.createElementNS("http://www.w3.org/2000/svg","line");i.setAttribute("x1",a.x),i.setAttribute("y1",a.y),i.setAttribute("x2",e.x),i.setAttribute("y2",e.y);let n="talent-connection-line";l&&(n+=" active"),s&&(n+=" available"),i.setAttribute("class",n),t.appendChild(i)}function ae(t){const a=document.getElementById("talent-gold");a&&(a.textContent=t.player.gold);const e=document.getElementById("talent-points");e&&(e.textContent=t.getTotalTalentPoints());const l=document.getElementById("ascension-count");l&&(l.textContent=t.ascensionCount),te(t,document)}function ve(t,a,e,l){const s=document.getElementById("talent-tooltip"),i=document.getElementById("talent-tooltip-name"),n=document.getElementById("talent-tooltip-level"),c=document.getElementById("talent-tooltip-description"),r=document.getElementById("talent-tooltip-effect"),d=document.getElementById("talent-tooltip-cost");s&&i&&n&&c&&r&&d&&(i.textContent=a.name,n.textContent=`${e}/${a.maxLevel}`,c.textContent=a.description,r.textContent=a.effect,e>=a.maxLevel?d.textContent="Max Level":d.textContent=`Cost: ${l} gold`,s.style.display="block",s.classList.add("visible"),ne(t,document))}function ke(){const t=document.getElementById("talent-tooltip");t&&(t.classList.remove("visible"),setTimeout(()=>{t.classList.contains("visible")||(t.style.display="none")},200))}function ne(t,a){const e=a.getElementById("talent-tooltip");if(e&&e.style.display==="block"){let l=t.clientX+12,s=t.clientY-8-e.offsetHeight;s<0&&(s=t.clientY+12);const i=e.getBoundingClientRect(),n=window.innerWidth,c=window.innerHeight;l+i.width>n&&(l=n-i.width-8),s+i.height>c&&(s=c-i.height-8),l<0&&(l=8),s<0&&(s=8),e.style.left=l+"px",e.style.top=s+"px"}}const _={power:{name:"Path of Power",icon:"⚔️",description:"Increase combat effectiveness",nodes:[{id:"power_1",name:"Warrior Training",icon:"💪",description:"Increase base attack power",effect:"+5 attack",stat:"attack",value:5,cost:40,maxLevel:5,tier:1,position:{x:2,y:0},prerequisites:[]},{id:"power_2a",name:"Weapon Mastery",icon:"🗡️",description:"Master weapon combat",effect:"+10% attack per level",cost:60,maxLevel:3,tier:2,position:{x:1,y:1},prerequisites:["power_1"]},{id:"power_2b",name:"Combat Mastery",icon:"🎯",description:"Improve critical hit chance",effect:"+2% critical chance per level",cost:60,maxLevel:3,tier:2,position:{x:3,y:1},prerequisites:["power_1"]},{id:"power_3a",name:"Berserker Rage",icon:"⚡",description:"Increase attack speed",effect:"+10% attack speed per level",cost:80,maxLevel:3,tier:3,position:{x:0,y:2},prerequisites:["power_2a"]},{id:"power_3b",name:"Precise Strikes",icon:"🔥",description:"Deadly precision",effect:"+15% critical damage per level",cost:85,maxLevel:4,tier:3,position:{x:2,y:2},prerequisites:["power_2a","power_2b"]},{id:"power_3c",name:"Battle Focus",icon:"🧠",description:"Mental fortitude in combat",effect:"+5% dodge chance and +3% block chance per level",cost:90,maxLevel:2,tier:3,position:{x:4,y:2},prerequisites:["power_2b"]},{id:"power_4",name:"Legendary Warrior",icon:"🏆",description:"Transcendent combat mastery",effect:"+50% damage, +25% crit chance, +20% attack speed",cost:300,tier:4,position:{x:2,y:3},prerequisites:["power_3a","power_3b","power_3c"]}]},wealth:{name:"Path of Wealth",icon:"💰",description:"Increase gold gain and rewards",nodes:[{id:"wealth_1",name:"Coin Collector",icon:"🪙",description:"Increase gold drops from enemies",effect:"+25% gold gain per level",cost:45,maxLevel:4,tier:1,position:{x:2,y:0},prerequisites:[]},{id:"wealth_2a",name:"Lucky Find",icon:"🍀",description:"Increase item drop chance",effect:"+10% item drop chance per level",cost:70,maxLevel:3,tier:2,position:{x:1,y:1},prerequisites:["wealth_1"]},{id:"wealth_2b",name:"Gold Rush",icon:"💸",description:"Bonus gold from streaks",effect:"Killing enemies without taking damage gives +5% gold per streak",cost:65,maxLevel:5,tier:2,position:{x:3,y:1},prerequisites:["wealth_1"]},{id:"wealth_3a",name:"Treasure Hunter",icon:"💎",description:"Higher chance for rare items",effect:"+15% chance for higher rarity per level",cost:90,maxLevel:2,tier:3,position:{x:0,y:2},prerequisites:["wealth_2a"]},{id:"wealth_3b",name:"Merchant Mind",icon:"🏪",description:"Better item values",effect:"Items sell for +20% more gold per level",cost:95,maxLevel:3,tier:3,position:{x:2,y:2},prerequisites:["wealth_2a","wealth_2b"]},{id:"wealth_3c",name:"Golden Streak",icon:"🌟",description:"Massive streak bonuses",effect:"Gold streak bonuses last 50% longer per level",cost:100,maxLevel:2,tier:3,position:{x:4,y:2},prerequisites:["wealth_2b"]},{id:"wealth_4",name:"Golden Touch",icon:"✨",description:"Midas-like power",effect:"Double gold gain, +50% item drops, items have 10% chance to duplicate",cost:350,tier:4,position:{x:2,y:3},prerequisites:["wealth_3a","wealth_3b","wealth_3c"]}]},knowledge:{name:"Path of Knowledge",icon:"📚",description:"Increase experience gain",nodes:[{id:"knowledge_1",name:"Quick Learner",icon:"📖",description:"Gain experience faster",effect:"+20% experience gain per level",cost:35,maxLevel:5,tier:1,position:{x:2,y:0},prerequisites:[]},{id:"knowledge_2a",name:"Battle Wisdom",icon:"⚔️",description:"Bonus XP from combat victories",effect:"+50% bonus XP from defeating enemies per level",cost:55,maxLevel:3,tier:2,position:{x:1,y:1},prerequisites:["knowledge_1"]},{id:"knowledge_2b",name:"Study Habits",icon:"📝",description:"Efficient learning methods",effect:"Gain bonus XP equal to 5% of current level every 60 seconds",cost:50,maxLevel:4,tier:2,position:{x:3,y:1},prerequisites:["knowledge_1"]},{id:"knowledge_3a",name:"Master Scholar",icon:"🎓",description:"Reduce XP requirements for leveling",effect:"-10% XP needed per level (max 30%)",cost:85,maxLevel:3,tier:3,position:{x:0,y:2},prerequisites:["knowledge_2a"]},{id:"knowledge_3b",name:"Experience Burst",icon:"💫",description:"Burst learning periods",effect:"Every 10th enemy gives 5x experience",cost:90,maxLevel:2,tier:3,position:{x:2,y:2},prerequisites:["knowledge_2a","knowledge_2b"]},{id:"knowledge_3c",name:"Passive Learning",icon:"🧘",description:"Learn while inactive",effect:"Gain XP over time even when not fighting",cost:80,maxLevel:3,tier:3,position:{x:4,y:2},prerequisites:["knowledge_2b"]},{id:"knowledge_4",name:"Enlightened One",icon:"🔮",description:"Transcendent learning abilities",effect:"Triple XP gain, start at level 5, reduce talent costs by 50%",cost:400,tier:4,position:{x:2,y:3},prerequisites:["knowledge_3a","knowledge_3b","knowledge_3c"]}]}};function be(t,a,e,l){["weapon","helmet","body","legs","accessory1","accessory2","belt","boots","offhand"].forEach(n=>{const c=a.getElementById(`${n}-tooltip`);c&&(c.innerHTML="",c.style.display="none")}),a.querySelectorAll(".tooltip, .zone-tooltip, .stat-tooltip").forEach(n=>{n.style.display="none",n.innerHTML=""})}function j(t,a,e,l,s=!1){const i=a.getElementById("inventory-tooltip");if(!i||!l)return;const n=t.player.equipment[l.type],c=S[l.rarity]||S.common,r=n?S[n.rarity]||S.common:null;let d=`<div class="tooltip-title" style="color: ${c.color};">${H(l)}</div>`;d+=`<div class="tooltip-item-type">${l.type.charAt(0).toUpperCase()+l.type.slice(1)}</div>`;const{baseStats:u,affixStats:p}=I(l),g=[],h=[];if(u.attack>0){let m=`${u.attack} Base Attack`;if(s&&n){const{baseStats:v}=I(n),f=u.attack-v.attack;f>0?m=`<div class="stat-gain">${m} (+${f})</div>`:f<0?m=`<div class="stat-loss">${m} (${f})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-base">${m}</div>`;g.push(m)}if(l.type==="weapon"&&l.baseAttackInterval){let m=`${(l.baseAttackInterval/1e3).toFixed(1)}s Base Attack Speed`;if(s&&n){const v=n.baseAttackInterval||2e3,f=l.baseAttackInterval-v;f>0?m=`<div class="stat-loss">${m} (+${(f/1e3).toFixed(1)}s)</div>`:f<0?m=`<div class="stat-gain">${m} (${(f/1e3).toFixed(1)}s)</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-base">${m}</div>`;g.push(m)}if(u.maxHp>0){let m=`${u.maxHp} Max HP`;if(s&&n){const{baseStats:v}=I(n),f=u.maxHp-v.maxHp;f>0?m=`<div class="stat-gain">${m} (+${f})</div>`:f<0?m=`<div class="stat-loss">${m} (${f})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-base">${m}</div>`;g.push(m)}const k=[{key:"attackSpeed",label:"Attack Speed",unit:"%"},{key:"critChance",label:"Crit Chance",unit:"%"},{key:"critDamage",label:"Crit Damage",unit:"%"},{key:"lifeSteal",label:"Life Steal",unit:"%"},{key:"dodge",label:"Dodge",unit:"%"},{key:"blockChance",label:"Block Chance",unit:"%"}];if(k.forEach(({key:m,label:v,unit:f})=>{if(u[m]>0){let y=`${u[m]}${f} ${v}`;if(s&&n){const{baseStats:x}=I(n),C=u[m]-x[m];C>0?y=`<div class="stat-gain">${y} (${C}${f})</div>`:C<0?y=`<div class="stat-loss">${y} (${C}${f})</div>`:y=`<div class="stat-neutral">${y}</div>`}else y=`<div class="stat-base">${y}</div>`;g.push(y)}}),p.attack>0){let m=`${p.attack} Attack`;if(s&&n){const{affixStats:v}=I(n),f=p.attack-v.attack;f>0?m=`<div class="stat-gain">${m} (+${f})</div>`:f<0?m=`<div class="stat-loss">${m} (${f})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-neutral">${m}</div>`;h.push(m)}if(p.maxHp>0){let m=`${p.maxHp} Max HP`;if(s&&n){const{affixStats:v}=I(n),f=p.maxHp-v.maxHp;f>0?m=`<div class="stat-gain">${m} (+${f})</div>`:f<0?m=`<div class="stat-loss">${m} (${f})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-neutral">${m}</div>`;h.push(m)}if(k.forEach(({key:m,label:v,unit:f})=>{if(p[m]>0){let y=`${p[m]}${f} ${v}`;if(s&&n){const{affixStats:x}=I(n),C=p[m]-x[m];C>0?y=`<div class="stat-gain">${y} (${C}${f})</div>`:C<0?y=`<div class="stat-loss">${y} (${C}${f})</div>`:y=`<div class="stat-neutral">${y}</div>`}else y=`<div class="stat-neutral">${y}</div>`;h.push(y)}}),d+=g.join(""),g.length>0&&h.length>0&&(d+='<div class="tooltip-separator"></div>'),d+=h.join(""),s&&n){const{baseStats:m,affixStats:v}=I(n),f=[];[{key:"attack",label:"Attack",unit:"",isBase:!0},{key:"maxHp",label:"Max HP",unit:"",isBase:!0},{key:"attackSpeed",label:"Attack Speed",unit:"%",isBase:!0},{key:"critChance",label:"Crit Chance",unit:"%",isBase:!0},{key:"critDamage",label:"Crit Damage",unit:"%",isBase:!0},{key:"lifeSteal",label:"Life Steal",unit:"%",isBase:!0},{key:"dodge",label:"Dodge",unit:"%",isBase:!0},{key:"blockChance",label:"Block Chance",unit:"%",isBase:!0}].forEach(({key:y,label:x,unit:C})=>{const E=(m[y]||0)+(v[y]||0),oe=(u[y]||0)+(p[y]||0);E>0&&oe===0&&f.push(`<div class="stat-missing">${x}: ${E}${C} → 0${C} (-${E}${C})</div>`)}),f.length>0&&(d+='<div class="tooltip-separator"></div>',d+=f.join("")),d+=`<div class="tooltip-comparison">Compared to: <span style="color: ${r.color};">${H(n)}</span></div>`}else n?d+='<div class="tooltip-comparison">Hold Shift for detailed comparison</div>':d+=`<div class="tooltip-comparison">No ${l.type} equipped</div>`;const w=Math.floor((l.price!==void 0?l.price:10)*.5);d+=`<div class="tooltip-sell-info">Right click to sell for ${w} gold</div>`,i.innerHTML=d,i.style.display="block",se(e,a)}function F(){const t=document.getElementById("inventory-tooltip");t&&(t.style.display="none")}function se(t,a){const e=a.getElementById("inventory-tooltip");if(!e)return;const l=e.getBoundingClientRect(),s=window.innerWidth,i=window.innerHeight;let n=t.clientX+10,c=t.clientY+10;n+l.width>s&&(n=t.clientX-l.width-10),c+l.height>i&&(c=t.clientY-l.height-10),n=Math.max(5,n),c=Math.max(5,c),e.style.left=n+"px",e.style.top=c+"px"}function xe(t,a,e){const l=document.getElementById("stats-tooltip"),s=document.getElementById("stats-tooltip-name"),i=document.getElementById("stats-tooltip-content");if(l&&s&&i){let n="";const c={attack:{key:"attack",label:"Attack",unit:""},hp:{key:"maxHp",label:"Max HP",unit:""},"attack-speed":{key:"attackSpeed",label:"Attack Speed",unit:"ms"},"crit-chance":{key:"critChance",label:"Crit Chance",unit:"%"},"crit-damage":{key:"critDamage",label:"Crit Damage",unit:"%"},"life-steal":{key:"lifeSteal",label:"Life Steal",unit:"%"},dodge:{key:"dodge",label:"Dodge",unit:"%"},"block-chance":{key:"blockChance",label:"Block Chance",unit:"%"}};if(c[e]){const{key:r,label:d,unit:u}=c[e];s.textContent=`${d} Breakdown`;let p="";const g=r==="attack"?t.player.baseAttack+(t.player.level-1)*2:r==="maxHp"?t.player.baseHp+(t.player.level-1)*10:r==="attackSpeed"?t.player.equipment.weapon.baseAttackInterval:t.player[`base${d.replace(/ /g,"")}`]??0;p+=`
        <div class="stat-breakdown-item">
          <span>Base:</span>
          <span class="stat-breakdown-value">${g}${u}</span>
        </div>
      `;let h=0;for(const v in t.player.equipment){const f=t.player.equipment[v];f&&f[r]&&f[r]!==0&&(p+=`
            <div class="stat-breakdown-item">
              <span>${f.fullName||f.name} (${v}):</span>
              <span class="stat-breakdown-value">+${f[r]}${r==="attackSpeed"?"%":u}</span>
            </div>
          `,h+=f[r])}h===0&&(p+=`
          <div class="stat-breakdown-item">
            <span>Equipment:</span>
            <span class="stat-breakdown-value">+0${r==="attackSpeed"?"%":u}</span>
          </div>
        `);let k=0;for(const v in _){const f=_[v];for(const b of f.nodes)if(b.stat&&b.stat===r){const y=t.getTalentLevel(v,b.id);if(y>0){let x=0;typeof b.value=="function"?x=b.value(y):Array.isArray(b.value)?x=b.value[y-1]||0:x=(b.value||0)*y,p+=`
                <div class="stat-breakdown-item">
                  <span>${b.name} (Talent):</span>
                  <span class="stat-breakdown-value">+${x}${r==="attackSpeed"?"%":u}</span>
                </div>
              `,k+=x}}}k===0&&(p+=`
          <div class="stat-breakdown-item">
            <span>Talents:</span>
            <span class="stat-breakdown-value">+0${r==="attackSpeed"?"%":u}</span>
          </div>
        `);let m=g+h+k;if(typeof t[`getPlayer${d.replace(/ /g,"")}`]=="function")try{m=t[`getPlayer${d.replace(/ /g,"")}`]()}catch{}p+=`
        <div class="stat-breakdown-item total">
          <span>Total ${d}:</span>
          <span class="stat-breakdown-value">${m}${u}</span>
        </div>
      `,n=p}else if(e==="xp-multiplier"){const d=t.getTalentLevel("knowledge","knowledge_1"),u=t.getTalentLevel("knowledge","knowledge_2a"),p=t.getTalentLevel("knowledge","asc_knowledge_1"),g=t.getExperienceMultiplier();s.textContent="Experience Multiplier Breakdown",n=`
        <div class="stat-breakdown-item">
          <span>Base Multiplier:</span>
          <span class="stat-breakdown-value">${1 .toFixed(2)}x</span>
        </div>
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Quick Learner (Lv${d}):</span>
          <span class="stat-breakdown-value">+${(d*.2).toFixed(2)}x</span>
        </div>
        `:""}
        ${u>0?`
        <div class="stat-breakdown-item">
          <span>Battle Wisdom (Lv${u}):</span>
          <span class="stat-breakdown-value">+${(u*.5).toFixed(2)}x</span>
        </div>
        `:""}
        ${p>0?`
        <div class="stat-breakdown-item">
          <span>Enlightened One (Ascendancy):</span>
          <span class="stat-breakdown-value">×3.00x</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Experience Multiplier:</span>
          <span class="stat-breakdown-value">${g.toFixed(2)}x</span>
        </div>
      `}else if(e==="gold-multiplier"){const d=t.getTalentLevel("wealth","wealth_1"),u=t.getTalentLevel("wealth","asc_wealth_1"),p=t.getGoldMultiplier();s.textContent="Gold Multiplier Breakdown",n=`
        <div class="stat-breakdown-item">
          <span>Base Multiplier:</span>
          <span class="stat-breakdown-value">${1 .toFixed(2)}x</span>
        </div>
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Coin Collector (Lv${d}):</span>
          <span class="stat-breakdown-value">+${(d*.25).toFixed(2)}x</span>
        </div>
        `:""}
        ${u>0?`
        <div class="stat-breakdown-item">
          <span>Golden Touch (Ascendancy):</span>
          <span class="stat-breakdown-value">×2.00x</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Gold Multiplier:</span>
          <span class="stat-breakdown-value">${p.toFixed(2)}x</span>
        </div>
      `}else if(e==="item-drop-chance"){const d=t.getTalentLevel("wealth","wealth_2a"),u=t.getTalentLevel("wealth","asc_wealth_1"),p=t.getItemDropMultiplier();s.textContent="Item Drop Chance Breakdown",n=`
        <div class="stat-breakdown-item">
          <span>Base Drop Chance:</span>
          <span class="stat-breakdown-value">25%</span>
        </div>
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Lucky Find (Lv${d}):</span>
          <span class="stat-breakdown-value">+${(d*10).toFixed(0)}%</span>
        </div>
        `:""}
        ${u>0?`
        <div class="stat-breakdown-item">
          <span>Golden Touch (Ascendancy):</span>
          <span class="stat-breakdown-value">+50%</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Drop Chance:</span>
          <span class="stat-breakdown-value">${(25*p).toFixed(0)}%</span>
        </div>
      `}i.innerHTML=n,l.style.display="block",l.classList.add("visible"),le(a,document)}}function we(){const t=document.getElementById("stats-tooltip");t&&(t.classList.remove("visible"),setTimeout(()=>{t.classList.contains("visible")||(t.style.display="none")},200))}function le(t,a){const e=a.getElementById("stats-tooltip");if(e&&e.style.display==="block"){const l=t.clientX+10,s=t.clientY+10,i=e.getBoundingClientRect(),n=window.innerWidth,c=window.innerHeight;let r=l,d=s;l+i.width>n&&(r=t.clientX-i.width-10),s+i.height>c&&(d=t.clientY-i.height-10),e.style.left=`${r}px`,e.style.top=`${d}px`}}function Ce(t,a,e){const l=S[e.rarity]||S.common,s=l.color;if(!e.type){for(const[p,g]of Object.entries(t.player.equipment))if(g===e){e.type=p;break}}if(!e.type){const p=[];e.attack&&p.push(`<div class="tooltip-stat-line"><span>Attack:</span><span>${e.attack}</span></div>`),e.maxHp&&p.push(`<div class="tooltip-stat-line"><span>Max HP:</span><span>${e.maxHp}</span></div>`),e.baseAttackInterval&&p.push(`<div class="tooltip-stat-line"><span>Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),e.attackSpeed&&p.push(`<div class="tooltip-stat-line"><span>Attack Speed:</span><span>${e.attackSpeed}%</span></div>`),e.critChance&&p.push(`<div class="tooltip-stat-line"><span>Critical Chance:</span><span>${e.critChance}%</span></div>`),e.critDamage&&p.push(`<div class="tooltip-stat-line"><span>Critical Damage:</span><span>${e.critDamage}%</span></div>`),e.dodge&&p.push(`<div class="tooltip-stat-line"><span>Dodge:</span><span>${e.dodge}%</span></div>`),e.blockChance&&p.push(`<div class="tooltip-stat-line"><span>Block Chance:</span><span>${e.blockChance}%</span></div>`),a.innerHTML=`
      <div class="tooltip-name" style="color: ${s};">
        ${H(e)}
      </div>
      <div class="tooltip-stats">
        ${p.join("")}
      </div>
      <div class="tooltip-rarity" style="color: ${s};">
        ${l.name}
      </div>
    `;return}const{baseStats:i,affixStats:n}=I(e);if(!i||!n){console.error("Error separating item stats:",e);const p=[];e.attack&&p.push(`<div class="tooltip-stat-line stat-base"><span>Attack:</span><span>${e.attack}</span></div>`),e.maxHp&&p.push(`<div class="tooltip-stat-line stat-base"><span>Max HP:</span><span>${e.maxHp}</span></div>`),e.baseAttackInterval&&p.push(`<div class="tooltip-stat-line stat-base"><span>Base Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),e.attackSpeed&&p.push(`<div class="tooltip-stat-line stat-base"><span>Attack Speed:</span><span>${e.attackSpeed}%</span></div>`),e.critChance&&p.push(`<div class="tooltip-stat-line stat-base"><span>Critical Chance:</span><span>${e.critChance}%</span></div>`),e.critDamage&&p.push(`<div class="tooltip-stat-line stat-base"><span>Critical Damage:</span><span>${e.critDamage}%</span></div>`),e.dodge&&p.push(`<div class="tooltip-stat-line stat-base"><span>Dodge:</span><span>${e.dodge}%</span></div>`),e.blockChance&&p.push(`<div class="tooltip-stat-line stat-base"><span>Block Chance:</span><span>${e.blockChance}%</span></div>`),a.innerHTML=`
      <div class="tooltip-name" style="color: ${s};">
        ${H(e)}
      </div>
      <div class="tooltip-stats">
        ${p.join("")}
      </div>
      <div class="tooltip-rarity" style="color: ${s};">
        ${l.name}
      </div>
    `;return}const c=[],r=[];(e.type==="weapon"||i.attack>0)&&c.push(`<div class="tooltip-stat-line stat-base"><span>Attack:</span><span>${i.attack}</span></div>`),e.type==="weapon"&&e.baseAttackInterval&&c.push(`<div class="tooltip-stat-line stat-base"><span>Base Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),(["helmet","body","legs","boots","offhand"].includes(e.type)||i.maxHp>0)&&c.push(`<div class="tooltip-stat-line stat-base"><span>Max HP:</span><span>${i.maxHp}</span></div>`);const d=[{key:"attackSpeed",label:"Attack Speed",unit:"%"},{key:"critChance",label:"Critical Chance",unit:"%"},{key:"critDamage",label:"Critical Damage",unit:"%"},{key:"lifeSteal",label:"Life Steal",unit:"%"},{key:"dodge",label:"Dodge",unit:"%"},{key:"blockChance",label:"Block Chance",unit:"%"}];d.forEach(({key:p,label:g,unit:h})=>{i[p]>0&&c.push(`<div class="tooltip-stat-line stat-base"><span>${g}:</span><span>${i[p]}${h}</span></div>`)}),n.attack>0&&r.push(`<div class="tooltip-stat-line stat-neutral"><span>Attack:</span><span>${n.attack}</span></div>`),n.maxHp>0&&r.push(`<div class="tooltip-stat-line stat-neutral"><span>Max HP:</span><span>${n.maxHp}</span></div>`),d.forEach(({key:p,label:g,unit:h})=>{n[p]>0&&r.push(`<div class="tooltip-stat-line stat-neutral"><span>${g}:</span><span>${n[p]}${h}</span></div>`)});let u=c.join("");c.length>0&&r.length>0&&(u+='<div class="tooltip-separator"></div>'),u+=r.join(""),a.innerHTML=`
    <div class="tooltip-name" style="color: ${s};">
      ${H(e)}
    </div>
    <div class="tooltip-stats">
      ${u}
    </div>
    <div class="tooltip-rarity" style="color: ${s};">
      ${l.name}
    </div>
  `}function Se(){let t=document.getElementById("admin-panel");return t||(t=document.createElement("div"),t.id="admin-panel",t.style.position="fixed",t.style.top="60px",t.style.right="30px",t.style.background="rgba(30,30,30,0.98)",t.style.border="2px solid #FFD700",t.style.borderRadius="10px",t.style.padding="18px 22px 18px 22px",t.style.zIndex=9999,t.style.display="none",t.style.color="#fff",t.style.minWidth="220px",t.innerHTML=`
      <h3 style="margin-top:0;margin-bottom:10px;color:#FFD700;">Admin Panel</h3>
      <div style="margin-bottom:10px;">
        <label>Give Levels: <input id="admin-levels" type="number" min="1" value="1" style="width:50px;"></label>
        <button id="admin-give-levels">Give</button>
      </div>
      <div style="margin-bottom:10px;">
        <label>Give Gold: <input id="admin-gold" type="number" min="1" value="1000" style="width:70px;"></label>
        <button id="admin-give-gold">Give</button>
      </div>
      <div style="margin-bottom:10px;">
        <label><input id="admin-guaranteed-drops" type="checkbox"> Guaranteed Drops</label>
      </div>
      <button id="admin-close">Close</button>
    `,document.body.appendChild(t)),t}function Ee(){const t=Se();return t.style.display="block",!0}function Le(){const t=document.getElementById("admin-panel");return t&&(t.style.display="none"),!1}function U(t,a,e,l="enemy",s=!1,i=!1,n=!1){const c=t.createElement("div");if(c.className="floating-damage",i?(c.textContent="MISS",c.classList.add("miss")):n?(c.textContent=`+${a}`,c.classList.add("heal")):(c.textContent=`-${a}`,c.classList.add(l),s&&(c.classList.add("critical"),c.textContent=`CRIT! -${a}`)),!e)return;const r=e.getBoundingClientRect();c.style.position="fixed",c.style.left=`${r.left+r.width/2+Math.random()*40-20}px`,c.style.top=`${r.top+r.height/2}px`,c.style.transform="translate(-50%, -50%)",t.body.appendChild(c),setTimeout(()=>{c.parentNode&&c.parentNode.removeChild(c)},1500)}let z=!1,P=null,B=null,N=!1,O=!1,A="";document.addEventListener("keydown",t=>{N||(A+=t.key.toLowerCase(),A.length>4&&(A=A.slice(-4)),A==="poop"&&(N=Ee(),setTimeout(()=>{A=""},100)))});document.addEventListener("click",t=>{if(!(!N||!document.getElementById("admin-panel").contains(t.target))){if(t.target.id==="admin-close")N=Le();else if(t.target.id==="admin-give-levels"){const e=parseInt(document.getElementById("admin-levels").value);if(!isNaN(e)&&e>0){for(let l=0;l<e;l++)o.levelUp();o.addLogMessage(`Admin: Gave ${e} level(s)`,"system"),T()}}else if(t.target.id==="admin-give-gold"){const e=parseInt(document.getElementById("admin-gold").value);!isNaN(e)&&e>0&&(o.player.gold+=e,o.addLogMessage(`Admin: Gave ${e} gold`,"system"),T())}}});document.addEventListener("change",t=>{N&&t.target.id==="admin-guaranteed-drops"&&(O=t.target.checked,o.addLogMessage(`Admin: Guaranteed drops ${O?"enabled":"disabled"}`,"system"))});function Z(t){const a="/idle-rpg-game/",e=t.startsWith("/")?t.slice(1):t;return a+e}function Te(t,a=2e3){const e=1+t/100;return Math.max(500,a/e)}class Ie{constructor(){this.player={level:1,hp:100,baseHp:100,maxHp:100,attack:10,baseAttack:10,equipmentAttack:0,equipmentMaxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0,gold:0,xp:0,nextLevelXp:100,equipment:{weapon:{name:"Rusty Sword",type:"weapon",rarity:"common",attack:5,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0,price:0,baseAttackInterval:2500},offhand:null,helmet:null,body:null,legs:null,belt:null,boots:null,necklace:null,ring:null},inventory:[]},this.currentZone="basement",this.currentEnemy=null,this.unlockedZones=["basement","restArea","forest"],this.needsInventoryUpdate=!0,this.needsCharacterUpdate=!0,this.respawnTimer={isActive:!1,currentTime:0,maxTime:3e3},this.combat={isActive:!1,playerTurn:!0,lastAttackTime:0},this.attackBars={player:{currentTime:0,maxTime:2e3},enemy:{currentTime:0,maxTime:3e3}},this.activityLog=[],this.logFilter="all",this.passiveSystems={studyHabits:{lastTick:0,interval:6e4},passiveLearning:{lastTick:0,interval:1e3},enemyCounter:0},this.inventorySettings={sortBy:"name",filterBy:"all",autoSell:{enabled:!1,rarities:{common:!1,uncommon:!1,rare:!1},types:{weapon:!1,offhand:!1,helmet:!1,body:!1,legs:!1,belt:!1,boots:!1,necklace:!1,ring:!1}}},this.needsInventoryUpdate=!0,this.zones=fe,this.talents={power:{},wealth:{},knowledge:{}},this.ascensionCount=0,this.isShowingTalentTree=!1,this.currentDeathMessage=K()}calculateStats(){let a=this.getBaseAttackWithTalents(),e=this.player.baseHp,l=0,s=0,i=0,n=0,c=0,r=0,d=0;this.getTalentLevel("power","power_1");const u=this.getTalentLevel("power","power_2a"),p=this.getTalentLevel("power","power_2b"),g=this.getTalentLevel("power","power_3a"),h=this.getTalentLevel("power","power_3b"),k=this.getTalentLevel("power","power_3c"),w=this.getTalentLevel("power","power_4");let m=p*2,v=h*15,f=g*10,b=k*5,y=k*3;u>0&&(a*=1+u*.1),w>0&&(a*=1.5,m+=25,f+=20);for(const C in this.player.equipment){const E=this.player.equipment[C];E&&(l+=E.attack||0,s+=E.maxHp||0,i+=E.attackSpeed||0,n+=E.critChance||0,c+=E.critDamage||0,r+=E.dodge||0,d+=E.blockChance||0)}const x=(this.player.level-1)*10;this.player.attack=a+l,this.player.maxHp=e+x+s,this.player.equipmentAttack=l,this.player.equipmentMaxHp=s,this.player.attackSpeed=i+f,this.player.critChance=n+m,this.player.critDamage=c+v,this.player.dodge=r+b,this.player.blockChance=d+y,this.player.hp>this.player.maxHp&&(this.player.hp=this.player.maxHp)}addToInventory(a){if(a.addedTimestamp=Date.now(),this.shouldAutoSell(a)){this.sellItem(a);return}this.player.inventory.push(a),this.needsInventoryUpdate=!0}shouldAutoSell(a){if(!this.inventorySettings.autoSell.enabled)return!1;const e=a.rarity||"common",l=this.inventorySettings.autoSell.rarities[e],s=this.inventorySettings.autoSell.types[a.type];return l||s}sellItem(a,e=!0){const l=Math.floor((a.price!==void 0?a.price:10)*.5);return this.player.gold+=l,e&&this.addLogMessage(`💰 Sold ${a.fullName||a.name} for ${l} gold`,"shop"),l}sellAllJunk(){let a=0,e=0;const l=[];return this.player.inventory.forEach((s,i)=>{this.shouldAutoSell(s)&&l.push({item:s,index:i})}),l.reverse().forEach(({item:s,index:i})=>{a+=this.sellItem(s,!1),this.player.inventory.splice(i,1),this.needsInventoryUpdate=!0,e++}),e>0?this.addLogMessage(`💰 Sold ${e} items for ${a} total gold`,"shop"):this.addLogMessage("No items to sell based on current auto-sell settings","system"),{itemsSold:e,totalGold:a}}getSortedAndFilteredInventory(){let a=[...this.player.inventory];return this.inventorySettings.filterBy!=="all"&&(a=a.filter(e=>e.type===this.inventorySettings.filterBy)),a.sort((e,l)=>{switch(this.inventorySettings.sortBy){case"rarity":const s=["common","uncommon","rare","epic","legendary"],i=s.indexOf(e.rarity||"common");return s.indexOf(l.rarity||"common")-i;case"type":return e.type.localeCompare(l.type);case"attack":return(l.attack||0)-(e.attack||0);case"new":return(l.addedTimestamp||0)-(e.addedTimestamp||0);case"name":default:return(e.fullName||e.name).localeCompare(l.fullName||l.name)}}),a}equipItem(a,e=!1,l=-1){console.log("equipItem called with:",{item:a,fromInventory:e,inventoryIndex:l});const s=a.type;if(s==="weapon"&&a.handType==="2h"){if(this.player.equipment.offhand){const c={...this.player.equipment.offhand,type:"offhand"};c.addedTimestamp=Date.now(),this.player.inventory.push(c),this.player.equipment.offhand=null,this.addLogMessage(`Unequipped ${c.fullName||c.name} to wield 2-handed weapon`,"system")}}else if(s==="offhand"){const c=this.player.equipment.weapon;if(c&&c.handType==="2h"){this.addLogMessage("Cannot equip offhand item while wielding a 2-handed weapon!","system");return}}let i=null;this.player.equipment[s]&&(i={...this.player.equipment[s],type:s});const n={name:a.name,fullName:a.fullName||a.name,rarity:a.rarity,attack:a.attack||0,maxHp:a.maxHp||0,attackSpeed:a.attackSpeed||0,critChance:a.critChance||0,critDamage:a.critDamage||0,dodge:a.dodge||0,blockChance:a.blockChance||0,handType:a.handType||"1h",prefixes:a.prefixes||[],suffixes:a.suffixes||[]};console.log("Equipping to slot:",s,"new item:",n),this.player.equipment[s]=n,this.needsCharacterUpdate=!0,e&&l>=0&&(console.log("Removing from inventory at index:",l,"inventory before:",[...this.player.inventory]),this.player.inventory.splice(l,1),this.needsInventoryUpdate=!0,console.log("Inventory after removal:",[...this.player.inventory]),i&&(console.log("Adding previously equipped item to inventory:",i),i.addedTimestamp=Date.now(),this.player.inventory.push(i))),this.calculateStats(),console.log("Stats after equipping:",{attack:this.player.attack,maxHp:this.player.maxHp})}spawnEnemy(){const a=this.zones[this.currentZone];if(!a.enemies||a.enemies.length===0)return null;if(this.currentZone==="goblinCave"&&a.boss&&a.killCount>=a.boss.requiredKills){ue(a.boss.name);const s={...a.boss,hp:a.boss.hp,maxHp:a.boss.hp,attackInterval:a.boss.attackInterval||2e3,isBoss:!0,isLegendaryDropper:a.boss.isLegendaryDropper||!1};return a.killCount=0,this.addCombatMessage("🏴‍☠️ The Goblin King emerges from the depths!","system"),s}const e=a.enemies[Math.floor(Math.random()*a.enemies.length)];return{...e,hp:e.hp,maxHp:e.hp,attackInterval:e.attackInterval||2e3}}gainXp(a){const e=this.getTalentLevel("knowledge","knowledge_1"),l=this.getTalentLevel("knowledge","knowledge_2a"),s=this.getTalentLevel("knowledge","knowledge_4");let i=1+e*.2;i+=l*.5,s>0&&(i*=3);const n=Math.floor(a*i);for(this.player.xp+=n;this.player.xp>=this.player.nextLevelXp;)this.levelUp()}levelUp(){this.player.xp-=this.player.nextLevelXp,this.player.level++;const a=this.getTalentLevel("knowledge","knowledge_3a"),e=Math.min(.3,a*.1);this.player.nextLevelXp=Math.floor(this.player.nextLevelXp*1.2*(1-e)),this.player.maxHp+=10,this.player.attack+=2,this.player.hp=this.player.hp+this.player.maxHp*.4,this.player.hp>this.player.maxHp&&(this.player.hp=this.player.maxHp),document.getElementById("character-level").classList.add("level-up"),setTimeout(()=>{document.getElementById("character-level").classList.remove("level-up")},500),this.addLogMessage(`🎉 Level up! You are now level ${this.player.level}!`,"loot","level-up"),Q(o,M)}addLogMessage(a,e="system",l=""){const s={message:a,category:e,type:l,timestamp:new Date().toLocaleTimeString()};this.activityLog.push(s),this.activityLog.length>100&&this.activityLog.shift(),this.updateActivityLog()}addCombatMessage(a,e=""){this.addLogMessage(a,"combat",e)}updateActivityLog(){const a=document.getElementById("activity-messages");if(!a)return;a.innerHTML="",(this.logFilter==="all"?this.activityLog:this.activityLog.filter(l=>l.category===this.logFilter)).forEach(l=>{const s=document.createElement("div");s.className=`activity-message ${l.category} ${l.type}`,s.innerHTML=`<span class="timestamp">[${l.timestamp}]</span> ${l.message}`,a.appendChild(s)}),a.scrollTop=a.scrollHeight}setLogFilter(a){this.logFilter=a,this.updateActivityLog(),document.querySelectorAll(".filter-btn").forEach(e=>{e.classList.remove("active")}),document.querySelector(`[data-filter="${a}"]`).classList.add("active")}clearActivityLog(){this.activityLog=[],this.updateActivityLog()}save(){const a={player:this.player,currentZone:this.currentZone,unlockedZones:this.unlockedZones};localStorage.setItem("idleRPG_save",JSON.stringify(a)),alert("Game saved successfully!")}load(){const a=localStorage.getItem("idleRPG_save");if(a){const e=JSON.parse(a);return this.player={...this.player,...e.player},this.currentZone=e.currentZone||"basement",this.unlockedZones=e.unlockedZones||["basement","forest"],Object.keys(this.player.equipment).forEach(l=>{const s=this.player.equipment[l];s&&!s.type&&(s.type=l)}),this.calculateStats(),this.needsCharacterUpdate=!0,alert("Game loaded successfully!"),!0}return!1}reset(){confirm("Are you sure you want to reset your game? This cannot be undone!")&&(localStorage.removeItem("idleRPG_save"),location.reload())}getPlayerAttackInterval(){const e=this.player.equipment.weapon?.baseAttackInterval||2e3;return Te(this.player.attackSpeed||0,e)}getEnemyAttackInterval(a){return a?.attackInterval||2e3}updateAttackBars(a){if(!(!this.combat.isActive||!this.currentEnemy)){if(this.attackBars.player.maxTime=this.getPlayerAttackInterval(),this.attackBars.player.currentTime+=a,this.attackBars.enemy.maxTime=this.getEnemyAttackInterval(this.currentEnemy),this.attackBars.enemy.currentTime+=a,this.attackBars.player.currentTime>=this.attackBars.player.maxTime){this.performPlayerAttack(),this.attackBars.player.currentTime=0;const e=document.getElementById("player-attack-fill");e&&(e.style.width="0%")}if(this.attackBars.enemy.currentTime>=this.attackBars.enemy.maxTime){this.performEnemyAttack(),this.attackBars.enemy.currentTime=0;const e=document.getElementById("enemy-attack-fill");e&&(e.style.width="0%")}this.updateAttackBarUI()}}updateRespawnTimer(a){this.respawnTimer.isActive&&(this.respawnTimer.currentTime+=a,this.respawnTimer.currentTime>=this.respawnTimer.maxTime&&(this.respawnTimer.isActive=!1,this.respawnTimer.currentTime=0,M()))}updatePassiveSystems(a){const e=this.getTalentLevel("knowledge","knowledge_2b");if(e>0&&a-this.passiveSystems.studyHabits.lastTick>=this.passiveSystems.studyHabits.interval){const s=Math.floor(this.player.level*.05*e);s>0&&(this.gainXp(s),this.addLogMessage(`Study Habits: Gained ${s} bonus XP from passive learning!`,"system","passive-xp")),this.passiveSystems.studyHabits.lastTick=a}const l=this.getTalentLevel("knowledge","knowledge_3c");if(l>0&&a-this.passiveSystems.passiveLearning.lastTick>=this.passiveSystems.passiveLearning.interval){const i=Math.floor(1*l);i>0&&(this.gainXp(i),(a-this.passiveSystems.passiveLearning.lastTick)%3e4<1e3&&this.addLogMessage(`Passive Learning: Gained ${i*30} XP over the last 30 seconds!`,"system","passive-xp")),this.passiveSystems.passiveLearning.lastTick=a}}updateAttackBarUI(){const a=this.attackBars.player.currentTime/this.attackBars.player.maxTime*100,e=this.attackBars.enemy.currentTime/this.attackBars.enemy.maxTime*100,l=document.getElementById("player-attack-fill"),s=document.getElementById("enemy-attack-fill");l&&(l.style.width=`${Math.min(100,a)}%`),s&&(s.style.width=`${Math.min(100,e)}%`);const i=document.getElementById("player-attack-label"),n=document.getElementById("enemy-attack-label");if(i){const c=Math.floor(this.attackBars.player.currentTime),r=Math.floor(this.attackBars.player.maxTime);i.textContent=`${c}/${r}`}if(n){const c=Math.floor(this.attackBars.enemy.currentTime),r=Math.floor(this.attackBars.enemy.maxTime);n.textContent=`${c}/${r}`}}performPlayerAttack(){if(!this.currentEnemy)return;let a=this.player.attack,e=!1;if(this.player.critChance>0&&Math.random()*100<=this.player.critChance&&(e=!0,a=Math.floor(a*(1+this.player.critDamage/100))),this.currentEnemy.hp-=a,this.currentEnemy.hp<=0){const c=document.getElementById("enemy-hp-bar");c&&(c.classList.add("instant"),c.style.width="0%",c.classList.add("respawning"),setTimeout(()=>{c.classList.remove("instant")},50))}const l=document.getElementById("enemy-hp-bar");l&&this.currentEnemy.hp>0&&U(document,a,l,"enemy",e);let s=`You attack ${this.currentEnemy.name} for ${a} damage`;e&&(s+=" (💥 CRITICAL HIT!)"),s+="!",this.addCombatMessage(s,e?"player-crit":"player-attack");const i=document.querySelector(".enemy-side");i&&(i.classList.add("damage-animation"),setTimeout(()=>{i.classList.remove("damage-animation")},300));const n=document.getElementById("player-image");n&&(n.classList.add("player-attacking"),setTimeout(()=>{n.classList.remove("player-attacking")},600)),this.currentEnemy.hp<=0&&this.handleEnemyDefeat()}performEnemyAttack(){if(!this.currentEnemy)return;const a=document.getElementById("enemy-image");if(a&&(console.log("Enemy attacking! Classes before:",a.className),a.classList.add("enemy-attacking"),setTimeout(()=>{console.log("Enemy attack finished! Classes after:",a.className),a.classList.remove("enemy-attacking")},600)),this.player.dodge>0&&Math.random()*100<=this.player.dodge){const r=document.getElementById("player-hp-bar");r&&U(document,0,r,"player",!1,!0),this.addCombatMessage(`You dodge ${this.currentEnemy.name}'s attack! 💨`,"player-dodge");return}let e=this.currentEnemy.attack,l=!1;this.player.blockChance>0&&Math.random()*100<=this.player.blockChance&&(l=!0,e=Math.floor(e*.5)),this.player.hp-=e;const s=document.getElementById("player-hp-bar");s&&U(document,e,s,"player",!1,!1,!1);let i=`${this.currentEnemy.name} attacks you for ${e} damage`;l&&(i+=" (🛡️ BLOCKED!)"),i+="!",this.addCombatMessage(i,l?"enemy-blocked":"enemy-attack");const n=document.querySelector(".player-side");n&&(n.classList.add("damage-animation"),setTimeout(()=>{n.classList.remove("damage-animation")},300)),this.player.hp<=0&&this.handlePlayerDeath()}handleEnemyDefeat(){this.passiveSystems.enemyCounter++;const a=this.currentEnemy.gold,e=.1+Math.random()*.9;let l=Math.floor(a*e),s=this.currentEnemy.xp;l=Math.floor(l*this.getGoldMultiplier());const i=this.getTalentLevel("knowledge","knowledge_3b");let n=1;i>0&&this.passiveSystems.enemyCounter%10===0&&(n=5*i,this.addLogMessage(`🌟 Experience Burst! ${n}x XP bonus on this kill!`,"loot","experience-burst")),s=Math.floor(s*this.getExperienceMultiplier()*n),this.player.gold+=l,this.gainXp(s),this.addLogMessage(`${this.currentEnemy.name} defeated! Gained ${l} gold and ${s} XP!`,"loot","enemy-defeated"),this.currentZone==="goblinCave"&&this.currentEnemy.name.includes("Goblin")&&!this.currentEnemy.isBoss&&(this.zones.goblinCave.killCount++,this.addCombatMessage(`Goblins defeated: ${this.zones.goblinCave.killCount}/${this.zones.goblinCave.boss.requiredKills}`,"system"));let c;const r=this.zones[this.currentZone];if(this.currentEnemy.isBoss&&this.currentEnemy.isLegendaryDropper)c=ce(),this.addLogMessage(`💎 The ${this.currentEnemy.name} dropped a legendary item! ${c.fullName}!`,"loot","enemy-defeated"),he(this.currentEnemy.name),this.addToInventory(c);else if(this.currentZone!=="basement"){const d=r.dropChance||25,u=r.allowedRarities||["common","uncommon","rare","epic"],p=this.getItemDropMultiplier();let g=d*p;O&&(g=100),Math.random()*100<=g&&(c=re(u),this.addLogMessage(`${this.currentEnemy.name} dropped ${c.fullName}!`,"loot","enemy-defeated"),this.addToInventory(c))}this.currentEnemy=null,this.combat.isActive=!1,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,this.respawnTimer.isActive=!0,this.respawnTimer.currentTime=0}handlePlayerDeath(){this.combat.isActive=!1,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,be(o,document),this.currentZone==="goblinCave"&&(this.zones.goblinCave.killCount=0),this.addCombatMessage("You were defeated! Choose to ascend and gain permanent power...","player-death"),this.currentEnemy=null,this.currentDeathMessage=K(),ee(o,document),Me()}getTalentLevel(a,e){return this.talents[a][e]||0}getBaseAttackWithTalents(){const a=this.player.baseAttack,e=this.getTalentLevel("power","power_1");return a+e*5}getBaseMaxHpWithTalents(){return 100}getBaseAttackSpeedWithTalents(){return this.getTalentLevel("power","power_3a")*10}getBaseCritChanceWithTalents(){const a=this.getTalentLevel("power","power_2b"),e=this.getTalentLevel("power","power_4");let l=a*2;return e>0&&(l+=25),l}getBaseCritDamageWithTalents(){return 0}getBaseLifeStealWithTalents(){return 0}getBaseDodgeWithTalents(){return 0}getBaseBlockChanceWithTalents(){return 0}getExperienceMultiplier(){let a=1;const e=this.getTalentLevel("knowledge","knowledge_1"),l=this.getTalentLevel("knowledge","knowledge_2a"),s=this.getTalentLevel("knowledge","knowledge_4");return a+=e*.2,a+=l*.5,s>0&&(a*=3),a}getGoldMultiplier(){let a=1;const e=this.getTalentLevel("wealth","wealth_1"),l=this.getTalentLevel("wealth","wealth_4");return a+=e*.25,l>0&&(a*=2),a}getItemDropMultiplier(){let a=1;const e=this.getTalentLevel("wealth","wealth_2a"),l=this.getTalentLevel("wealth","wealth_4");return a+=e*.1,l>0&&(a+=.5),a}canAllocateTalent(a,e){const s=_[a].nodes.find(r=>r.id===e);if(!s)return!1;const i=this.getTalentLevel(a,e);if(i>=s.maxLevel)return!1;let n=s.cost*(i+1);if(this.getTalentLevel("knowledge","knowledge_4")>0&&(n=Math.floor(n*.5)),this.player.gold<n)return!1;for(const r of s.prerequisites)if(this.getTalentLevel(a,r)===0)return!1;return!0}allocateTalent(a,e){if(!this.canAllocateTalent(a,e))return!1;const s=_[a].nodes.find(r=>r.id===e),i=this.getTalentLevel(a,e);let n=s.cost*(i+1);return this.getTalentLevel("knowledge","knowledge_4")>0&&(n=Math.floor(n*.5)),this.player.gold-=n,this.talents[a][e]=i+1,this.addLogMessage(`Allocated ${s.name} (Level ${i+1})`,"system"),!0}getTotalTalentPoints(){let a=0;for(const e in this.talents)for(const l in this.talents[e])a+=this.talents[e][l];return a}ascend(){this.player.gold;const e=this.getTalentLevel("knowledge","knowledge_4")>0?5:1;if(this.player.level=e,this.player.hp=this.getBaseMaxHpWithTalents(),this.player.maxHp=this.getBaseMaxHpWithTalents(),this.player.attack=10,this.player.equipmentAttack=0,this.player.equipmentMaxHp=0,this.player.attackSpeed=0,this.player.critChance=0,this.player.critDamage=0,this.player.dodge=0,this.player.blockChance=0,this.player.xp=0,this.player.nextLevelXp=100,e>1){for(let l=1;l<e;l++)this.player.maxHp+=10,this.player.nextLevelXp=Math.floor(this.player.nextLevelXp*1.2);this.player.hp=this.player.maxHp,this.addLogMessage(`🌟 Enlightened One: Starting at level ${e}!`,"system","enlightened-start")}this.player.inventory=[],this.player.equipment={weapon:{name:"Rusty Sword",type:"weapon",rarity:"common",attack:5,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0,price:0,baseAttackInterval:2500},offhand:null,helmet:null,body:null,legs:null,belt:null,boots:null,necklace:null,ring:null},this.unlockedZones=["basement","restArea","forest"],this.currentZone="basement",this.currentEnemy=null,this.combat.isActive=!1,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,this.applyTalentBonuses(),this.ascensionCount++,this.addLogMessage(`Ascension ${this.ascensionCount} complete! Your journey begins anew with ${this.getTotalTalentPoints()} talent points.`,"system"),this.needsCharacterUpdate=!0,this.needsInventoryUpdate=!0}applyTalentBonuses(){this.getTalentLevel("knowledge","knowledge_4")>0&&(this.player.level=5,this.player.xp=0,this.player.nextLevelXp=this.calculateXpForLevel(6));const e=this.getTalentLevel("power","power_1");this.player.attack+=e*5,this.calculateStats()}calculateXpForLevel(a){return Math.floor(100*Math.pow(1.1,a-1))}}const o=new Ie;function T(){const t=document.getElementById("inventory-gold");t&&(t.textContent=o.player.gold,t.style.fontSize="0.7rem");const a=document.getElementById("shop-gold");a&&(a.textContent=o.player.gold);const e=document.getElementById("player-attack");e&&(e.textContent=o.player.attack),$e(),document.getElementById("character-level").textContent=o.player.level,document.getElementById("character-xp-text").textContent=`${o.player.xp} / ${o.player.nextLevelXp}`;const l=o.player.xp/o.player.nextLevelXp*100;document.getElementById("character-xp-fill").style.width=`${l}%`;const s=o.player.hp/o.player.maxHp*100;if(document.getElementById("player-hp-bar").style.width=`${s}%`,document.getElementById("player-hp-text").textContent=`${o.player.hp}/${o.player.maxHp}`,De(),o.currentEnemy){document.getElementById("enemy-title").textContent=o.currentEnemy.name,document.getElementById("enemy-attack").textContent=o.currentEnemy.attack;const i=document.getElementById("enemy-image");i&&(i.src=`assets/enemies/${o.currentEnemy.imageClass+".png"}`,i.alt=o.currentEnemy.name,i.style.visibility="visible");const n=o.currentEnemy.hp/o.currentEnemy.maxHp*100,c=document.getElementById("enemy-hp-bar");c&&(c.style.width=`${n}%`,c.classList.remove("respawning")),document.getElementById("enemy-hp-text").textContent=`${o.currentEnemy.hp}/${o.currentEnemy.maxHp}`}else if(o.respawnTimer.isActive){const i=Math.ceil((o.respawnTimer.maxTime-o.respawnTimer.currentTime)/1e3),n=o.respawnTimer.currentTime/o.respawnTimer.maxTime*100;document.getElementById("enemy-title").textContent=`Respawning in ${i}s...`,document.getElementById("enemy-attack").textContent="-";const c=document.getElementById("enemy-hp-bar");c&&(c.style.width=`${n}%`,c.classList.add("respawning")),document.getElementById("enemy-hp-text").textContent="";const r=document.getElementById("enemy-image");r&&(r.style.visibility="hidden")}else{document.getElementById("enemy-title").textContent="No Enemy",document.getElementById("enemy-attack").textContent="-";const i=document.getElementById("enemy-hp-bar");i&&(i.style.width="0%",i.classList.remove("respawning"));const n=document.getElementById("enemy-hp-text");n&&(n.textContent="");const c=document.getElementById("enemy-image");c&&(c.style.visibility="hidden")}if(o.needsCharacterUpdate){for(const i in o.player.equipment){const n=o.player.equipment[i],c=document.getElementById(`${i}-item`),r=document.getElementById(`${i}-tooltip`);if(c){const d=i.charAt(0).toUpperCase()+i.slice(1);if(n){const p=X(n);c.innerHTML=`
            <div class="character-slot-name">${d}</div>
            <div class="character-slot-icon">${p}</div>
            <div class="equipped-item-name">${n.name}</div>
          `}else{const p=X(i);c.innerHTML=`
            <div class="character-slot-name">${d}</div>
            <div class="character-slot-icon empty">${p}</div>
            <div class="empty-slot">Empty</div>
          `}const u=c.closest(".character-slot");n?(u.classList.add("has-item"),r&&(Ce(o,r,n),r.style.display="block")):(u.classList.remove("has-item"),c.style.color="",r&&(r.innerHTML="",r.style.display="none"))}}o.needsCharacterUpdate=!1}o.needsInventoryUpdate&&W()}function $e(){document.getElementById("stats-total-attack").textContent=o.player.attack,document.getElementById("stats-max-hp").textContent=o.player.maxHp;const t=o.getPlayerAttackInterval();document.getElementById("stats-actual-attack-speed").textContent=`${(t/1e3).toFixed(1)}s`,document.getElementById("stats-crit-chance").textContent=`${o.player.critChance||0}%`,document.getElementById("stats-crit-damage").textContent=`${o.player.critDamage||0}%`,document.getElementById("stats-dodge").textContent=`${o.player.dodge||0}%`,document.getElementById("stats-block-chance").textContent=`${o.player.blockChance||0}%`,document.getElementById("stats-xp-multiplier").textContent=`${o.getExperienceMultiplier().toFixed(2)}x`,document.getElementById("stats-gold-multiplier").textContent=`${o.getGoldMultiplier().toFixed(2)}x`,document.getElementById("stats-item-drop-chance").textContent=`${(25*o.getItemDropMultiplier()).toFixed(0)}%`;const a=document.getElementById("stats-total-attack"),e=document.getElementById("stats-max-hp");a&&(a.className="stat-value",o.player.equipmentAttack>0&&a.classList.add("positive")),e&&(e.className="stat-value",o.player.equipmentMaxHp>0&&e.classList.add("positive")),["crit-chance","crit-damage","dodge","block-chance"].forEach(r=>{const d=document.getElementById(`stats-${r}`);if(d){const u=parseInt(d.textContent);d.className="stat-value",u>0&&d.classList.add("positive")}});const s=document.getElementById("stats-xp-multiplier"),i=document.getElementById("stats-gold-multiplier"),n=document.getElementById("stats-item-drop-chance");s&&(s.className="stat-value",o.getExperienceMultiplier()>1&&s.classList.add("positive")),i&&(i.className="stat-value",o.getGoldMultiplier()>1&&i.classList.add("positive")),n&&(n.className="stat-value",o.getItemDropMultiplier()>1&&n.classList.add("positive"));const c=document.getElementById("stats-actual-attack-speed");c&&(c.className="stat-value",o.player.attackSpeed>0&&c.classList.add("positive"))}function Be(t){const a=o.player.equipment[t.type];if(!a)return!0;const e={attack:t.attack||0,maxHp:t.maxHp||0,attackSpeed:t.attackSpeed||0,critChance:t.critChance||0,critDamage:t.critDamage||0,lifeSteal:t.lifeSteal||0,dodge:t.dodge||0,blockChance:t.blockChance||0},l={attack:a.attack||0,maxHp:a.maxHp||0,attackSpeed:a.attackSpeed||0,critChance:a.critChance||0,critDamage:a.critDamage||0,lifeSteal:a.lifeSteal||0,dodge:a.dodge||0,blockChance:a.blockChance||0};let s=0,i=0;for(const n in e)(e[n]>0||l[n]>0)&&(i++,e[n]>l[n]&&s++);return i>0&&s/i>.5}function X(t){if(typeof t=="string"){const n={weapon:"sword",offhand:"buckler",helmet:"helmet",body:"armor",legs:"pants",belt:"leather-belt",boots:"boots",necklace:"amulet",ring:"ring"}[t]||"sword";return`<img src="${Z(`assets/gear/${n}.svg`)}" alt="${t}" class="gear-icon" />`}let e=t.name.toLowerCase().replace(/\s+/g,"-");const l={sword:"sword",axe:"axe",mace:"mace",dagger:"dagger",staff:"staff",greatsword:"greatsword",battleaxe:"battleaxe",warhammer:"warhammer",buckler:"buckler","round-shield":"round-shield","tower-shield":"tower-shield",tome:"tome",helmet:"helmet",cap:"cap",crown:"crown",hood:"hood",armor:"armor",robe:"robe",vest:"vest",tunic:"tunic",greaves:"greaves",pants:"pants",leggings:"leggings",shorts:"shorts",sandals:"sandals",boots:"boots","heavy-boots":"heavy-boots","speed-boots":"speed-boots","leather-belt":"leather-belt","utility-belt":"utility-belt","chain-belt":"chain-belt","war-belt":"war-belt",amulet:"amulet",pendant:"pendant",ring:"ring",bracelet:"bracelet"};l[e]&&(e=l[e]);const s=t.rarity||"common";return`<img src="${Z(`assets/gear/${e}.svg`)}" alt="${t.name}" class="gear-icon rarity-${s}" loading="eager" onerror="this.style.display='none';" />`}function W(){const t=document.getElementById("inventory-items");if(!t){console.error("Inventory div not found!");return}F(),t.innerHTML="";const a=o.getSortedAndFilteredInventory();if(a.length===0){const e=document.createElement("div");e.className="inventory-empty",e.textContent=o.inventorySettings.filterBy==="all"?"No items in inventory":`No ${o.inventorySettings.filterBy} items in inventory`,e.style.color="var(--light-color)",e.style.fontStyle="italic",e.style.textAlign="center",e.style.padding="20px",t.appendChild(e);return}a.forEach(e=>{const l=o.player.inventory.findIndex(n=>n===e||n.fullName===e.fullName&&n.type===e.type),s=document.createElement("div");s.className="inventory-item",s.setAttribute("data-item-index",l),Be(e)&&s.classList.add("stat-improvement");const i=e.rarity&&S[e.rarity]?S[e.rarity].color:"#9CA3AF";Math.floor((e.price!==void 0?e.price:10)*.5),s.innerHTML=`
      <div class="item-icon">${X(e)}</div>
      <div class="item-name" style="color: ${i}; font-weight: bold;">
        ${H(e)}
      </div>
    `,s.addEventListener("mouseenter",n=>{P=e,B=n,j(o,document,n,e,z)}),s.addEventListener("mouseleave",n=>{P=null,B=null,F()}),s.addEventListener("mousemove",n=>{B=n,se(n,document)}),s.addEventListener("click",n=>{if(n.preventDefault(),n.stopPropagation(),F(),n.button===0){const c=parseInt(s.getAttribute("data-item-index")),r=o.player.inventory[c];if(r&&c>=0&&c<o.player.inventory.length){const d={...r};o.equipItem(d,!0,c),o.addLogMessage(`✨ Equipped ${d.fullName||d.name}!`,"system"),s.classList.add("equipping"),setTimeout(()=>{T()},300)}}}),s.addEventListener("contextmenu",n=>{n.preventDefault(),n.stopPropagation(),F();const c=parseInt(s.getAttribute("data-item-index")),r=o.player.inventory[c];r&&c>=0&&c<o.player.inventory.length&&(o.sellItem(r),o.player.inventory.splice(c,1),o.needsInventoryUpdate=!0,s.classList.add("selling"),setTimeout(()=>{T()},300))}),t.appendChild(s),o.needsInventoryUpdate=!1})}function M(){if(o.currentZone!=="restArea"&&!o.currentEnemy){if(o.currentEnemy=o.spawnEnemy(),!o.currentEnemy)return;o.addCombatMessage(`A wild ${o.currentEnemy.name} appears!`),o.combat.isActive=!0,o.combat.lastAttackTime=Date.now(),o.attackBars.player.currentTime=0,o.attackBars.enemy.currentTime=0,o.attackBars.player.maxTime=o.getPlayerAttackInterval(),o.attackBars.enemy.maxTime=o.getEnemyAttackInterval(o.currentEnemy),T()}}function Me(){const t=document.getElementById("death-modal");t.style.display="flex",o.combat.isActive=!1}function Ae(){const t=document.getElementById("death-modal");t.style.display="none",He()}function He(){const t=document.getElementById("talent-tree-modal");t.style.display="flex",o.isShowingTalentTree=!0,te(o,document),ae(o)}function De(){const t=document.getElementById("kill-counter"),a=document.getElementById("kill-counter-text");if(o.currentZone==="goblinCave"){const e=o.zones.goblinCave;t.style.display="block",a.textContent=`Goblins defeated: ${e.killCount}/${e.boss.requiredKills}`}else t.style.display="none"}document.getElementById("save-game").addEventListener("click",()=>o.save());document.getElementById("load-game").addEventListener("click",()=>{o.load()&&(R(o,document,o.currentZone),setTimeout(()=>M(),500),T())});document.getElementById("reset-game").addEventListener("click",()=>o.reset());document.getElementById("end-run-btn").addEventListener("click",()=>{confirm(`Are you sure you want to ${o.currentDeathMessage.toLowerCase()}? This will end your current run and trigger ascension.`)&&(o.player.hp=0,o.handlePlayerDeath())});document.getElementById("ascend-btn").addEventListener("click",()=>Ae());document.getElementById("confirm-ascend").addEventListener("click",()=>{ye(o,document),R(o,document,"basement",M),T()});document.querySelectorAll(".character-slot").forEach(t=>{t.addEventListener("click",()=>{const a=t.getAttribute("data-slot"),e=o.player.equipment[a];if(e){const l={...e,type:a,addedTimestamp:Date.now()};o.player.inventory.push(l),o.player.equipment[a]=null,o.needsCharacterUpdate=!0,o.needsInventoryUpdate=!0,o.calculateStats(o),o.addLogMessage(`Unequipped ${e.fullName||e.name}`,"system"),t.classList.add("damage-animation"),setTimeout(()=>{t.classList.remove("damage-animation"),T()},300)}else o.addLogMessage(`No item equipped in ${a} slot`,"system")})});document.querySelectorAll(".stat-tooltip-item").forEach(t=>{const a=t.getAttribute("data-tooltip");t.addEventListener("mouseenter",e=>{xe(o,e,a)}),t.addEventListener("mouseleave",()=>{we()}),t.addEventListener("mousemove",e=>{le(e,document)})});let J=0,V=0;const qe=100;function ie(t=performance.now()){V===0&&(V=t);const a=t-V;V=t,o.updatePassiveSystems(t),o.combat.isActive&&o.currentEnemy&&o.currentZone!=="restArea"&&o.updateAttackBars(a),o.respawnTimer.isActive&&o.currentZone!=="restArea"&&o.updateRespawnTimer(a),t-J>=qe&&(T(),J=t),requestAnimationFrame(ie)}function _e(){o.calculateStats(),Q(o,M),de(o,document,M),R(o,document,"basement",M),T(),ee(o,document),document.querySelectorAll(".filter-btn").forEach(t=>{t.addEventListener("click",()=>{const a=t.getAttribute("data-filter");o.setLogFilter(a)})}),document.getElementById("clear-log").addEventListener("click",()=>{confirm("Clear all activity log entries?")&&o.clearActivityLog()}),document.getElementById("inventory-sort").addEventListener("change",t=>{o.inventorySettings.sortBy=t.target.value,o.needsInventoryUpdate=!0,W()}),document.getElementById("inventory-filter").addEventListener("change",t=>{o.inventorySettings.filterBy=t.target.value,o.needsInventoryUpdate=!0,W()}),document.getElementById("auto-sell-btn").addEventListener("click",()=>{document.getElementById("auto-sell-common").checked=o.inventorySettings.autoSell.rarities.common,document.getElementById("auto-sell-uncommon").checked=o.inventorySettings.autoSell.rarities.uncommon,document.getElementById("auto-sell-rare").checked=o.inventorySettings.autoSell.rarities.rare,document.getElementById("auto-sell-weapons").checked=o.inventorySettings.autoSell.types.weapon,document.getElementById("auto-sell-offhand").checked=o.inventorySettings.autoSell.types.offhand,document.getElementById("auto-sell-helmets").checked=o.inventorySettings.autoSell.types.helmet,document.getElementById("auto-sell-body").checked=o.inventorySettings.autoSell.types.body,document.getElementById("auto-sell-legs").checked=o.inventorySettings.autoSell.types.legs,document.getElementById("auto-sell-belt").checked=o.inventorySettings.autoSell.types.belt,document.getElementById("auto-sell-boots").checked=o.inventorySettings.autoSell.types.boots,document.getElementById("auto-sell-necklaces").checked=o.inventorySettings.autoSell.types.necklace,document.getElementById("auto-sell-rings").checked=o.inventorySettings.autoSell.types.ring,document.getElementById("auto-sell-modal").style.display="flex"}),document.getElementById("close-auto-sell").addEventListener("click",()=>{document.getElementById("auto-sell-modal").style.display="none"}),document.getElementById("save-auto-sell").addEventListener("click",()=>{if(o.inventorySettings.autoSell.rarities.common=document.getElementById("auto-sell-common").checked,o.inventorySettings.autoSell.rarities.uncommon=document.getElementById("auto-sell-uncommon").checked,o.inventorySettings.autoSell.rarities.rare=document.getElementById("auto-sell-rare").checked,o.inventorySettings.autoSell.types.weapon=document.getElementById("auto-sell-weapons").checked,o.inventorySettings.autoSell.types.offhand=document.getElementById("auto-sell-offhand").checked,o.inventorySettings.autoSell.types.helmet=document.getElementById("auto-sell-helmets").checked,o.inventorySettings.autoSell.types.body=document.getElementById("auto-sell-body").checked,o.inventorySettings.autoSell.types.legs=document.getElementById("auto-sell-legs").checked,o.inventorySettings.autoSell.types.belt=document.getElementById("auto-sell-belt").checked,o.inventorySettings.autoSell.types.boots=document.getElementById("auto-sell-boots").checked,o.inventorySettings.autoSell.types.necklace=document.getElementById("auto-sell-necklaces").checked,o.inventorySettings.autoSell.types.ring=document.getElementById("auto-sell-rings").checked,o.inventorySettings.autoSell.enabled){const t=[];if(o.player.inventory.forEach((a,e)=>{o.shouldAutoSell(a)&&t.push({item:a,index:e})}),t.length>0){let a=0;t.reverse().forEach(({item:e,index:l})=>{a+=o.sellItem(e,!1),o.player.inventory.splice(l,1),o.needsInventoryUpdate=!0}),o.addLogMessage(`💰 Auto-sold ${t.length} existing items for ${a} total gold`,"shop")}}document.getElementById("auto-sell-modal").style.display="none",o.addLogMessage("💾 Auto-sell settings saved","system")}),document.getElementById("auto-sell-enabled-main").addEventListener("change",t=>{if(o.inventorySettings.autoSell.enabled=t.target.checked,t.target.checked){o.addLogMessage("✅ Auto-sell enabled","system");const a=[];if(o.player.inventory.forEach((e,l)=>{o.shouldAutoSell(e)&&a.push({item:e,index:l})}),a.length>0){let e=0;a.reverse().forEach(({item:l,index:s})=>{e+=o.sellItem(l,!1),o.player.inventory.splice(s,1),o.needsInventoryUpdate=!0}),o.addLogMessage(`💰 Auto-sold ${a.length} existing items for ${e} total gold`,"shop")}}else o.addLogMessage("❌ Auto-sell disabled","system")}),document.getElementById("auto-sell-enabled-main").checked=o.inventorySettings.autoSell.enabled,o.addLogMessage("🎮 Welcome to the Idle RPG! Your adventure begins...","system"),Object.keys(o.player.equipment).forEach(t=>{const a=o.player.equipment[t];a&&(a.type||(a.type=t))}),T(),ie()}function Pe(){["sword","axe","mace","dagger","staff","greatsword","battleaxe","warhammer","buckler","round-shield","tower-shield","tome","helmet","cap","crown","hood","armor","robe","vest","tunic","greaves","pants","leggings","shorts","sandals","boots","heavy-boots","speed-boots","leather-belt","utility-belt","chain-belt","war-belt","amulet","pendant","ring","bracelet"].forEach(a=>{const e=new Image;e.src=Z(`assets/gear/${a}.svg`)})}document.addEventListener("keydown",t=>{t.key==="Shift"&&(z=!0,P&&B&&j(o,document,B,P,z))});document.addEventListener("keyup",t=>{t.key==="Shift"&&(z=!1,P&&B&&j(o,document,B,P,z))});document.addEventListener("DOMContentLoaded",()=>{Pe(),_e()});
