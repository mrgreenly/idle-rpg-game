(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const o of s)if(o.type==="childList")for(const l of o.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&i(l)}).observe(document,{childList:!0,subtree:!0});function t(s){const o={};return s.integrity&&(o.integrity=s.integrity),s.referrerPolicy&&(o.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?o.credentials="include":s.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function i(s){if(s.ep)return;s.ep=!0;const o=t(s);fetch(s.href,o)}})();const w={common:{name:"Common",color:"#9CA3AF",chance:50,affixCount:0,prefix:[],suffix:[],priceMultiplier:1},uncommon:{name:"Uncommon",color:"#10B981",chance:30,affixCount:1,prefix:["Sturdy","Sharp","Keen","Fine"],suffix:["of Power","of Might","of the Warrior"],priceMultiplier:1.5},rare:{name:"Rare",color:"#3B82F6",chance:15,affixCount:2,prefix:["Masterwork","Superior","Enhanced","Reinforced"],suffix:["of the Elite","of Excellence","of the Champion","of Mastery"],priceMultiplier:2.5},epic:{name:"Epic",color:"#8B5CF6",chance:4,affixCount:3,prefix:["Legendary","Ancient","Mythical","Heroic","Blessed","Cursed"],suffix:["of the Gods","of Legends","of Heroes","of Destiny","of the Void","of Strength"],priceMultiplier:4},legendary:{name:"Legendary",color:"#F59E0B",chance:1,affixCount:5,prefix:["Divine","Celestial","Eternal","Transcendent","Omnipotent","Radiant"],suffix:["of the Immortals","of Eternity","of the Divine","of Transcendence","of Infinity","of the Cosmos"],priceMultiplier:8}},S={prefix:{Sturdy:{stats:{maxHp:15,blockChance:2,baseValue:5},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Sharp:{stats:{attack:2,critChance:3},allowedTypes:["weapon"]},Keen:{stats:{critChance:5,critDamage:8},allowedTypes:["weapon","necklace","ring"]},Fine:{stats:{attack:1,maxHp:5,attackSpeed:2},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Masterwork:{stats:{attack:4,maxHp:10,critChance:3},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},Superior:{stats:{attack:3,critDamage:10},allowedTypes:["weapon","necklace","ring"]},Enhanced:{stats:{attackSpeed:8,dodge:5,critChance:3},allowedTypes:["weapon","boots","legs","necklace","ring"]},Reinforced:{stats:{maxHp:30,blockChance:8,dodge:2},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Legendary:{stats:{attack:6,critChance:8,critDamage:15},allowedTypes:["weapon"]},Ancient:{stats:{attack:5,maxHp:20,blockChance:5,baseValue:6},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Mythical:{stats:{critDamage:20,dodge:8},allowedTypes:["weapon","necklace","ring"]},Heroic:{stats:{attack:7,attackSpeed:12,critChance:10},allowedTypes:["weapon"]},Blessed:{stats:{maxHp:25,dodge:6,blockChance:6,baseValue:25},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]},Cursed:{stats:{attack:8,critChance:12,critDamage:18,attackSpeed:10},allowedTypes:["weapon","necklace","ring"]},Divine:{stats:{attack:10,critChance:15,critDamage:25},allowedTypes:["weapon","necklace","ring"]},Celestial:{stats:{maxHp:40,blockChance:15,dodge:12,attackSpeed:15},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Eternal:{stats:{attack:8,maxHp:30,critDamage:30},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Transcendent:{stats:{attack:12,critChance:20,dodge:15,attackSpeed:20},allowedTypes:["weapon","boots","legs","necklace","ring"]},Omnipotent:{stats:{attack:15,critChance:18,critDamage:35},allowedTypes:["weapon","necklace","ring"]},Radiant:{stats:{maxHp:50,dodge:18,attackSpeed:25,blockChance:20,baseValue:32},allowedTypes:["helmet","body","legs","boots","belt","offhand"]}},suffix:{"of Power":{stats:{attack:3},allowedTypes:["weapon","necklace","ring"]},"of Might":{stats:{attack:2,critDamage:5},allowedTypes:["weapon"]},"of the Warrior":{stats:{attack:1,maxHp:10,blockChance:3,baseValue:10},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},"of the Elite":{stats:{attack:4,critChance:5,attackSpeed:5},allowedTypes:["weapon","necklace","ring"]},"of Excellence":{stats:{critChance:8,critDamage:12},allowedTypes:["weapon","necklace","ring"]},"of the Champion":{stats:{attack:3,maxHp:15,dodge:5},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},"of Mastery":{stats:{attackSpeed:10,critChance:6,dodge:6},allowedTypes:["weapon","boots","legs","necklace","ring"]},"of the Gods":{stats:{attack:8,critChance:12,critDamage:20},allowedTypes:["weapon"]},"of Legends":{stats:{maxHp:30,blockChance:12,baseValue:14},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Heroes":{stats:{attack:6,attackSpeed:15,dodge:10},allowedTypes:["weapon","boots","legs"]},"of Destiny":{stats:{critDamage:25,attackSpeed:12},allowedTypes:["weapon","necklace","ring"]},"of the Void":{stats:{attack:7,critChance:10,dodge:12},allowedTypes:["weapon","necklace","ring"]},"of Strength":{stats:{attack:9,critDamage:22,attackSpeed:8},allowedTypes:["weapon","belt","necklace","ring"]},"of the Immortals":{stats:{attack:10,maxHp:40,blockChance:15,baseValue:27},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Eternity":{stats:{critChance:20,critDamage:35,attackSpeed:25},allowedTypes:["weapon","necklace","ring"]},"of the Divine":{stats:{attack:12,maxHp:50,dodge:20},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Transcendence":{stats:{attack:15,critChance:25,critDamage:40,attackSpeed:30},allowedTypes:["weapon","necklace","ring"]},"of Infinity":{stats:{attack:13,critChance:22,critDamage:38,dodge:16},allowedTypes:["weapon","necklace","ring"]},"of the Cosmos":{stats:{maxHp:60,attackSpeed:28,blockChance:18,baseValue:45},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]}}},P={weapon:[{name:"Sword",attack:10,maxHp:0,attackSpeed:0,baseAttackInterval:2e3,critChance:5,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,handType:"1h",baseValue:5},{name:"Axe",attack:15,maxHp:0,attackSpeed:0,baseAttackInterval:2800,critChance:8,critDamage:15,lifeSteal:0,dodge:0,blockChance:0,handType:"1h",baseValue:5},{name:"Mace",attack:12,maxHp:0,attackSpeed:0,baseAttackInterval:2400,critChance:2,critDamage:0,lifeSteal:0,dodge:0,blockChance:5,handType:"1h",baseValue:5},{name:"Dagger",attack:6,maxHp:0,attackSpeed:0,baseAttackInterval:1600,critChance:12,critDamage:20,lifeSteal:0,dodge:8,blockChance:0,handType:"1h",baseValue:5},{name:"Staff",attack:8,maxHp:0,attackSpeed:0,baseAttackInterval:2200,critChance:10,critDamage:25,lifeSteal:0,dodge:0,blockChance:0,handType:"1h",baseValue:5},{name:"Greatsword",attack:20,maxHp:0,attackSpeed:0,baseAttackInterval:3200,critChance:3,critDamage:25,lifeSteal:0,dodge:0,blockChance:0,handType:"2h",baseValue:5},{name:"Battleaxe",attack:25,maxHp:0,attackSpeed:0,baseAttackInterval:3600,critChance:5,critDamage:30,lifeSteal:0,dodge:0,blockChance:0,handType:"2h",baseValue:5},{name:"Warhammer",attack:22,maxHp:0,attackSpeed:0,baseAttackInterval:3400,critChance:1,critDamage:0,lifeSteal:0,dodge:0,blockChance:8,handType:"2h",baseValue:5}],offhand:[{name:"Buckler",attack:0,maxHp:40,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:15,baseValue:5},{name:"Round Shield",attack:0,maxHp:60,attackSpeed:-5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:20,baseValue:5},{name:"Tower Shield",attack:0,maxHp:18,attackSpeed:-10,critChance:0,critDamage:0,lifeSteal:0,dodge:-5,blockChance:30,baseValue:5},{name:"Tome",attack:3,maxHp:0,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,baseValue:5}],helmet:[{name:"Helmet",attack:0,maxHp:5,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:3,baseValue:5},{name:"Cap",attack:0,maxHp:3,attackSpeed:2,critChance:0,critDamage:0,lifeSteal:0,dodge:2,blockChance:0,baseValue:5},{name:"Crown",attack:0,maxHp:20,attackSpeed:0,critChance:3,critDamage:5,lifeSteal:0,dodge:0,blockChance:0,baseValue:6},{name:"Hood",attack:0,maxHp:10,attackSpeed:3,critChance:2,critDamage:0,lifeSteal:0,dodge:5,blockChance:0,baseValue:5}],body:[{name:"Armor",attack:0,maxHp:60,attackSpeed:-5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:8,baseValue:5},{name:"Robe",attack:0,maxHp:40,attackSpeed:5,critChance:5,critDamage:10,lifeSteal:2,dodge:0,blockChance:0,baseValue:5},{name:"Vest",attack:0,maxHp:50,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:3,blockChance:2,baseValue:5},{name:"Tunic",attack:0,maxHp:30,attackSpeed:8,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:0,baseValue:5}],legs:[{name:"Greaves",attack:0,maxHp:40,attackSpeed:-3,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:5,baseValue:5},{name:"Pants",attack:0,maxHp:30,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:0,dodge:3,blockChance:0,baseValue:5},{name:"Leggings",attack:0,maxHp:7,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:2,blockChance:2,baseValue:5},{name:"Shorts",attack:0,maxHp:20,attackSpeed:10,critChance:2,critDamage:0,lifeSteal:0,dodge:8,blockChance:0,baseValue:5}],boots:[{name:"Sandals",attack:0,maxHp:10,attackSpeed:8,critChance:0,critDamage:0,lifeSteal:0,dodge:8,blockChance:0,baseValue:5},{name:"Boots",attack:0,maxHp:5,attackSpeed:3,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:0,baseValue:5},{name:"Heavy Boots",attack:0,maxHp:40,attackSpeed:-3,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:5,baseValue:5},{name:"Speed Boots",attack:0,maxHp:3,attackSpeed:15,critChance:2,critDamage:0,lifeSteal:0,dodge:12,blockChance:0,baseValue:5}],belt:[{name:"Leather Belt",attack:0,maxHp:1,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,baseValue:5},{name:"Utility Belt",attack:0,maxHp:0,attackSpeed:5,critChance:3,critDamage:0,lifeSteal:0,dodge:3,blockChance:0,baseValue:5},{name:"Chain Belt",attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:3,baseValue:5},{name:"War Belt",attack:0,maxHp:0,attackSpeed:0,critChance:5,critDamage:8,lifeSteal:0,dodge:0,blockChance:0,baseValue:5}],necklace:[{name:"Amulet",attack:0,maxHp:0,attackSpeed:0,critChance:8,critDamage:15,lifeSteal:0,dodge:0,blockChance:0,baseValue:5},{name:"Pendant",attack:0,maxHp:0,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:5,dodge:0,blockChance:0,baseValue:5}],ring:[{name:"Ring",attack:0,maxHp:0,attackSpeed:3,critChance:5,critDamage:8,lifeSteal:0,dodge:0,blockChance:0,baseValue:5},{name:"Bracelet",attack:0,maxHp:0,attackSpeed:8,critChance:6,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,baseValue:5}]},ie={restArea:{name:"Rest Area",description:"A peaceful campsite where you can pause and relax. Nothing happens here.",zoneNumber:0,enemies:[],isRestArea:!0},basement:{name:"The Basement",description:"A damp, dark basement infested with weak rats. Perfect for beginners.",zoneNumber:1,enemies:[{name:"Sewer Rat",imageClass:"sewer-rat",hp:25,attack:2,xp:5,gold:2,attackInterval:3500},{name:"Giant Rat",imageClass:"giant-rat",hp:35,attack:3,xp:6,gold:3,attackInterval:3e3},{name:"Diseased Rat",imageClass:"diseased-rat",hp:30,attack:4,xp:6,gold:3,attackInterval:2800}]},forest:{name:"Dark Forest",description:"A mysterious forest filled with creatures",zoneNumber:2,enemies:[{name:"Slime",imageClass:"slime",hp:50,attack:4,xp:15,gold:5,attackInterval:3e3},{name:"Goblin",imageClass:"goblin",hp:80,attack:8,xp:25,gold:10,attackInterval:2e3},{name:"Wolf",imageClass:"wolf",hp:70,attack:12,xp:20,gold:8,attackInterval:2200}],dropChance:25,allowedRarities:["common","uncommon"]},cave:{name:"Mysterious Cave",description:"Deep caves with stronger monsters",zoneNumber:3,enemies:[{name:"Orc",imageClass:"orc",hp:120,attack:18,xp:35,gold:15,attackInterval:2800},{name:"Skeleton",imageClass:"skeleton",hp:100,attack:20,xp:30,gold:12,attackInterval:2300},{name:"Spider",imageClass:"spider",hp:90,attack:16,xp:28,gold:10,attackInterval:1800}],dropChance:30,allowedRarities:["common","uncommon","rare"]},mountain:{name:"Snowy Mountains",description:"Treacherous peaks with powerful foes",zoneNumber:5,enemies:[{name:"Yeti",imageClass:"yeti",hp:200,attack:25,xp:50,gold:25,attackInterval:3500},{name:"Dragon",imageClass:"dragon",hp:300,attack:35,xp:80,gold:50,attackInterval:2200},{name:"Giant",imageClass:"giant",hp:250,attack:30,xp:65,gold:35,attackInterval:4e3}],dropChance:35,allowedRarities:["common","uncommon","rare"]},goblinCave:{name:"Goblin Cave",description:"A dark cave infested with goblins. Defeat 15 goblins to face the Goblin King!",zoneNumber:4,enemies:[{name:"Goblin Runt",imageClass:"goblin",hp:60,attack:10,xp:18,gold:7,attackInterval:2400},{name:"Goblin Shaman",imageClass:"goblin",hp:85,attack:16,xp:28,gold:12,attackInterval:2800},{name:"Goblin Slinger",imageClass:"goblin",hp:75,attack:14,xp:22,gold:9,attackInterval:2100},{name:"Goblin Brute",imageClass:"goblin",hp:110,attack:20,xp:35,gold:15,attackInterval:3200}],dropChance:40,allowedRarities:["common","uncommon","rare","epic"],boss:{name:"Goblin King",imageClass:"goblin",hp:400,attack:40,xp:150,gold:100,requiredKills:15,isLegendaryDropper:!0,attackInterval:2500,xp:150},killCount:0}},j=["Jump off a bridge","Lay facedown in a puddle","Starve yourself","Walk into a dragon's lair unarmed","Challenge a mountain troll to arm wrestling","Try to pet a wild bear","Swim with sharks while bleeding","Eat mysterious mushrooms","Sleep in a haunted cemetery","Juggle flaming torches blindfolded","Use a cursed sword as a toothpick","Tickle a sleeping giant","Dance on thin ice","Hug a cactus enthusiastically","Take a nap in quicksand","Play catch with a grenade","Use a lightning rod during a storm","Tell a vampire they have bad breath","Ask a kraken for directions","Wear meat clothing to a wolf den","Try to ride a wild griffin","Drink from the fountain of eternal poison","Challenge death to a game of chess","Use your head to test helmet durability","Go cave diving without oxygen","Practice sword swallowing with a real sword","Take a selfie with a basilisk","Use a nuclear reactor as a nightlight","Go bungee jumping with a rope that's too long","Try to milk a wild minotaur"];function K(){return j[Math.floor(Math.random()*j.length)]}const _={exploration:{name:"Path of Exploration",icon:"🗺️",description:"Unlock new zones and content",nodes:[{id:"exploration_1",name:"Zone Scout",icon:"🧭",description:"Unlocks additional zones earlier",effect:"Reduce zone unlock level requirements by 2",cost:50,tier:1,position:{x:2,y:0},prerequisites:[]},{id:"exploration_2a",name:"Monster Hunter",icon:"🏹",description:"Encounter rare enemies more often",effect:"Increase rare enemy spawn chance by 25%",cost:75,tier:2,position:{x:1,y:1},prerequisites:["exploration_1"]},{id:"exploration_2b",name:"Zone Master",icon:"🌍",description:"Better understanding of zones",effect:"Gain 15% more XP and gold from all zones",cost:75,maxLevel:2,tier:2,position:{x:3,y:1},prerequisites:["exploration_1"]},{id:"exploration_3a",name:"Beast Tracker",icon:"🐺",description:"Specialize in hunting beasts",effect:"Double drop chance from beast-type enemies",cost:100,tier:3,position:{x:0,y:2},prerequisites:["exploration_2a"]},{id:"exploration_3b",name:"Boss Slayer",icon:"🗡️",description:"Reduce boss requirements",effect:"Reduce boss spawn requirements by 5 kills",cost:100,tier:3,position:{x:2,y:2},prerequisites:["exploration_2a","exploration_2b"]},{id:"exploration_3c",name:"Territory Control",icon:"🏰",description:"Dominate zones completely",effect:"Killing 100 enemies in a zone grants permanent 10% bonus",cost:120,maxLevel:3,tier:3,position:{x:4,y:2},prerequisites:["exploration_2b"]},{id:"exploration_4",name:"Realm Walker",icon:"👑",description:"Master of all zones",effect:"Unlocks special endgame zones and 25% global bonus",cost:250,tier:4,position:{x:2,y:3},prerequisites:["exploration_3a","exploration_3b","exploration_3c"]}]},power:{name:"Path of Power",icon:"⚔️",description:"Increase combat effectiveness",nodes:[{id:"power_1",name:"Warrior Training",icon:"💪",description:"Increase base attack power",effect:"+5 attack",stat:"attack",value:5,cost:40,maxLevel:5,tier:1,position:{x:2,y:0},prerequisites:[]},{id:"power_2a",name:"Weapon Mastery",icon:"🗡️",description:"Master weapon combat",effect:"+10% attack per level",cost:60,maxLevel:3,tier:2,position:{x:1,y:1},prerequisites:["power_1"]},{id:"power_2b",name:"Combat Mastery",icon:"🎯",description:"Improve critical hit chance",effect:"+2% critical chance per level",cost:60,maxLevel:3,tier:2,position:{x:3,y:1},prerequisites:["power_1"]},{id:"power_3a",name:"Berserker Rage",icon:"⚡",description:"Increase attack speed",effect:"+10% attack speed per level",cost:80,maxLevel:3,tier:3,position:{x:0,y:2},prerequisites:["power_2a"]},{id:"power_3b",name:"Precise Strikes",icon:"🔥",description:"Deadly precision",effect:"+15% critical damage per level",cost:85,maxLevel:4,tier:3,position:{x:2,y:2},prerequisites:["power_2a","power_2b"]},{id:"power_3c",name:"Battle Focus",icon:"🧠",description:"Mental fortitude in combat",effect:"+5% dodge chance and +3% block chance per level",cost:90,maxLevel:2,tier:3,position:{x:4,y:2},prerequisites:["power_2b"]},{id:"power_4",name:"Legendary Warrior",icon:"🏆",description:"Transcendent combat mastery",effect:"+50% damage, +25% crit chance, +20% attack speed",cost:300,tier:4,position:{x:2,y:3},prerequisites:["power_3a","power_3b","power_3c"]}]},wealth:{name:"Path of Wealth",icon:"💰",description:"Increase gold gain and rewards",nodes:[{id:"wealth_1",name:"Coin Collector",icon:"🪙",description:"Increase gold drops from enemies",effect:"+25% gold gain per level",cost:45,maxLevel:4,tier:1,position:{x:2,y:0},prerequisites:[]},{id:"wealth_2a",name:"Lucky Find",icon:"🍀",description:"Increase item drop chance",effect:"+10% item drop chance per level",cost:70,maxLevel:3,tier:2,position:{x:1,y:1},prerequisites:["wealth_1"]},{id:"wealth_2b",name:"Gold Rush",icon:"💸",description:"Bonus gold from streaks",effect:"Killing enemies without taking damage gives +5% gold per streak",cost:65,maxLevel:5,tier:2,position:{x:3,y:1},prerequisites:["wealth_1"]},{id:"wealth_3a",name:"Treasure Hunter",icon:"💎",description:"Higher chance for rare items",effect:"+15% chance for higher rarity per level",cost:90,maxLevel:2,tier:3,position:{x:0,y:2},prerequisites:["wealth_2a"]},{id:"wealth_3b",name:"Merchant Mind",icon:"🏪",description:"Better item values",effect:"Items sell for +20% more gold per level",cost:95,maxLevel:3,tier:3,position:{x:2,y:2},prerequisites:["wealth_2a","wealth_2b"]},{id:"wealth_3c",name:"Golden Streak",icon:"🌟",description:"Massive streak bonuses",effect:"Gold streak bonuses last 50% longer per level",cost:100,maxLevel:2,tier:3,position:{x:4,y:2},prerequisites:["wealth_2b"]},{id:"wealth_4",name:"Golden Touch",icon:"✨",description:"Midas-like power",effect:"Double gold gain, +50% item drops, items have 10% chance to duplicate",cost:350,tier:4,position:{x:2,y:3},prerequisites:["wealth_3a","wealth_3b","wealth_3c"]}],knowledge:{name:"Path of Knowledge",icon:"📚",description:"Increase experience gain",nodes:[{id:"knowledge_1",name:"Quick Learner",icon:"📖",description:"Gain experience faster",effect:"+20% experience gain per level",cost:35,maxLevel:5,tier:1,position:{x:2,y:0},prerequisites:[]},{id:"knowledge_2a",name:"Battle Wisdom",icon:"⚔️",description:"Bonus XP from combat victories",effect:"+50% bonus XP from defeating enemies per level",cost:55,maxLevel:3,tier:2,position:{x:1,y:1},prerequisites:["knowledge_1"]},{id:"knowledge_2b",name:"Study Habits",icon:"📝",description:"Efficient learning methods",effect:"Gain bonus XP equal to 5% of current level every 60 seconds",cost:50,maxLevel:4,tier:2,position:{x:3,y:1},prerequisites:["knowledge_1"]},{id:"knowledge_3a",name:"Master Scholar",icon:"🎓",description:"Reduce XP requirements for leveling",effect:"-10% XP needed per level (max 30%)",cost:85,maxLevel:3,tier:3,position:{x:0,y:2},prerequisites:["knowledge_2a"]},{id:"knowledge_3b",name:"Experience Burst",icon:"💫",description:"Burst learning periods",effect:"Every 10th enemy gives 5x experience",cost:90,maxLevel:2,tier:3,position:{x:2,y:2},prerequisites:["knowledge_2a","knowledge_2b"]},{id:"knowledge_3c",name:"Passive Learning",icon:"🧘",description:"Learn while inactive",effect:"Gain XP over time even when not fighting",cost:80,maxLevel:3,tier:3,position:{x:4,y:2},prerequisites:["knowledge_2b"]},{id:"knowledge_4",name:"Enlightened One",icon:"🔮",description:"Transcendent learning abilities",effect:"Triple XP gain, start at level 5, reduce talent costs by 50%",cost:400,tier:4,position:{x:2,y:3},prerequisites:["knowledge_3a","knowledge_3b","knowledge_3c"]}]}}};let z=!1,V=!1;function ce(){let a=document.getElementById("admin-panel");return a||(a=document.createElement("div"),a.id="admin-panel",a.style.position="fixed",a.style.top="60px",a.style.right="30px",a.style.background="rgba(30,30,30,0.98)",a.style.border="2px solid #FFD700",a.style.borderRadius="10px",a.style.padding="18px 22px 18px 22px",a.style.zIndex=9999,a.style.display="none",a.style.color="#fff",a.style.minWidth="220px",a.innerHTML=`
      <h3 style="margin-top:0;margin-bottom:10px;color:#FFD700;">Admin Panel</h3>
      <div style="margin-bottom:10px;">
        <label>Give Levels: <input id="admin-levels" type="number" min="1" value="1" style="width:50px;"></label>
        <button id="admin-give-levels">Give</button>
      </div>
      <div style="margin-bottom:10px;">
        <label>Give Gold: <input id="admin-gold" type="number" min="1" value="1000" style="width:70px;"></label>
        <button id="admin-give-gold">Give</button>
      </div>
      <div style="margin-bottom:10px;">
        <label><input id="admin-guaranteed-drops" type="checkbox"> Guaranteed Drops</label>
      </div>
      <button id="admin-close">Close</button>
    `,document.body.appendChild(a)),a}function re(){const a=ce();a.style.display="block",z=!0}function de(){const a=document.getElementById("admin-panel");a&&(a.style.display="none"),z=!1}let H="";document.addEventListener("keydown",a=>{z||(H+=a.key.toLowerCase(),H.length>4&&(H=H.slice(-4)),H==="poop"&&(re(),setTimeout(()=>{H=""},100)))});document.addEventListener("click",a=>{if(!(!z||!document.getElementById("admin-panel").contains(a.target))){if(a.target.id==="admin-close")de();else if(a.target.id==="admin-give-levels"){const t=parseInt(document.getElementById("admin-levels").value);if(!isNaN(t)&&t>0){for(let i=0;i<t;i++)n.levelUp();n.addLogMessage(`Admin: Gave ${t} level(s)`,"system"),E()}}else if(a.target.id==="admin-give-gold"){const t=parseInt(document.getElementById("admin-gold").value);!isNaN(t)&&t>0&&(n.player.gold+=t,n.addLogMessage(`Admin: Gave ${t} gold`,"system"),E())}}});document.addEventListener("change",a=>{z&&a.target.id==="admin-guaranteed-drops"&&(V=a.target.checked,n.addLogMessage(`Admin: Guaranteed drops ${V?"enabled":"disabled"}`,"system"))});function O(a){const e="/idle-rpg-game/",t=a.startsWith("/")?a.slice(1):a;return e+t}let R=!1,$=null,I=null;function pe(){$=null,I=null,["weapon","helmet","body","legs","accessory1","accessory2"].forEach(t=>{const i=document.getElementById(`${t}-tooltip`);i&&(i.innerHTML="",i.style.display="none")}),document.querySelectorAll(".tooltip, .zone-tooltip, .stat-tooltip").forEach(t=>{t.style.display="none",t.innerHTML=""})}function me(a){const e={};a.forEach(y=>{w[y]&&(e[y]=w[y])}),Object.keys(e).length===0&&(e.common=w.common);const t=Math.random()*100;let i="common",s=0;for(const[y,p]of Object.entries(e))if(s+=p.chance,t<=s){i=y;break}const o=Object.keys(P),l=o[Math.floor(Math.random()*o.length)],c=P[l],r=c[Math.floor(Math.random()*c.length)],d=w[i],m={name:r.name,type:l,rarity:i,attack:r.attack,maxHp:r.maxHp,attackSpeed:r.attackSpeed,critChance:r.critChance,critDamage:r.critDamage,dodge:r.dodge,blockChance:r.blockChance,price:Math.floor((r.baseValue||10)*(d.priceMultiplier||1)),handType:r.handType||"1h",baseAttackInterval:r.baseAttackInterval,prefixes:[],suffixes:[]},u=d.affixCount;if(u>0){const y=Math.min(3,Math.ceil(u/2)),p=Math.min(3,u-y),k=d.prefix.filter(v=>{const h=S.prefix[v];return h&&h.allowedTypes.includes(l)});for(let v=0;v<y&&k.length>0;v++){const h=Math.floor(Math.random()*k.length),x=k.splice(h,1)[0];m.prefixes.push(x);const b=S.prefix[x].stats;b&&Object.keys(b).forEach(C=>{m[C]+=b[C]})}const g=d.suffix.filter(v=>{const h=S.suffix[v];return h&&h.allowedTypes.includes(l)});for(let v=0;v<p&&g.length>0;v++){const h=Math.floor(Math.random()*g.length),x=g.splice(h,1)[0];m.suffixes.push(x);const b=S.suffix[x].stats;b&&Object.keys(b).forEach(C=>{m[C]+=b[C]})}}let f=m.name;if(m.prefixes.length>0&&(f=`${m.prefixes[Math.floor(Math.random()*m.prefixes.length)]} ${f}`),m.suffixes.length>0){const y=m.suffixes[Math.floor(Math.random()*m.suffixes.length)];f=`${f} ${y}`}return m.fullName=f,m}function ue(){const a="legendary",e=Object.keys(P),t=e[Math.floor(Math.random()*e.length)],i=P[t],s=i[Math.floor(Math.random()*i.length)],o=w[a],l={name:s.name,type:t,rarity:a,attack:s.attack,maxHp:s.maxHp,attackSpeed:s.attackSpeed,critChance:s.critChance,critDamage:s.critDamage,lifeSteal:s.lifeSteal,dodge:s.dodge,blockChance:s.blockChance,timestamp:Date.now(),prefixes:[],suffixes:[]};t==="weapon"&&s.handType&&(l.handType=s.handType),t==="weapon"&&s.baseAttackInterval&&(l.baseAttackInterval=s.baseAttackInterval);const c=o.affixCount;if(c>0){const d=Math.min(2,Math.ceil(c/2)),m=Math.min(2,c-d),u=o.prefix.filter(y=>{const p=S.prefix[y];return p&&p.allowedTypes.includes(t)});for(let y=0;y<d&&u.length>0;y++){const p=Math.floor(Math.random()*u.length),k=u.splice(p,1)[0];l.prefixes.push(k);const g=S.prefix[k].stats;g&&Object.keys(g).forEach(v=>{l[v]+=g[v]})}const f=o.suffix.filter(y=>{const p=S.suffix[y];return p&&p.allowedTypes.includes(t)});for(let y=0;y<m&&f.length>0;y++){const p=Math.floor(Math.random()*f.length),k=f.splice(p,1)[0];l.suffixes.push(k);const g=S.suffix[k].stats;g&&Object.keys(g).forEach(v=>{l[v]+=g[v]})}}let r=s.name;if(l.prefixes.length>0&&(r=`${l.prefixes[Math.floor(Math.random()*l.prefixes.length)]} ${r}`),l.suffixes.length>0){const d=l.suffixes[Math.floor(Math.random()*l.suffixes.length)];r=`${r} ${d}`}return l.fullName=r,l}function he(a,e=2e3){const t=1+a/100;return Math.max(500,e/t)}function A(a){if(w[a.rarity]||w.common,a.rarity==="common")return a.name;let e=a.name;return a.prefixes&&a.prefixes.length>0&&(e=a.prefixes.join(" ")+" "+e),a.suffixes&&a.suffixes.length>0&&(e=e+" "+a.suffixes.join(" ")),e}function T(a){const t=P[a.type]?.find(s=>s.name===a.name);if(!t){if(a.name==="Rusty Sword"||!a.prefixes&&!a.suffixes||console.warn("Base template not found for item:",a),a.prefixes||a.suffixes){const o={attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0};return a.prefixes&&a.prefixes.forEach(l=>{const c=S.prefix[l]?.stats;c&&Object.keys(c).forEach(r=>{o.hasOwnProperty(r)&&(o[r]+=c[r])})}),a.suffixes&&a.suffixes.forEach(l=>{const c=S.suffix[l]?.stats;c&&Object.keys(c).forEach(r=>{o.hasOwnProperty(r)&&(o[r]+=c[r])})}),{baseStats:{attack:(a.attack||0)-o.attack,maxHp:(a.maxHp||0)-o.maxHp,attackSpeed:(a.attackSpeed||0)-o.attackSpeed,critChance:(a.critChance||0)-o.critChance,critDamage:(a.critDamage||0)-o.critDamage,dodge:(a.dodge||0)-o.dodge,blockChance:(a.blockChance||0)-o.blockChance},affixStats:o}}return{baseStats:{attack:a.attack||0,maxHp:a.maxHp||0,attackSpeed:a.attackSpeed||0,critChance:a.critChance||0,critDamage:a.critDamage||0,dodge:a.dodge||0,blockChance:a.blockChance||0},affixStats:{attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0}}}const i={attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0};return a.prefixes&&a.prefixes.forEach(s=>{const o=S.prefix[s]?.stats;o&&Object.keys(o).forEach(l=>{i.hasOwnProperty(l)&&(i[l]+=o[l])})}),a.suffixes&&a.suffixes.forEach(s=>{const o=S.suffix[s]?.stats;o&&Object.keys(o).forEach(l=>{i.hasOwnProperty(l)&&(i[l]+=o[l])})}),{baseStats:{attack:t.attack||0,maxHp:t.maxHp||0,attackSpeed:t.attackSpeed||0,critChance:t.critChance||0,critDamage:t.critDamage||0,dodge:t.dodge||0,blockChance:t.blockChance||0},affixStats:i}}class ge{constructor(){this.player={level:1,hp:100,baseHp:100,maxHp:100,attack:10,baseAttack:10,equipmentAttack:0,equipmentMaxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0,gold:0,xp:0,nextLevelXp:100,equipment:{weapon:{name:"Rusty Sword",type:"weapon",rarity:"common",attack:5,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0,price:0,baseAttackInterval:2500},offhand:null,helmet:null,body:null,legs:null,belt:null,boots:null,necklace:null,ring:null},inventory:[]},this.currentZone="basement",this.currentEnemy=null,this.unlockedZones=["basement","restArea","forest"],this.needsInventoryUpdate=!0,this.needsCharacterUpdate=!0,this.respawnTimer={isActive:!1,currentTime:0,maxTime:3e3},this.combat={isActive:!1,playerTurn:!0,lastAttackTime:0},this.attackBars={player:{currentTime:0,maxTime:2e3},enemy:{currentTime:0,maxTime:3e3}},this.activityLog=[],this.logFilter="all",this.passiveSystems={studyHabits:{lastTick:0,interval:6e4},passiveLearning:{lastTick:0,interval:1e3},enemyCounter:0},this.inventorySettings={sortBy:"name",filterBy:"all",autoSell:{enabled:!1,rarities:{common:!1,uncommon:!1,rare:!1},types:{weapon:!1,offhand:!1,helmet:!1,body:!1,legs:!1,belt:!1,boots:!1,necklace:!1,ring:!1}}},this.needsInventoryUpdate=!0,this.zones=ie,this.talents={exploration:{},power:{},wealth:{},knowledge:{}},this.ascensionCount=0,this.isShowingTalentTree=!1,this.currentDeathMessage=K()}calculateStats(){let e=this.getBaseAttackWithTalents(),t=this.player.baseHp,i=0,s=0,o=0,l=0,c=0,r=0,d=0;this.getTalentLevel("power","power_1");const m=this.getTalentLevel("power","power_2a"),u=this.getTalentLevel("power","power_2b"),f=this.getTalentLevel("power","power_3a"),y=this.getTalentLevel("power","power_3b"),p=this.getTalentLevel("power","power_3c"),k=this.getTalentLevel("power","power_4");let g=u*2,v=y*15,h=f*10,x=p*5,b=p*3;m>0&&(e*=1+m*.1),k>0&&(e*=1.5,g+=25,h+=20);for(const F in this.player.equipment){const L=this.player.equipment[F];L&&(i+=L.attack||0,s+=L.maxHp||0,o+=L.attackSpeed||0,l+=L.critChance||0,c+=L.critDamage||0,r+=L.dodge||0,d+=L.blockChance||0)}const C=(this.player.level-1)*10;this.player.attack=e+i,this.player.maxHp=t+C+s,this.player.equipmentAttack=i,this.player.equipmentMaxHp=s,this.player.attackSpeed=o+h,this.player.critChance=l+g,this.player.critDamage=c+v,this.player.dodge=r+x,this.player.blockChance=d+b,this.player.hp>this.player.maxHp&&(this.player.hp=this.player.maxHp)}addToInventory(e){if(e.addedTimestamp=Date.now(),this.shouldAutoSell(e)){this.sellItem(e);return}this.player.inventory.push(e),this.needsInventoryUpdate=!0}shouldAutoSell(e){if(!this.inventorySettings.autoSell.enabled)return!1;const t=e.rarity||"common",i=this.inventorySettings.autoSell.rarities[t],s=this.inventorySettings.autoSell.types[e.type];return i||s}sellItem(e,t=!0){const i=Math.floor((e.price!==void 0?e.price:10)*.5);return this.player.gold+=i,t&&this.addLogMessage(`💰 Sold ${e.fullName||e.name} for ${i} gold`,"shop"),i}sellAllJunk(){let e=0,t=0;const i=[];return this.player.inventory.forEach((s,o)=>{this.shouldAutoSell(s)&&i.push({item:s,index:o})}),i.reverse().forEach(({item:s,index:o})=>{e+=this.sellItem(s,!1),this.player.inventory.splice(o,1),this.needsInventoryUpdate=!0,t++}),t>0?this.addLogMessage(`💰 Sold ${t} items for ${e} total gold`,"shop"):this.addLogMessage("No items to sell based on current auto-sell settings","system"),{itemsSold:t,totalGold:e}}getSortedAndFilteredInventory(){let e=[...this.player.inventory];return this.inventorySettings.filterBy!=="all"&&(e=e.filter(t=>t.type===this.inventorySettings.filterBy)),e.sort((t,i)=>{switch(this.inventorySettings.sortBy){case"rarity":const s=["common","uncommon","rare","epic","legendary"],o=s.indexOf(t.rarity||"common");return s.indexOf(i.rarity||"common")-o;case"type":return t.type.localeCompare(i.type);case"attack":return(i.attack||0)-(t.attack||0);case"new":return(i.addedTimestamp||0)-(t.addedTimestamp||0);case"name":default:return(t.fullName||t.name).localeCompare(i.fullName||i.name)}}),e}equipItem(e,t=!1,i=-1){console.log("equipItem called with:",{item:e,fromInventory:t,inventoryIndex:i});const s=e.type;if(s==="weapon"&&e.handType==="2h"){if(this.player.equipment.offhand){const c={...this.player.equipment.offhand,type:"offhand"};c.addedTimestamp=Date.now(),this.player.inventory.push(c),this.player.equipment.offhand=null,this.addLogMessage(`Unequipped ${c.fullName||c.name} to wield 2-handed weapon`,"system")}}else if(s==="offhand"){const c=this.player.equipment.weapon;if(c&&c.handType==="2h"){this.addLogMessage("Cannot equip offhand item while wielding a 2-handed weapon!","system");return}}let o=null;this.player.equipment[s]&&(o={...this.player.equipment[s],type:s});const l={name:e.name,fullName:e.fullName||e.name,rarity:e.rarity,attack:e.attack||0,maxHp:e.maxHp||0,attackSpeed:e.attackSpeed||0,critChance:e.critChance||0,critDamage:e.critDamage||0,dodge:e.dodge||0,blockChance:e.blockChance||0,handType:e.handType||"1h",prefixes:e.prefixes||[],suffixes:e.suffixes||[]};console.log("Equipping to slot:",s,"new item:",l),this.player.equipment[s]=l,this.needsCharacterUpdate=!0,t&&i>=0&&(console.log("Removing from inventory at index:",i,"inventory before:",[...this.player.inventory]),this.player.inventory.splice(i,1),this.needsInventoryUpdate=!0,console.log("Inventory after removal:",[...this.player.inventory]),o&&(console.log("Adding previously equipped item to inventory:",o),o.addedTimestamp=Date.now(),this.player.inventory.push(o))),this.calculateStats(),console.log("Stats after equipping:",{attack:this.player.attack,maxHp:this.player.maxHp})}spawnEnemy(){const e=this.zones[this.currentZone];if(!e.enemies||e.enemies.length===0)return null;if(this.currentZone==="goblinCave"&&e.boss&&e.killCount>=e.boss.requiredKills){$e(e.boss.name);const s={...e.boss,hp:e.boss.hp,maxHp:e.boss.hp,attackInterval:e.boss.attackInterval||2e3,isBoss:!0,isLegendaryDropper:e.boss.isLegendaryDropper||!1};return e.killCount=0,this.addCombatMessage("🏴‍☠️ The Goblin King emerges from the depths!","system"),s}const t=e.enemies[Math.floor(Math.random()*e.enemies.length)];return{...t,hp:t.hp,maxHp:t.hp,attackInterval:t.attackInterval||2e3}}gainXp(e){const t=this.getTalentLevel("knowledge","knowledge_1"),i=this.getTalentLevel("knowledge","knowledge_2a"),s=this.getTalentLevel("knowledge","knowledge_4");let o=1+t*.2;o+=i*.5,s>0&&(o*=3);const l=Math.floor(e*o);for(this.player.xp+=l;this.player.xp>=this.player.nextLevelXp;)this.levelUp()}levelUp(){this.player.xp-=this.player.nextLevelXp,this.player.level++;const e=this.getTalentLevel("knowledge","knowledge_3a"),t=Math.min(.3,e*.1);this.player.nextLevelXp=Math.floor(this.player.nextLevelXp*1.2*(1-t)),this.player.maxHp+=10,this.player.hp=this.player.hp+this.player.maxHp*.4,this.player.hp>this.player.maxHp&&(this.player.hp=this.player.maxHp),document.getElementById("character-level").classList.add("level-up"),setTimeout(()=>{document.getElementById("character-level").classList.remove("level-up")},500),this.addLogMessage(`🎉 Level up! You are now level ${this.player.level}!`,"loot","level-up"),ae()}addLogMessage(e,t="system",i=""){const s={message:e,category:t,type:i,timestamp:new Date().toLocaleTimeString()};this.activityLog.push(s),this.activityLog.length>100&&this.activityLog.shift(),this.updateActivityLog()}addCombatMessage(e,t=""){this.addLogMessage(e,"combat",t)}updateActivityLog(){const e=document.getElementById("activity-messages");if(!e)return;e.innerHTML="",(this.logFilter==="all"?this.activityLog:this.activityLog.filter(i=>i.category===this.logFilter)).forEach(i=>{const s=document.createElement("div");s.className=`activity-message ${i.category} ${i.type}`,s.innerHTML=`<span class="timestamp">[${i.timestamp}]</span> ${i.message}`,e.appendChild(s)}),e.scrollTop=e.scrollHeight}setLogFilter(e){this.logFilter=e,this.updateActivityLog(),document.querySelectorAll(".filter-btn").forEach(t=>{t.classList.remove("active")}),document.querySelector(`[data-filter="${e}"]`).classList.add("active")}clearActivityLog(){this.activityLog=[],this.updateActivityLog()}save(){const e={player:this.player,currentZone:this.currentZone,unlockedZones:this.unlockedZones};localStorage.setItem("idleRPG_save",JSON.stringify(e)),alert("Game saved successfully!")}load(){const e=localStorage.getItem("idleRPG_save");if(e){const t=JSON.parse(e);return this.player={...this.player,...t.player},this.currentZone=t.currentZone||"basement",this.unlockedZones=t.unlockedZones||["basement","forest"],Object.keys(this.player.equipment).forEach(i=>{const s=this.player.equipment[i];s&&!s.type&&(s.type=i)}),this.calculateStats(),this.needsCharacterUpdate=!0,alert("Game loaded successfully!"),!0}return!1}reset(){confirm("Are you sure you want to reset your game? This cannot be undone!")&&(localStorage.removeItem("idleRPG_save"),location.reload())}getPlayerAttackInterval(){const t=this.player.equipment.weapon?.baseAttackInterval||2e3;return he(this.player.attackSpeed||0,t)}getEnemyAttackInterval(e){return e?.attackInterval||2e3}updateAttackBars(e){if(!(!this.combat.isActive||!this.currentEnemy)){if(this.attackBars.player.maxTime=this.getPlayerAttackInterval(),this.attackBars.player.currentTime+=e,this.attackBars.enemy.maxTime=this.getEnemyAttackInterval(this.currentEnemy),this.attackBars.enemy.currentTime+=e,this.attackBars.player.currentTime>=this.attackBars.player.maxTime){this.performPlayerAttack(),this.attackBars.player.currentTime=0;const t=document.getElementById("player-attack-fill");t&&(t.style.width="0%")}if(this.attackBars.enemy.currentTime>=this.attackBars.enemy.maxTime){this.performEnemyAttack(),this.attackBars.enemy.currentTime=0;const t=document.getElementById("enemy-attack-fill");t&&(t.style.width="0%")}this.updateAttackBarUI()}}updateRespawnTimer(e){this.respawnTimer.isActive&&(this.respawnTimer.currentTime+=e,this.respawnTimer.currentTime>=this.respawnTimer.maxTime&&(this.respawnTimer.isActive=!1,this.respawnTimer.currentTime=0,J()))}updatePassiveSystems(e){const t=this.getTalentLevel("knowledge","knowledge_2b");if(t>0&&e-this.passiveSystems.studyHabits.lastTick>=this.passiveSystems.studyHabits.interval){const s=Math.floor(this.player.level*.05*t);s>0&&(this.gainXp(s),this.addLogMessage(`Study Habits: Gained ${s} bonus XP from passive learning!`,"system","passive-xp")),this.passiveSystems.studyHabits.lastTick=e}const i=this.getTalentLevel("knowledge","knowledge_3c");if(i>0&&e-this.passiveSystems.passiveLearning.lastTick>=this.passiveSystems.passiveLearning.interval){const o=Math.floor(1*i);o>0&&(this.gainXp(o),(e-this.passiveSystems.passiveLearning.lastTick)%3e4<1e3&&this.addLogMessage(`Passive Learning: Gained ${o*30} XP over the last 30 seconds!`,"system","passive-xp")),this.passiveSystems.passiveLearning.lastTick=e}}updateAttackBarUI(){const e=this.attackBars.player.currentTime/this.attackBars.player.maxTime*100,t=this.attackBars.enemy.currentTime/this.attackBars.enemy.maxTime*100,i=document.getElementById("player-attack-fill"),s=document.getElementById("enemy-attack-fill");i&&(i.style.width=`${Math.min(100,e)}%`),s&&(s.style.width=`${Math.min(100,t)}%`);const o=document.getElementById("player-attack-label"),l=document.getElementById("enemy-attack-label");if(o){const c=Math.floor(this.attackBars.player.currentTime),r=Math.floor(this.attackBars.player.maxTime);o.textContent=`${c}/${r}`}if(l){const c=Math.floor(this.attackBars.enemy.currentTime),r=Math.floor(this.attackBars.enemy.maxTime);l.textContent=`${c}/${r}`}}performPlayerAttack(){if(!this.currentEnemy)return;let e=this.player.attack,t=!1;if(this.player.critChance>0&&Math.random()*100<=this.player.critChance&&(t=!0,e=Math.floor(e*(1+this.player.critDamage/100))),this.currentEnemy.hp-=e,this.currentEnemy.hp<=0){const c=document.getElementById("enemy-hp-bar");c&&(c.classList.add("instant"),c.style.width="0%",c.classList.add("respawning"),setTimeout(()=>{c.classList.remove("instant")},50))}const i=document.getElementById("enemy-hp-bar");i&&this.currentEnemy.hp>0&&U(e,i,"enemy",t);let s=`You attack ${this.currentEnemy.name} for ${e} damage`;t&&(s+=" (💥 CRITICAL HIT!)"),s+="!",this.addCombatMessage(s,t?"player-crit":"player-attack");const o=document.querySelector(".enemy-side");o&&(o.classList.add("damage-animation"),setTimeout(()=>{o.classList.remove("damage-animation")},300));const l=document.getElementById("player-image");l&&(l.classList.add("player-attacking"),setTimeout(()=>{l.classList.remove("player-attacking")},600)),this.currentEnemy.hp<=0&&this.handleEnemyDefeat()}performEnemyAttack(){if(!this.currentEnemy)return;const e=document.getElementById("enemy-image");if(e&&(console.log("Enemy attacking! Classes before:",e.className),e.classList.add("enemy-attacking"),setTimeout(()=>{console.log("Enemy attack finished! Classes after:",e.className),e.classList.remove("enemy-attacking")},600)),this.player.dodge>0&&Math.random()*100<=this.player.dodge){const r=document.getElementById("player-hp-bar");r&&U(0,r,"player",!1,!0),this.addCombatMessage(`You dodge ${this.currentEnemy.name}'s attack! 💨`,"player-dodge");return}let t=this.currentEnemy.attack,i=!1;this.player.blockChance>0&&Math.random()*100<=this.player.blockChance&&(i=!0,t=Math.floor(t*.5)),this.player.hp-=t;const s=document.getElementById("player-hp-bar");s&&U(t,s,"player",!1,!1,!1);let o=`${this.currentEnemy.name} attacks you for ${t} damage`;i&&(o+=" (🛡️ BLOCKED!)"),o+="!",this.addCombatMessage(o,i?"enemy-blocked":"enemy-attack");const l=document.querySelector(".player-side");l&&(l.classList.add("damage-animation"),setTimeout(()=>{l.classList.remove("damage-animation")},300)),this.player.hp<=0&&this.handlePlayerDeath()}handleEnemyDefeat(){this.passiveSystems.enemyCounter++;const e=this.currentEnemy.gold,t=.1+Math.random()*.9;let i=Math.floor(e*t),s=this.currentEnemy.xp;i=Math.floor(i*this.getGoldMultiplier());const l=1+this.getTalentLevel("exploration","exploration_2b")*.15;i=Math.floor(i*l);const c=this.getTalentLevel("knowledge","knowledge_3b");let r=1;c>0&&this.passiveSystems.enemyCounter%10===0&&(r=5*c,this.addLogMessage(`🌟 Experience Burst! ${r}x XP bonus on this kill!`,"loot","experience-burst")),s=Math.floor(s*this.getExperienceMultiplier()*r*l),this.player.gold+=i,this.gainXp(s),this.addLogMessage(`${this.currentEnemy.name} defeated! Gained ${i} gold and ${s} XP!`,"loot","enemy-defeated"),this.currentZone==="goblinCave"&&this.currentEnemy.name.includes("Goblin")&&!this.currentEnemy.isBoss&&(this.zones.goblinCave.killCount++,this.addCombatMessage(`Goblins defeated: ${this.zones.goblinCave.killCount}/${this.zones.goblinCave.boss.requiredKills}`,"system"));let d;const m=this.zones[this.currentZone];if(this.currentEnemy.isBoss&&this.currentEnemy.isLegendaryDropper)d=ue(),this.addLogMessage(`💎 The ${this.currentEnemy.name} dropped a legendary item! ${d.fullName}!`,"loot","enemy-defeated"),Me(this.currentEnemy.name),this.addToInventory(d);else if(this.currentZone!=="basement"){const u=m.dropChance||25,f=m.allowedRarities||["common","uncommon","rare","epic"],y=this.getItemDropMultiplier();let p=u*y;V&&(p=100),Math.random()*100<=p&&(d=me(f),this.addLogMessage(`${this.currentEnemy.name} dropped ${d.fullName}!`,"loot","enemy-defeated"),this.addToInventory(d))}this.currentEnemy=null,this.combat.isActive=!1,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,this.respawnTimer.isActive=!0,this.respawnTimer.currentTime=0}handlePlayerDeath(){this.combat.isActive=!1,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,pe(),this.currentZone==="goblinCave"&&(this.zones.goblinCave.killCount=0),this.addCombatMessage("You were defeated! Choose to ascend and gain permanent power...","player-death"),this.currentEnemy=null,this.currentDeathMessage=K(),ne(),ke()}getTalentLevel(e,t){return this.talents[e][t]||0}getBaseAttackWithTalents(){return 10+this.getTalentLevel("power","power_1")*5}getBaseMaxHpWithTalents(){return 100}getBaseAttackSpeedWithTalents(){return this.getTalentLevel("power","power_3a")*10}getBaseCritChanceWithTalents(){const e=this.getTalentLevel("power","power_2b"),t=this.getTalentLevel("power","power_4");let i=e*2;return t>0&&(i+=25),i}getBaseCritDamageWithTalents(){return 0}getBaseLifeStealWithTalents(){return 0}getBaseDodgeWithTalents(){return 0}getBaseBlockChanceWithTalents(){return 0}getExperienceMultiplier(){let e=1;const t=this.getTalentLevel("knowledge","knowledge_1"),i=this.getTalentLevel("knowledge","knowledge_2a"),s=this.getTalentLevel("knowledge","knowledge_4");return e+=t*.2,e+=i*.5,s>0&&(e*=3),e}getGoldMultiplier(){let e=1;const t=this.getTalentLevel("wealth","wealth_1"),i=this.getTalentLevel("wealth","wealth_4");return e+=t*.25,i>0&&(e*=2),e}getItemDropMultiplier(){let e=1;const t=this.getTalentLevel("wealth","wealth_2a"),i=this.getTalentLevel("wealth","wealth_4");return e+=t*.1,i>0&&(e+=.5),e}canAllocateTalent(e,t){const s=_[e].nodes.find(r=>r.id===t);if(!s)return!1;const o=this.getTalentLevel(e,t);if(o>=s.maxLevel)return!1;let l=s.cost*(o+1);if(this.getTalentLevel("knowledge","knowledge_4")>0&&(l=Math.floor(l*.5)),this.player.gold<l)return!1;for(const r of s.prerequisites)if(this.getTalentLevel(e,r)===0)return!1;return!0}allocateTalent(e,t){if(!this.canAllocateTalent(e,t))return!1;const s=_[e].nodes.find(r=>r.id===t),o=this.getTalentLevel(e,t);let l=s.cost*(o+1);return this.getTalentLevel("knowledge","knowledge_4")>0&&(l=Math.floor(l*.5)),this.player.gold-=l,this.talents[e][t]=o+1,this.addLogMessage(`Allocated ${s.name} (Level ${o+1})`,"system"),!0}getTotalTalentPoints(){let e=0;for(const t in this.talents)for(const i in this.talents[t])e+=this.talents[t][i];return e}ascend(){this.player.gold;const t=this.getTalentLevel("knowledge","knowledge_4")>0?5:1;if(this.player.level=t,this.player.hp=this.getBaseMaxHpWithTalents(),this.player.maxHp=this.getBaseMaxHpWithTalents(),this.player.attack=10,this.player.equipmentAttack=0,this.player.equipmentMaxHp=0,this.player.attackSpeed=0,this.player.critChance=0,this.player.critDamage=0,this.player.dodge=0,this.player.blockChance=0,this.player.xp=0,this.player.nextLevelXp=100,t>1){for(let i=1;i<t;i++)this.player.maxHp+=10,this.player.nextLevelXp=Math.floor(this.player.nextLevelXp*1.2);this.player.hp=this.player.maxHp,this.addLogMessage(`🌟 Enlightened One: Starting at level ${t}!`,"system","enlightened-start")}this.player.inventory=[],this.player.equipment={weapon:{name:"Rusty Sword",type:"weapon",rarity:"common",attack:5,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0,price:0,baseAttackInterval:2500},offhand:null,helmet:null,body:null,legs:null,belt:null,boots:null,necklace:null,ring:null},this.unlockedZones=["basement","restArea","forest"],this.currentZone="basement",this.currentEnemy=null,this.combat.isActive=!1,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,this.applyTalentBonuses(),this.ascensionCount++,this.addLogMessage(`Ascension ${this.ascensionCount} complete! Your journey begins anew with ${this.getTotalTalentPoints()} talent points.`,"system"),this.needsCharacterUpdate=!0,this.needsInventoryUpdate=!0}applyTalentBonuses(){this.getTalentLevel("knowledge","knowledge_4")>0&&(this.player.level=5,this.player.xp=0,this.player.nextLevelXp=this.calculateXpForLevel(6));const t=this.getTalentLevel("power","power_1");this.player.attack+=t*5,this.getTalentLevel("exploration","exploration_1"),this.calculateStats()}calculateXpForLevel(e){return Math.floor(100*Math.pow(1.1,e-1))}}const n=new ge;function U(a,e,t="enemy",i=!1,s=!1,o=!1){const l=document.createElement("div");if(l.className="floating-damage",s?(l.textContent="MISS",l.classList.add("miss")):o?(l.textContent=`+${a}`,l.classList.add("heal")):(l.textContent=`-${a}`,l.classList.add(t),i&&(l.classList.add("critical"),l.textContent=`CRIT! -${a}`)),!e)return;const c=e.getBoundingClientRect();l.style.position="fixed",l.style.left=`${c.left+c.width/2+Math.random()*40-20}px`,l.style.top=`${c.top+c.height/2}px`,l.style.transform="translate(-50%, -50%)",document.body.appendChild(l),setTimeout(()=>{l.parentNode&&l.parentNode.removeChild(l)},1500)}function E(){const a=document.getElementById("inventory-gold");a&&(a.textContent=n.player.gold,a.style.fontSize="0.7rem");const e=document.getElementById("shop-gold");e&&(e.textContent=n.player.gold);const t=document.getElementById("player-attack");t&&(t.textContent=n.player.attack),fe(),document.getElementById("character-level").textContent=n.player.level,document.getElementById("character-xp-text").textContent=`${n.player.xp} / ${n.player.nextLevelXp}`;const i=n.player.xp/n.player.nextLevelXp*100;document.getElementById("character-xp-fill").style.width=`${i}%`;const s=n.player.hp/n.player.maxHp*100;if(document.getElementById("player-hp-bar").style.width=`${s}%`,document.getElementById("player-hp-text").textContent=`${n.player.hp}/${n.player.maxHp}`,Be(),n.currentEnemy){document.getElementById("enemy-title").textContent=n.currentEnemy.name,document.getElementById("enemy-attack").textContent=n.currentEnemy.attack;const o=document.getElementById("enemy-image");o&&(o.classList.remove("slime","goblin","orc","skeleton","dragon"),o.classList.add("enemy-image",n.currentEnemy.imageClass),o.style.display="block",o.style.visibility="visible");const l=n.currentEnemy.hp/n.currentEnemy.maxHp*100,c=document.getElementById("enemy-hp-bar");c&&(c.style.width=`${l}%`,c.classList.remove("respawning")),document.getElementById("enemy-hp-text").textContent=`${n.currentEnemy.hp}/${n.currentEnemy.maxHp}`}else if(n.respawnTimer.isActive){const o=Math.ceil((n.respawnTimer.maxTime-n.respawnTimer.currentTime)/1e3),l=n.respawnTimer.currentTime/n.respawnTimer.maxTime*100;document.getElementById("enemy-title").textContent=`Respawning in ${o}s...`,document.getElementById("enemy-attack").textContent="-";const c=document.getElementById("enemy-hp-bar");c&&(c.style.width=`${l}%`,c.classList.add("respawning")),document.getElementById("enemy-hp-text").textContent="";const r=document.getElementById("enemy-image");r&&(r.style.visibility="hidden")}else{document.getElementById("enemy-title").textContent="No Enemy",document.getElementById("enemy-attack").textContent="-";const o=document.getElementById("enemy-hp-bar");o&&(o.style.width="0%",o.classList.remove("respawning"));const l=document.getElementById("enemy-hp-text");l&&(l.textContent="");const c=document.getElementById("enemy-image");c&&(c.style.visibility="hidden")}if(n.needsCharacterUpdate){for(const o in n.player.equipment){const l=n.player.equipment[o],c=document.getElementById(`${o}-item`),r=document.getElementById(`${o}-tooltip`);if(c){const d=o.charAt(0).toUpperCase()+o.slice(1);if(l){const u=Z(l);c.innerHTML=`
            <div class="character-slot-name">${d}</div>
            <div class="character-slot-icon">${u}</div>
            <div class="equipped-item-name">${l.name}</div>
          `}else{const u=Z(o);c.innerHTML=`
            <div class="character-slot-name">${d}</div>
            <div class="character-slot-icon empty">${u}</div>
            <div class="empty-slot">Empty</div>
          `}const m=c.closest(".character-slot");l?(m.classList.add("has-item"),r&&(ye(r,l),r.style.display="block")):(m.classList.remove("has-item"),c.style.color="",r&&(r.innerHTML="",r.style.display="none"))}}n.needsCharacterUpdate=!1}n.needsInventoryUpdate&&(console.log("Updating inventory display"),W())}function fe(){document.getElementById("stats-total-attack").textContent=n.player.attack,document.getElementById("stats-max-hp").textContent=n.player.maxHp;const a=n.getPlayerAttackInterval();document.getElementById("stats-actual-attack-speed").textContent=`${(a/1e3).toFixed(1)}s`,document.getElementById("stats-crit-chance").textContent=`${n.player.critChance||0}%`,document.getElementById("stats-crit-damage").textContent=`${n.player.critDamage||0}%`,document.getElementById("stats-dodge").textContent=`${n.player.dodge||0}%`,document.getElementById("stats-block-chance").textContent=`${n.player.blockChance||0}%`,document.getElementById("stats-xp-multiplier").textContent=`${n.getExperienceMultiplier().toFixed(2)}x`,document.getElementById("stats-gold-multiplier").textContent=`${n.getGoldMultiplier().toFixed(2)}x`,document.getElementById("stats-item-drop-chance").textContent=`${(25*n.getItemDropMultiplier()).toFixed(0)}%`;const e=document.getElementById("stats-total-attack"),t=document.getElementById("stats-max-hp");e&&(e.className="stat-value",n.player.equipmentAttack>0&&e.classList.add("positive")),t&&(t.className="stat-value",n.player.equipmentMaxHp>0&&t.classList.add("positive")),["crit-chance","crit-damage","dodge","block-chance"].forEach(r=>{const d=document.getElementById(`stats-${r}`);if(d){const m=parseInt(d.textContent);d.className="stat-value",m>0&&d.classList.add("positive")}});const s=document.getElementById("stats-xp-multiplier"),o=document.getElementById("stats-gold-multiplier"),l=document.getElementById("stats-item-drop-chance");s&&(s.className="stat-value",n.getExperienceMultiplier()>1&&s.classList.add("positive")),o&&(o.className="stat-value",n.getGoldMultiplier()>1&&o.classList.add("positive")),l&&(l.className="stat-value",n.getItemDropMultiplier()>1&&l.classList.add("positive"));const c=document.getElementById("stats-actual-attack-speed");c&&(c.className="stat-value",n.player.attackSpeed>0&&c.classList.add("positive"))}function ye(a,e){const t=w[e.rarity]||w.common,i=t.color;if(!e.type){for(const[m,u]of Object.entries(n.player.equipment))if(u===e){e.type=m;break}}if(!e.type){const m=[];e.attack&&m.push(`<div class="tooltip-stat-line"><span>Attack:</span><span>${e.attack}</span></div>`),e.maxHp&&m.push(`<div class="tooltip-stat-line"><span>Max HP:</span><span>${e.maxHp}</span></div>`),e.baseAttackInterval&&m.push(`<div class="tooltip-stat-line"><span>Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),e.attackSpeed&&m.push(`<div class="tooltip-stat-line"><span>Attack Speed:</span><span>${e.attackSpeed}%</span></div>`),e.critChance&&m.push(`<div class="tooltip-stat-line"><span>Critical Chance:</span><span>${e.critChance}%</span></div>`),e.critDamage&&m.push(`<div class="tooltip-stat-line"><span>Critical Damage:</span><span>${e.critDamage}%</span></div>`),e.dodge&&m.push(`<div class="tooltip-stat-line"><span>Dodge:</span><span>${e.dodge}%</span></div>`),e.blockChance&&m.push(`<div class="tooltip-stat-line"><span>Block Chance:</span><span>${e.blockChance}%</span></div>`),a.innerHTML=`
      <div class="tooltip-name" style="color: ${i};">
        ${A(e)}
      </div>
      <div class="tooltip-stats">
        ${m.join("")}
      </div>
      <div class="tooltip-rarity" style="color: ${i};">
        ${t.name}
      </div>
    `;return}const{baseStats:s,affixStats:o}=T(e);if(!s||!o){console.error("Error separating item stats:",e);const m=[];e.attack&&m.push(`<div class="tooltip-stat-line stat-base"><span>Attack:</span><span>${e.attack}</span></div>`),e.maxHp&&m.push(`<div class="tooltip-stat-line stat-base"><span>Max HP:</span><span>${e.maxHp}</span></div>`),e.baseAttackInterval&&m.push(`<div class="tooltip-stat-line stat-base"><span>Base Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),e.attackSpeed&&m.push(`<div class="tooltip-stat-line stat-base"><span>Attack Speed:</span><span>${e.attackSpeed}%</span></div>`),e.critChance&&m.push(`<div class="tooltip-stat-line stat-base"><span>Critical Chance:</span><span>${e.critChance}%</span></div>`),e.critDamage&&m.push(`<div class="tooltip-stat-line stat-base"><span>Critical Damage:</span><span>${e.critDamage}%</span></div>`),e.dodge&&m.push(`<div class="tooltip-stat-line stat-base"><span>Dodge:</span><span>${e.dodge}%</span></div>`),e.blockChance&&m.push(`<div class="tooltip-stat-line stat-base"><span>Block Chance:</span><span>${e.blockChance}%</span></div>`),a.innerHTML=`
      <div class="tooltip-name" style="color: ${i};">
        ${A(e)}
      </div>
      <div class="tooltip-stats">
        ${m.join("")}
      </div>
      <div class="tooltip-rarity" style="color: ${i};">
        ${t.name}
      </div>
    `;return}const l=[],c=[];(e.type==="weapon"||s.attack>0)&&l.push(`<div class="tooltip-stat-line stat-base"><span>Attack:</span><span>${s.attack}</span></div>`),e.type==="weapon"&&e.baseAttackInterval&&l.push(`<div class="tooltip-stat-line stat-base"><span>Base Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),(["helmet","body","legs","boots","offhand"].includes(e.type)||s.maxHp>0)&&l.push(`<div class="tooltip-stat-line stat-base"><span>Max HP:</span><span>${s.maxHp}</span></div>`);const r=[{key:"attackSpeed",label:"Attack Speed",unit:"%"},{key:"critChance",label:"Critical Chance",unit:"%"},{key:"critDamage",label:"Critical Damage",unit:"%"},{key:"lifeSteal",label:"Life Steal",unit:"%"},{key:"dodge",label:"Dodge",unit:"%"},{key:"blockChance",label:"Block Chance",unit:"%"}];r.forEach(({key:m,label:u,unit:f})=>{s[m]>0&&l.push(`<div class="tooltip-stat-line stat-base"><span>${u}:</span><span>${s[m]}${f}</span></div>`)}),o.attack>0&&c.push(`<div class="tooltip-stat-line stat-neutral"><span>Attack:</span><span>${o.attack}</span></div>`),o.maxHp>0&&c.push(`<div class="tooltip-stat-line stat-neutral"><span>Max HP:</span><span>${o.maxHp}</span></div>`),r.forEach(({key:m,label:u,unit:f})=>{o[m]>0&&c.push(`<div class="tooltip-stat-line stat-neutral"><span>${u}:</span><span>${o[m]}${f}</span></div>`)});let d=l.join("");l.length>0&&c.length>0&&(d+='<div class="tooltip-separator"></div>'),d+=c.join(""),a.innerHTML=`
    <div class="tooltip-name" style="color: ${i};">
      ${A(e)}
    </div>
    <div class="tooltip-stats">
      ${d}
    </div>
    <div class="tooltip-rarity" style="color: ${i};">
      ${t.name}
    </div>
  `}function ve(a){const e=n.player.equipment[a.type];if(!e)return!0;const t={attack:a.attack||0,maxHp:a.maxHp||0,attackSpeed:a.attackSpeed||0,critChance:a.critChance||0,critDamage:a.critDamage||0,lifeSteal:a.lifeSteal||0,dodge:a.dodge||0,blockChance:a.blockChance||0},i={attack:e.attack||0,maxHp:e.maxHp||0,attackSpeed:e.attackSpeed||0,critChance:e.critChance||0,critDamage:e.critDamage||0,lifeSteal:e.lifeSteal||0,dodge:e.dodge||0,blockChance:e.blockChance||0};let s=0,o=0;for(const l in t)(t[l]>0||i[l]>0)&&(o++,t[l]>i[l]&&s++);return o>0&&s/o>.5}function Z(a){if(typeof a=="string"){const l={weapon:"sword",offhand:"buckler",helmet:"helmet",body:"armor",legs:"pants",belt:"leather-belt",boots:"boots",necklace:"amulet",ring:"ring"}[a]||"sword";return`<img src="${O(`assets/gear/${l}.svg`)}" alt="${a}" class="gear-icon" />`}let t=a.name.toLowerCase().replace(/\s+/g,"-");const i={sword:"sword",axe:"axe",mace:"mace",dagger:"dagger",staff:"staff",greatsword:"greatsword",battleaxe:"battleaxe",warhammer:"warhammer",buckler:"buckler","round-shield":"round-shield","tower-shield":"tower-shield",tome:"tome",helmet:"helmet",cap:"cap",crown:"crown",hood:"hood",armor:"armor",robe:"robe",vest:"vest",tunic:"tunic",greaves:"greaves",pants:"pants",leggings:"leggings",shorts:"shorts",sandals:"sandals",boots:"boots","heavy-boots":"heavy-boots","speed-boots":"speed-boots","leather-belt":"leather-belt","utility-belt":"utility-belt","chain-belt":"chain-belt","war-belt":"war-belt",amulet:"amulet",pendant:"pendant",ring:"ring",bracelet:"bracelet"};i[t]&&(t=i[t]);const s=a.rarity||"common";return`<img src="${O(`assets/gear/${t}.svg`)}" alt="${a.name}" class="gear-icon rarity-${s}" loading="eager" onerror="this.style.display='none';" />`}function W(){const a=document.getElementById("inventory-items");if(!a){console.error("Inventory div not found!");return}N(),a.innerHTML="";const e=n.getSortedAndFilteredInventory();if(e.length===0){const t=document.createElement("div");t.className="inventory-empty",t.textContent=n.inventorySettings.filterBy==="all"?"No items in inventory":`No ${n.inventorySettings.filterBy} items in inventory`,t.style.color="var(--light-color)",t.style.fontStyle="italic",t.style.textAlign="center",t.style.padding="20px",a.appendChild(t);return}e.forEach(t=>{const i=n.player.inventory.findIndex(l=>l===t||l.fullName===t.fullName&&l.type===t.type),s=document.createElement("div");s.className="inventory-item",s.setAttribute("data-item-index",i),ve(t)&&s.classList.add("stat-improvement");const o=t.rarity&&w[t.rarity]?w[t.rarity].color:"#9CA3AF";Math.floor((t.price!==void 0?t.price:10)*.5),s.innerHTML=`
      <div class="item-icon">${Z(t)}</div>
      <div class="item-name" style="color: ${o}; font-weight: bold;">
        ${A(t)}
      </div>
    `,s.addEventListener("mouseenter",l=>{$=t,I=l,X(l,t,R)}),s.addEventListener("mouseleave",l=>{$=null,I=null,N()}),s.addEventListener("mousemove",l=>{I=l,oe(l)}),s.addEventListener("click",l=>{if(l.preventDefault(),l.stopPropagation(),N(),l.button===0){const c=parseInt(s.getAttribute("data-item-index")),r=n.player.inventory[c];if(r&&c>=0&&c<n.player.inventory.length){const d={...r};n.equipItem(d,!0,c),n.addLogMessage(`✨ Equipped ${d.fullName||d.name}!`,"system"),s.classList.add("equipping"),setTimeout(()=>{E()},300)}}}),s.addEventListener("contextmenu",l=>{l.preventDefault(),l.stopPropagation(),N();const c=parseInt(s.getAttribute("data-item-index")),r=n.player.inventory[c];r&&c>=0&&c<n.player.inventory.length&&(n.sellItem(r),n.player.inventory.splice(c,1),n.needsInventoryUpdate=!0,s.classList.add("selling"),setTimeout(()=>{E()},300))}),a.appendChild(s),n.needsInventoryUpdate=!1})}function J(){if(n.currentZone!=="restArea"&&!n.currentEnemy){if(n.currentEnemy=n.spawnEnemy(),!n.currentEnemy)return;n.addCombatMessage(`A wild ${n.currentEnemy.name} appears!`),n.combat.isActive=!0,n.combat.lastAttackTime=Date.now(),n.attackBars.player.currentTime=0,n.attackBars.enemy.currentTime=0,n.attackBars.player.maxTime=n.getPlayerAttackInterval(),n.attackBars.enemy.maxTime=n.getEnemyAttackInterval(n.currentEnemy),E()}}function ke(){const a=document.getElementById("death-modal");a.style.display="flex",n.combat.isActive=!1}function be(){const a=document.getElementById("death-modal");a.style.display="none",xe()}function xe(){const a=document.getElementById("talent-tree-modal");a.style.display="flex",n.isShowingTalentTree=!0,Q(),ee()}function we(){const a=document.getElementById("talent-tree-modal");a.style.display="none",n.isShowingTalentTree=!1,n.ascend(),M("basement"),E()}function Q(){setTimeout(()=>{Object.keys(_).forEach(a=>{const e=_[a],t=document.getElementById(`pathway-${a}`);if(!t)return;let i=t.querySelector(".talent-nodes-container"),s=t.querySelector(".talent-connections");if(i||(i=document.getElementById(`${a}-nodes`)),s||(s=document.getElementById(`${a}-connections`)),!i||!s)return;i.innerHTML="",s.innerHTML="";const o=i.clientWidth||180,l=i.clientHeight||350,c=60,r=Math.max(...e.nodes.map(u=>u.position.x)),d=Math.max(...e.nodes.map(u=>u.position.y));if(r===0||d===0)return;const m={};e.nodes.forEach(u=>{const f=n.getTalentLevel(a,u.id),y=n.canAllocateTalent(a,u.id);let p=u.cost*(f+1);n.getTalentLevel("knowledge","knowledge_4")>0&&(p=Math.floor(p*.5));const g=u.position.x/r*(o-c)+c/2,v=u.position.y/d*(l-c)+c/2;m[u.id]={x:g,y:v};const h=document.createElement("div");h.className=`talent-node tier-${u.tier} ${f>0?"allocated":""} ${y?"available":"locked"}`,h.dataset.pathway=a,h.dataset.talent=u.id,h.style.left=`${g}px`,h.style.top=`${v}px`,h.innerHTML=`
          ${f>0?`<div class="purchase-counter">${f}</div>`:""}
          <div class="talent-icon">${u.icon}</div>
        `,h.addEventListener("mouseenter",x=>{Se(x,u,f,p)}),h.addEventListener("mouseleave",()=>{Ee()}),h.addEventListener("mousemove",x=>{te(x)}),h.addEventListener("click",()=>{n.canAllocateTalent(a,u.id)&&(n.allocateTalent(a,u.id),ee())}),i.appendChild(h)}),e.nodes.forEach(u=>{u.prerequisites&&u.prerequisites.length>0&&u.prerequisites.forEach(f=>{e.nodes.find(p=>p.id===f)&&m[u.id]&&m[f]&&Ce(s,m[f],m[u.id],n.getTalentLevel(a,f)>0,n.canAllocateTalent(a,u.id))})})})},100)}function Ce(a,e,t,i,s){const o=document.createElementNS("http://www.w3.org/2000/svg","line");o.setAttribute("x1",e.x),o.setAttribute("y1",e.y),o.setAttribute("x2",t.x),o.setAttribute("y2",t.y);let l="talent-connection-line";i&&(l+=" active"),s&&(l+=" available"),o.setAttribute("class",l),a.appendChild(o)}function ee(){const a=document.getElementById("talent-gold");a&&(a.textContent=n.player.gold);const e=document.getElementById("talent-points");e&&(e.textContent=n.getTotalTalentPoints());const t=document.getElementById("ascension-count");t&&(t.textContent=n.ascensionCount),Q()}function Se(a,e,t,i){const s=document.getElementById("talent-tooltip"),o=document.getElementById("talent-tooltip-name"),l=document.getElementById("talent-tooltip-level"),c=document.getElementById("talent-tooltip-description"),r=document.getElementById("talent-tooltip-effect"),d=document.getElementById("talent-tooltip-cost");s&&o&&l&&c&&r&&d&&(o.textContent=e.name,l.textContent=`${t}/${e.maxLevel}`,c.textContent=e.description,r.textContent=e.effect,t>=e.maxLevel?d.textContent="Max Level":d.textContent=`Cost: ${i} gold`,s.style.display="block",s.classList.add("visible"),te(a))}function Ee(){const a=document.getElementById("talent-tooltip");a&&(a.classList.remove("visible"),setTimeout(()=>{a.classList.contains("visible")||(a.style.display="none")},200))}function te(a){const e=document.getElementById("talent-tooltip");if(e&&e.style.display==="block"){let t=a.clientX+12,i=a.clientY-8-e.offsetHeight;i<0&&(i=a.clientY+12);const s=e.getBoundingClientRect(),o=window.innerWidth,l=window.innerHeight;t+s.width>o&&(t=o-s.width-8),i+s.height>l&&(i=l-s.height-8),t<0&&(t=8),i<0&&(i=8),e.style.left=t+"px",e.style.top=i+"px"}}function D(a,e,t,i,s=null){const o=document.getElementById("zone-tooltip"),l=document.getElementById("zone-tooltip-icon"),c=document.getElementById("zone-tooltip-title"),r=document.getElementById("zone-tooltip-description"),d=document.getElementById("zone-tooltip-content");if(!o||!l||!c||!r||!d)return;o.style.display="block",setTimeout(()=>o.classList.add("visible"),10);const m={forest:"🌲",cave:"🕳️",goblinCave:"👹",mountain:"🏔️"};l.textContent=m[e]||"🗺️",c.textContent=t.name,r.textContent=t.description;let u="";if(t.enemies&&t.enemies.length>0&&(u+=`
      <div class="zone-tooltip-enemies">
        <div class="zone-tooltip-enemies-title">⚔️ Enemies:</div>
        <div class="zone-tooltip-enemy-list">
          ${t.enemies.map(f=>`• ${f.name} (HP: ${f.hp}, ATK: ${f.attack})`).join("<br>")}
        </div>
      </div>
    `),e==="goblinCave"&&t.boss&&(u+=`
      <div class="zone-tooltip-boss">
        <div class="zone-tooltip-boss-title">👑 Boss: ${t.boss.name}</div>
        <div class="zone-tooltip-boss-info">HP: ${t.boss.hp}, ATK: ${t.boss.attack}<br>Requires ${t.boss.requiredKills} goblin kills<br>Drops legendary items!</div>
      </div>
    `),!i)if(s){const f=n.player.level;u+=`
        <div class="zone-tooltip-unlock">
          <div class="zone-tooltip-unlock-title">🔒 Zone Locked</div>
          <div class="zone-tooltip-unlock-req">Required Level: ${s.level}</div>
          <div class="zone-tooltip-unlock-current">Current Level: ${f}</div>
        </div>
      `}else u+=`
        <div class="zone-tooltip-unlock">
          <div class="zone-tooltip-unlock-title">🔒 Zone Locked</div>
          <div class="zone-tooltip-unlock-req">Complete more areas to unlock</div>
        </div>
      `;d.innerHTML=u,o.style.display="block",o.classList.add("visible"),B(a)}function q(){const a=document.getElementById("zone-tooltip");a&&(a.classList.remove("visible"),setTimeout(()=>{a.classList.contains("visible")||(a.style.display="none")},200))}function B(a){const e=document.getElementById("zone-tooltip");if(e&&e.style.display==="block"){const t=a.clientX+15,i=a.clientY+15,s=e.getBoundingClientRect(),o=window.innerWidth,l=window.innerHeight;let c=t,r=i;t+s.width>o&&(c=a.clientX-s.width-15),i+s.height>l&&(r=a.clientY-s.height-15),e.style.left=c+"px",e.style.top=r+"px"}}function M(a){n.currentZone==="goblinCave"&&a!=="goblinCave"&&(n.zones.goblinCave.killCount=0),n.currentZone=a,n.currentEnemy=null,n.combat.isActive=!1,document.querySelectorAll(".zone-btn").forEach(i=>{i.classList.remove("active")}),document.querySelector(`[data-zone="${a}"]`).classList.add("active");const e=document.querySelector(".combat-area"),t=document.getElementById("shop-area");a==="restArea"?(e.style.display="grid",t.style.display="none",n.addLogMessage(`${n.zones[a].name} - ${n.zones[a].description}`,"system")):(e.style.display="grid",t.style.display="none",n.addLogMessage(`Entered ${n.zones[a].name}. ${n.zones[a].description}`,"system"),setTimeout(()=>J(),500)),E()}function Le(){const a=document.getElementById("zone-buttons"),e={forest:{level:1},cave:{level:5,message:"The Mysterious Cave is now accessible!"},goblinCave:{level:8,message:"You discovered the Goblin Cave!"},mountain:{level:12,message:"The Snowy Mountains path has opened!"}};let t={};for(const o in e)t[o]={...e[o]};const i=n.getTalentLevel("exploration","exploration_1");if(i>0)for(const o in t)t[o].level=Math.max(1,t[o].level-2*i);const s=Object.entries(n.zones).sort(([,o],[,l])=>(o.zoneNumber||0)-(l.zoneNumber||0));for(const[o,l]of s){const c=document.createElement("button"),r=n.unlockedZones.includes(o);c.className=`zone-btn ${o==="town"?"town":""} ${r?"":"locked"}`,c.textContent=l.name,c.setAttribute("data-zone",o),r?c.addEventListener("click",()=>M(o)):c.addEventListener("click",()=>{const d=t[o];d?n.addLogMessage(`This zone is locked. Reach level ${d.level} to unlock it!`,"system"):n.addLogMessage("This zone is locked. Complete more areas to unlock it!","system")}),r?l.enemies&&l.enemies.length>0?(c.addEventListener("mouseenter",d=>{D(d,o,l,!0)}),c.addEventListener("mouseleave",()=>{q()}),c.addEventListener("mousemove",d=>{B(d)})):(c.addEventListener("mouseenter",d=>{D(d,o,l,!0)}),c.addEventListener("mouseleave",()=>{q()}),c.addEventListener("mousemove",d=>{B(d)})):(c.addEventListener("mouseenter",d=>{const m=t[o]?{...t[o]}:null;D(d,o,l,!1,m)}),c.addEventListener("mouseleave",()=>{q()}),c.addEventListener("mousemove",d=>{B(d)})),a.appendChild(c)}}function Te(){const a={forest:{level:1},cave:{level:5,message:"The Mysterious Cave is now accessible!"},goblinCave:{level:8,message:"You discovered the Goblin Cave!"},mountain:{level:12,message:"The Snowy Mountains path has opened!"}};let e={};for(const s in a)e[s]={...a[s]};const t=n.getTalentLevel("exploration","exploration_1");if(t>0)for(const s in e)e[s].level=Math.max(1,e[s].level-2*t);document.querySelectorAll(".zone-btn").forEach(s=>{const o=s.getAttribute("data-zone"),l=n.zones[o],c=n.unlockedZones.includes(o),r=s.cloneNode(!0);s.parentNode.replaceChild(r,s),c?r.addEventListener("click",()=>M(o)):r.addEventListener("click",()=>{const d=e[o];d?n.addLogMessage(`This zone is locked. Reach level ${d.level} to unlock it!`,"system"):n.addLogMessage("This zone is locked. Complete more areas to unlock it!","system")}),c?(r.addEventListener("mouseenter",d=>{D(d,o,l,!0)}),r.addEventListener("mouseleave",()=>{q()}),r.addEventListener("mousemove",d=>{B(d)})):(r.addEventListener("mouseenter",d=>{const m=e[o]?{...e[o]}:null;D(d,o,l,!1,m)}),r.addEventListener("mouseleave",()=>{q()}),r.addEventListener("mousemove",d=>{B(d)}))})}function ae(){const a=n.player.level;let e=!1;const t={forest:{level:1},cave:{level:5,message:"The Mysterious Cave is now accessible!"},goblinCave:{level:8,message:"You discovered the Goblin Cave!"},mountain:{level:12,message:"The Snowy Mountains path has opened!"}};let i={};for(const o in t)i[o]={...t[o]};const s=n.getTalentLevel("exploration","exploration_1");if(s>0)for(const o in i)i[o].level=Math.max(1,i[o].level-2*s);for(const[o,l]of Object.entries(i))!n.unlockedZones.includes(o)&&a>=l.level&&(n.unlockedZones.push(o),n.addLogMessage(l.message,"system"),e=!0);Te(),e&&Ie()}function Ie(){document.querySelectorAll(".zone-btn").forEach(e=>{const t=e.getAttribute("data-zone");if(n.unlockedZones.includes(t)&&e.classList.contains("locked")){e.classList.remove("locked");const s=e.cloneNode(!0);s.addEventListener("click",()=>M(t));const o=n.zones[t];s.addEventListener("mouseenter",l=>{D(l,t,o,!0)}),s.addEventListener("mouseleave",()=>{q()}),s.addEventListener("mousemove",l=>{B(l)}),e.parentNode.replaceChild(s,e)}})}function Be(){const a=document.getElementById("kill-counter"),e=document.getElementById("kill-counter-text");if(n.currentZone==="goblinCave"){const t=n.zones.goblinCave;a.style.display="block",e.textContent=`Goblins defeated: ${t.killCount}/${t.boss.requiredKills}`}else a.style.display="none"}function $e(a){const e=document.getElementById("boss-warning"),t=document.getElementById("boss-warning-name");t.textContent=a,e.style.display="block",setTimeout(()=>{e.style.display="none"},2e3)}function Me(a){const e=document.getElementById("victory-message"),t=document.getElementById("victory-subtext");t.textContent=`The ${a} has been defeated!`,e.style.display="block",setTimeout(()=>{e.style.display="none"},4e3)}function ne(){const a=document.getElementById("end-run-btn");a&&(a.textContent=`💀 ${n.currentDeathMessage}`,a.title=`End current run: ${n.currentDeathMessage}`)}document.getElementById("save-game").addEventListener("click",()=>n.save());document.getElementById("load-game").addEventListener("click",()=>{n.load()&&(E(),M(n.currentZone))});document.getElementById("reset-game").addEventListener("click",()=>n.reset());document.getElementById("end-run-btn").addEventListener("click",()=>{confirm(`Are you sure you want to ${n.currentDeathMessage.toLowerCase()}? This will end your current run and trigger ascension.`)&&(n.player.hp=0,n.handlePlayerDeath())});document.getElementById("ascend-btn").addEventListener("click",()=>be());document.getElementById("confirm-ascend").addEventListener("click",()=>we());document.querySelectorAll(".character-slot").forEach(a=>{a.addEventListener("click",()=>{const e=a.getAttribute("data-slot"),t=n.player.equipment[e];if(t){const i={...t,type:e,addedTimestamp:Date.now()};n.player.inventory.push(i),n.player.equipment[e]=null,n.needsCharacterUpdate=!0,n.needsInventoryUpdate=!0,n.calculateStats(),n.addLogMessage(`Unequipped ${t.fullName||t.name}`,"system"),a.classList.add("damage-animation"),setTimeout(()=>{a.classList.remove("damage-animation"),E()},300)}else n.addLogMessage(`No item equipped in ${e} slot`,"system")})});document.querySelectorAll(".stat-tooltip-item").forEach(a=>{const e=a.getAttribute("data-tooltip");a.addEventListener("mouseenter",t=>{De(t,e)}),a.addEventListener("mouseleave",()=>{qe()}),a.addEventListener("mousemove",t=>{le(t)})});let Y=0,G=0;const He=100;function se(a=performance.now()){G===0&&(G=a);const e=a-G;G=a,n.updatePassiveSystems(a),n.combat.isActive&&n.currentEnemy&&n.currentZone!=="restArea"&&n.updateAttackBars(e),n.respawnTimer.isActive&&n.currentZone!=="restArea"&&n.updateRespawnTimer(e),a-Y>=He&&(E(),Y=a),requestAnimationFrame(se)}function Ae(){n.calculateStats(),ae(),Le(),M("basement"),ne(),document.querySelectorAll(".filter-btn").forEach(a=>{a.addEventListener("click",()=>{const e=a.getAttribute("data-filter");n.setLogFilter(e)})}),document.getElementById("clear-log").addEventListener("click",()=>{confirm("Clear all activity log entries?")&&n.clearActivityLog()}),document.getElementById("inventory-sort").addEventListener("change",a=>{n.inventorySettings.sortBy=a.target.value,n.needsInventoryUpdate=!0,W()}),document.getElementById("inventory-filter").addEventListener("change",a=>{n.inventorySettings.filterBy=a.target.value,n.needsInventoryUpdate=!0,W()}),document.getElementById("auto-sell-btn").addEventListener("click",()=>{document.getElementById("auto-sell-common").checked=n.inventorySettings.autoSell.rarities.common,document.getElementById("auto-sell-uncommon").checked=n.inventorySettings.autoSell.rarities.uncommon,document.getElementById("auto-sell-rare").checked=n.inventorySettings.autoSell.rarities.rare,document.getElementById("auto-sell-weapons").checked=n.inventorySettings.autoSell.types.weapon,document.getElementById("auto-sell-offhand").checked=n.inventorySettings.autoSell.types.offhand,document.getElementById("auto-sell-helmets").checked=n.inventorySettings.autoSell.types.helmet,document.getElementById("auto-sell-body").checked=n.inventorySettings.autoSell.types.body,document.getElementById("auto-sell-legs").checked=n.inventorySettings.autoSell.types.legs,document.getElementById("auto-sell-belt").checked=n.inventorySettings.autoSell.types.belt,document.getElementById("auto-sell-boots").checked=n.inventorySettings.autoSell.types.boots,document.getElementById("auto-sell-necklaces").checked=n.inventorySettings.autoSell.types.necklace,document.getElementById("auto-sell-rings").checked=n.inventorySettings.autoSell.types.ring,document.getElementById("auto-sell-modal").style.display="flex"}),document.getElementById("close-auto-sell").addEventListener("click",()=>{document.getElementById("auto-sell-modal").style.display="none"}),document.getElementById("save-auto-sell").addEventListener("click",()=>{if(n.inventorySettings.autoSell.rarities.common=document.getElementById("auto-sell-common").checked,n.inventorySettings.autoSell.rarities.uncommon=document.getElementById("auto-sell-uncommon").checked,n.inventorySettings.autoSell.rarities.rare=document.getElementById("auto-sell-rare").checked,n.inventorySettings.autoSell.types.weapon=document.getElementById("auto-sell-weapons").checked,n.inventorySettings.autoSell.types.offhand=document.getElementById("auto-sell-offhand").checked,n.inventorySettings.autoSell.types.helmet=document.getElementById("auto-sell-helmets").checked,n.inventorySettings.autoSell.types.body=document.getElementById("auto-sell-body").checked,n.inventorySettings.autoSell.types.legs=document.getElementById("auto-sell-legs").checked,n.inventorySettings.autoSell.types.belt=document.getElementById("auto-sell-belt").checked,n.inventorySettings.autoSell.types.boots=document.getElementById("auto-sell-boots").checked,n.inventorySettings.autoSell.types.necklace=document.getElementById("auto-sell-necklaces").checked,n.inventorySettings.autoSell.types.ring=document.getElementById("auto-sell-rings").checked,n.inventorySettings.autoSell.enabled){const a=[];if(n.player.inventory.forEach((e,t)=>{n.shouldAutoSell(e)&&a.push({item:e,index:t})}),a.length>0){let e=0;a.reverse().forEach(({item:t,index:i})=>{e+=n.sellItem(t,!1),n.player.inventory.splice(i,1),n.needsInventoryUpdate=!0}),n.addLogMessage(`💰 Auto-sold ${a.length} existing items for ${e} total gold`,"shop")}}document.getElementById("auto-sell-modal").style.display="none",n.addLogMessage("💾 Auto-sell settings saved","system")}),document.getElementById("auto-sell-enabled-main").addEventListener("change",a=>{if(n.inventorySettings.autoSell.enabled=a.target.checked,a.target.checked){n.addLogMessage("✅ Auto-sell enabled","system");const e=[];if(n.player.inventory.forEach((t,i)=>{n.shouldAutoSell(t)&&e.push({item:t,index:i})}),e.length>0){let t=0;e.reverse().forEach(({item:i,index:s})=>{t+=n.sellItem(i,!1),n.player.inventory.splice(s,1),n.needsInventoryUpdate=!0}),n.addLogMessage(`💰 Auto-sold ${e.length} existing items for ${t} total gold`,"shop")}}else n.addLogMessage("❌ Auto-sell disabled","system")}),document.getElementById("auto-sell-enabled-main").checked=n.inventorySettings.autoSell.enabled,n.addLogMessage("🎮 Welcome to the Idle RPG! Your adventure begins...","system"),localStorage.getItem("idleRPG_save")&&confirm("Found a saved game. Would you like to load it?")&&(n.load(),M(n.currentZone),n.addLogMessage("📂 Game loaded successfully!","system")),Object.keys(n.player.equipment).forEach(a=>{const e=n.player.equipment[a];e&&(e.type||(e.type=a))}),E(),se()}function X(a,e,t=!1){const i=document.getElementById("inventory-tooltip");if(!i||!e)return;const s=n.player.equipment[e.type],o=w[e.rarity]||w.common,l=s?w[s.rarity]||w.common:null;let c=`<div class="tooltip-title" style="color: ${o.color};">${A(e)}</div>`;c+=`<div class="tooltip-item-type">${e.type.charAt(0).toUpperCase()+e.type.slice(1)}</div>`;const{baseStats:r,affixStats:d}=T(e),m=[],u=[];if(r.attack>0){let p=`${r.attack} Base Attack`;if(t&&s){const{baseStats:k}=T(s),g=r.attack-k.attack;g>0?p=`<div class="stat-gain">${p} (+${g})</div>`:g<0?p=`<div class="stat-loss">${p} (${g})</div>`:p=`<div class="stat-neutral">${p}</div>`}else p=`<div class="stat-base">${p}</div>`;m.push(p)}if(e.type==="weapon"&&e.baseAttackInterval){let p=`${(e.baseAttackInterval/1e3).toFixed(1)}s Base Attack Speed`;if(t&&s){const k=s.baseAttackInterval||2e3,g=e.baseAttackInterval-k;g>0?p=`<div class="stat-loss">${p} (+${(g/1e3).toFixed(1)}s)</div>`:g<0?p=`<div class="stat-gain">${p} (${(g/1e3).toFixed(1)}s)</div>`:p=`<div class="stat-neutral">${p}</div>`}else p=`<div class="stat-base">${p}</div>`;m.push(p)}if(r.maxHp>0){let p=`${r.maxHp} Max HP`;if(t&&s){const{baseStats:k}=T(s),g=r.maxHp-equippedbaseStats.maxHp;g>0?p=`<div class="stat-gain">${p} (+${g})</div>`:g<0?p=`<div class="stat-loss">${p} (${g})</div>`:p=`<div class="stat-neutral">${p}</div>`}else p=`<div class="stat-base">${p}</div>`;m.push(p)}const f=[{key:"attackSpeed",label:"Attack Speed",unit:"%"},{key:"critChance",label:"Crit Chance",unit:"%"},{key:"critDamage",label:"Crit Damage",unit:"%"},{key:"lifeSteal",label:"Life Steal",unit:"%"},{key:"dodge",label:"Dodge",unit:"%"},{key:"blockChance",label:"Block Chance",unit:"%"}];if(f.forEach(({key:p,label:k,unit:g})=>{if(r[p]>0){let h=`${r[p]}${g} ${k}`;if(t&&s){const{baseStats:x}=T(s),b=r[p]-x[p];b>0?h=`<div class="stat-gain">${h} (${b}${g})</div>`:b<0?h=`<div class="stat-loss">${h} (${b}${g})</div>`:h=`<div class="stat-neutral">${h}</div>`}else h=`<div class="stat-base">${h}</div>`;m.push(h)}}),d.attack>0){let p=`${d.attack} Attack`;if(t&&s){const{affixStats:k}=T(s),g=d.attack-k.attack;g>0?p=`<div class="stat-gain">${p} (+${g})</div>`:g<0?p=`<div class="stat-loss">${p} (${g})</div>`:p=`<div class="stat-neutral">${p}</div>`}else p=`<div class="stat-neutral">${p}</div>`;u.push(p)}if(d.maxHp>0){let p=`${d.maxHp} Max HP`;if(t&&s){const{affixStats:k}=T(s),g=d.maxHp-equippedaffixStats.maxHp;g>0?p=`<div class="stat-gain">${p} (+${g})</div>`:g<0?p=`<div class="stat-loss">${p} (${g})</div>`:p=`<div class="stat-neutral">${p}</div>`}else p=`<div class="stat-neutral">${p}</div>`;u.push(p)}if(f.forEach(({key:p,label:k,unit:g})=>{if(d[p]>0){let h=`${d[p]}${g} ${k}`;if(t&&s){const{affixStats:x}=T(s),b=d[p]-x[p];b>0?h=`<div class="stat-gain">${h} (${b}${g})</div>`:b<0?h=`<div class="stat-loss">${h} (${b}${g})</div>`:h=`<div class="stat-neutral">${h}</div>`}else h=`<div class="stat-neutral">${h}</div>`;u.push(h)}}),c+=m.join(""),m.length>0&&u.length>0&&(c+='<div class="tooltip-separator"></div>'),c+=u.join(""),t&&s){const{baseStats:p,affixStats:k}=T(s),g=[];[{key:"attack",label:"Attack",unit:"",isBase:!0},{key:"maxHp",label:"Max HP",unit:"",isBase:!0},{key:"attackSpeed",label:"Attack Speed",unit:"%",isBase:!0},{key:"critChance",label:"Crit Chance",unit:"%",isBase:!0},{key:"critDamage",label:"Crit Damage",unit:"%",isBase:!0},{key:"lifeSteal",label:"Life Steal",unit:"%",isBase:!0},{key:"dodge",label:"Dodge",unit:"%",isBase:!0},{key:"blockChance",label:"Block Chance",unit:"%",isBase:!0}].forEach(({key:h,label:x,unit:b})=>{const C=(p[h]||0)+(k[h]||0),F=(r[h]||0)+(d[h]||0);C>0&&F===0&&g.push(`<div class="stat-missing">${x}: ${C}${b} → 0${b} (-${C}${b})</div>`)}),g.length>0&&(c+='<div class="tooltip-separator"></div>',c+=g.join("")),c+=`<div class="tooltip-comparison">Compared to: <span style="color: ${l.color};">${A(s)}</span></div>`}else s?c+='<div class="tooltip-comparison">Hold Shift for detailed comparison</div>':c+=`<div class="tooltip-comparison">No ${e.type} equipped</div>`;const y=Math.floor((e.price!==void 0?e.price:10)*.5);c+=`<div class="tooltip-sell-info">Right click to sell for ${y} gold</div>`,i.innerHTML=c,i.style.display="block",oe(a)}function N(){const a=document.getElementById("inventory-tooltip");a&&(a.style.display="none")}function oe(a){const e=document.getElementById("inventory-tooltip");if(!e)return;const t=e.getBoundingClientRect(),i=window.innerWidth,s=window.innerHeight;let o=a.clientX+10,l=a.clientY+10;o+t.width>i&&(o=a.clientX-t.width-10),l+t.height>s&&(l=a.clientY-t.height-10),o=Math.max(5,o),l=Math.max(5,l),e.style.left=o+"px",e.style.top=l+"px"}function De(a,e){const t=document.getElementById("stats-tooltip"),i=document.getElementById("stats-tooltip-name"),s=document.getElementById("stats-tooltip-content");if(t&&i&&s){let o="";const l={attack:{key:"attack",label:"Attack",unit:""},hp:{key:"maxHp",label:"Max HP",unit:""},"attack-speed":{key:"attackSpeed",label:"Attack Speed",unit:"ms"},"crit-chance":{key:"critChance",label:"Crit Chance",unit:"%"},"crit-damage":{key:"critDamage",label:"Crit Damage",unit:"%"},"life-steal":{key:"lifeSteal",label:"Life Steal",unit:"%"},dodge:{key:"dodge",label:"Dodge",unit:"%"},"block-chance":{key:"blockChance",label:"Block Chance",unit:"%"}};if(l[e]){const{key:c,label:r,unit:d}=l[e];i.textContent=`${r} Breakdown`;let m="";const u=c==="maxHp"?n.player.baseHp+(n.player.level-1)*10:c==="attackSpeed"?n.player.equipment.weapon.baseAttackInterval:n.player[`base${r.replace(/ /g,"")}`]??0;m+=`
        <div class="stat-breakdown-item">
          <span>Base:</span>
          <span class="stat-breakdown-value">${u}${d}</span>
        </div>
      `;let f=0;for(const g in n.player.equipment){const v=n.player.equipment[g];v&&v[c]&&v[c]!==0&&(m+=`
            <div class="stat-breakdown-item">
              <span>${v.fullName||v.name} (${g}):</span>
              <span class="stat-breakdown-value">+${v[c]}${c==="attackSpeed"?"%":d}</span>
            </div>
          `,f+=v[c])}f===0&&(m+=`
          <div class="stat-breakdown-item">
            <span>Equipment:</span>
            <span class="stat-breakdown-value">+0${c==="attackSpeed"?"%":d}</span>
          </div>
        `);let y=0;for(const g in _){const v=_[g];console.log(v);for(const h of v.nodes)if(h.stat&&console.log(h.stat),h.stat&&h.stat===c){const x=n.getTalentLevel(g,h.id);if(x>0){let b=0;typeof h.value=="function"?b=h.value(x):Array.isArray(h.value)?b=h.value[x-1]||0:b=(h.value||0)*x,m+=`
                <div class="stat-breakdown-item">
                  <span>${h.name} (Talent):</span>
                  <span class="stat-breakdown-value">+${b}${c==="attackSpeed"?"%":d}</span>
                </div>
              `,y+=b}}}y===0&&(m+=`
          <div class="stat-breakdown-item">
            <span>Talents:</span>
            <span class="stat-breakdown-value">+0${c==="attackSpeed"?"%":d}</span>
          </div>
        `);let k=u+f+y;if(typeof n[`getPlayer${r.replace(/ /g,"")}`]=="function")try{k=n[`getPlayer${r.replace(/ /g,"")}`]()}catch{}m+=`
        <div class="stat-breakdown-item total">
          <span>Total ${r}:</span>
          <span class="stat-breakdown-value">${k}${d}</span>
        </div>
      `,o=m}else if(e==="xp-multiplier"){const r=n.getTalentLevel("knowledge","knowledge_1"),d=n.getTalentLevel("knowledge","knowledge_2a"),m=n.getTalentLevel("knowledge","asc_knowledge_1"),u=n.getExperienceMultiplier();i.textContent="Experience Multiplier Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Multiplier:</span>
          <span class="stat-breakdown-value">${1 .toFixed(2)}x</span>
        </div>
        ${r>0?`
        <div class="stat-breakdown-item">
          <span>Quick Learner (Lv${r}):</span>
          <span class="stat-breakdown-value">+${(r*.2).toFixed(2)}x</span>
        </div>
        `:""}
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Battle Wisdom (Lv${d}):</span>
          <span class="stat-breakdown-value">+${(d*.5).toFixed(2)}x</span>
        </div>
        `:""}
        ${m>0?`
        <div class="stat-breakdown-item">
          <span>Enlightened One (Ascendancy):</span>
          <span class="stat-breakdown-value">×3.00x</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Experience Multiplier:</span>
          <span class="stat-breakdown-value">${u.toFixed(2)}x</span>
        </div>
      `}else if(e==="gold-multiplier"){const r=n.getTalentLevel("wealth","wealth_1"),d=n.getTalentLevel("wealth","asc_wealth_1"),m=n.getGoldMultiplier();i.textContent="Gold Multiplier Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Multiplier:</span>
          <span class="stat-breakdown-value">${1 .toFixed(2)}x</span>
        </div>
        ${r>0?`
        <div class="stat-breakdown-item">
          <span>Coin Collector (Lv${r}):</span>
          <span class="stat-breakdown-value">+${(r*.25).toFixed(2)}x</span>
        </div>
        `:""}
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Golden Touch (Ascendancy):</span>
          <span class="stat-breakdown-value">×2.00x</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Gold Multiplier:</span>
          <span class="stat-breakdown-value">${m.toFixed(2)}x</span>
        </div>
      `}else if(e==="item-drop-chance"){const r=n.getTalentLevel("wealth","wealth_2a"),d=n.getTalentLevel("wealth","asc_wealth_1"),m=n.getItemDropMultiplier();i.textContent="Item Drop Chance Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Drop Chance:</span>
          <span class="stat-breakdown-value">25%</span>
        </div>
        ${r>0?`
        <div class="stat-breakdown-item">
          <span>Lucky Find (Lv${r}):</span>
          <span class="stat-breakdown-value">+${(r*10).toFixed(0)}%</span>
        </div>
        `:""}
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Golden Touch (Ascendancy):</span>
          <span class="stat-breakdown-value">+50%</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Drop Chance:</span>
          <span class="stat-breakdown-value">${(25*m).toFixed(0)}%</span>
        </div>
      `}s.innerHTML=o,t.style.display="block",t.classList.add("visible"),le(a)}}function qe(){const a=document.getElementById("stats-tooltip");a&&(a.classList.remove("visible"),setTimeout(()=>{a.classList.contains("visible")||(a.style.display="none")},200))}function le(a){const e=document.getElementById("stats-tooltip");if(e&&e.style.display==="block"){const t=a.clientX+10,i=a.clientY+10,s=e.getBoundingClientRect(),o=window.innerWidth,l=window.innerHeight;let c=t,r=i;t+s.width>o&&(c=a.clientX-s.width-10),i+s.height>l&&(r=a.clientY-s.height-10),e.style.left=`${c}px`,e.style.top=`${r}px`}}function _e(){["sword","axe","mace","dagger","staff","greatsword","battleaxe","warhammer","buckler","round-shield","tower-shield","tome","helmet","cap","crown","hood","armor","robe","vest","tunic","greaves","pants","leggings","shorts","sandals","boots","heavy-boots","speed-boots","leather-belt","utility-belt","chain-belt","war-belt","amulet","pendant","ring","bracelet"].forEach(e=>{const t=new Image;t.src=O(`assets/gear/${e}.svg`)})}document.addEventListener("keydown",a=>{a.key==="Shift"&&(R=!0,$&&I&&X(I,$,R))});document.addEventListener("keyup",a=>{a.key==="Shift"&&(R=!1,$&&I&&X(I,$,R))});document.addEventListener("DOMContentLoaded",()=>{_e(),Ae()});
