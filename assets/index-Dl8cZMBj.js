(function(){const a=document.createElement("link").relList;if(a&&a.supports&&a.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))i(n);new MutationObserver(n=>{for(const o of n)if(o.type==="childList")for(const s of o.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&i(s)}).observe(document,{childList:!0,subtree:!0});function e(n){const o={};return n.integrity&&(o.integrity=n.integrity),n.referrerPolicy&&(o.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?o.credentials="include":n.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function i(n){if(n.ep)return;n.ep=!0;const o=e(n);fetch(n.href,o)}})();function M(t){if(S[t.rarity]||S.common,t.rarity==="common")return t.name;let a=t.name;return t.prefixes&&t.prefixes.length>0&&(a=t.prefixes.join(" ")+" "+a),t.suffixes&&t.suffixes.length>0&&(a=a+" "+t.suffixes.join(" ")),a}function G(t,a){const e={};t.forEach(v=>{S[v]&&(e[v]=S[v])}),console.log(e),Object.keys(e).length===0&&(e.common=S.common,console.log("No valid rarities for zone, defaulting to common"));const i=Math.random()*100;let n="common",o=0;for(const[v,E]of Object.entries(e))if(o+=E.chance,i<=o){n=v;break}a&&(n=t[0]);const s=Object.keys(U),c=s[Math.floor(Math.random()*s.length)],r=U[c],d=r[Math.floor(Math.random()*r.length)],h=S[n],p={name:d.name,type:c,rarity:n,attack:d.attack,maxHp:d.maxHp,attackSpeed:d.attackSpeed,critChance:d.critChance,critDamage:d.critDamage,dodge:d.dodge,blockChance:d.blockChance,price:Math.floor((d.baseValue||10)*(h.priceMultiplier||1)),handType:d.handType||"1h",baseAttackInterval:d.baseAttackInterval,prefixes:[],suffixes:[]},f=h.affixCount;if(f>0){const v=Math.min(3,Math.ceil(f/2)),E=Math.min(3,f-v),m=h.prefix.filter(u=>{const b=B.prefix[u];return b&&b.allowedTypes.includes(c)});for(let u=0;u<v&&m.length>0;u++){const b=Math.floor(Math.random()*m.length),g=m.splice(b,1)[0];p.prefixes.push(g);const x=B.prefix[g].stats;x&&Object.keys(x).forEach(w=>{p[w]+=x[w]})}const k=h.suffix.filter(u=>{const b=B.suffix[u];return b&&b.allowedTypes.includes(c)});for(let u=0;u<E&&k.length>0;u++){const b=Math.floor(Math.random()*k.length),g=k.splice(b,1)[0];p.suffixes.push(g);const x=B.suffix[g].stats;x&&Object.keys(x).forEach(w=>{p[w]+=x[w]})}}let y=p.name;if(p.prefixes.length>0&&(y=`${p.prefixes[Math.floor(Math.random()*p.prefixes.length)]} ${y}`),p.suffixes.length>0){const v=p.suffixes[Math.floor(Math.random()*p.suffixes.length)];y=`${y} ${v}`}return p.fullName=y,p}function T(t){const e=U[t.type]?.find(n=>n.name===t.name);if(!e){if(t.name==="Rusty Sword"||!t.prefixes&&!t.suffixes||console.warn("Base template not found for item:",t),t.prefixes||t.suffixes){const o={attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0};return t.prefixes&&t.prefixes.forEach(s=>{const c=B.prefix[s]?.stats;c&&Object.keys(c).forEach(r=>{o.hasOwnProperty(r)&&(o[r]+=c[r])})}),t.suffixes&&t.suffixes.forEach(s=>{const c=B.suffix[s]?.stats;c&&Object.keys(c).forEach(r=>{o.hasOwnProperty(r)&&(o[r]+=c[r])})}),{baseStats:{attack:(t.attack||0)-o.attack,maxHp:(t.maxHp||0)-o.maxHp,attackSpeed:(t.attackSpeed||0)-o.attackSpeed,critChance:(t.critChance||0)-o.critChance,critDamage:(t.critDamage||0)-o.critDamage,dodge:(t.dodge||0)-o.dodge,blockChance:(t.blockChance||0)-o.blockChance},affixStats:o}}return{baseStats:{attack:t.attack||0,maxHp:t.maxHp||0,attackSpeed:t.attackSpeed||0,critChance:t.critChance||0,critDamage:t.critDamage||0,dodge:t.dodge||0,blockChance:t.blockChance||0},affixStats:{attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0}}}const i={attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0};return t.prefixes&&t.prefixes.forEach(n=>{const o=B.prefix[n]?.stats;o&&Object.keys(o).forEach(s=>{i.hasOwnProperty(s)&&(i[s]+=o[s])})}),t.suffixes&&t.suffixes.forEach(n=>{const o=B.suffix[n]?.stats;o&&Object.keys(o).forEach(s=>{i.hasOwnProperty(s)&&(i[s]+=o[s])})}),{baseStats:{attack:e.attack||0,maxHp:e.maxHp||0,attackSpeed:e.attackSpeed||0,critChance:e.critChance||0,critDamage:e.critDamage||0,dodge:e.dodge||0,blockChance:e.blockChance||0},affixStats:i}}const S={common:{name:"Common",color:"#9CA3AF",chance:50,affixCount:0,prefix:[],suffix:[],priceMultiplier:1},uncommon:{name:"Uncommon",color:"#10B981",chance:30,affixCount:1,prefix:["Sturdy","Sharp","Keen","Fine"],suffix:["of Power","of Might","of the Warrior"],priceMultiplier:1.5},rare:{name:"Rare",color:"#3B82F6",chance:15,affixCount:2,prefix:["Masterwork","Superior","Enhanced","Reinforced"],suffix:["of the Elite","of Excellence","of the Champion","of Mastery"],priceMultiplier:2.5},epic:{name:"Epic",color:"#8B5CF6",chance:4,affixCount:3,prefix:["Legendary","Ancient","Mythical","Heroic","Blessed","Cursed"],suffix:["of the Gods","of Legends","of Heroes","of Destiny","of the Void","of Strength"],priceMultiplier:4},legendary:{name:"Legendary",color:"#F59E0B",chance:1,affixCount:5,prefix:["Divine","Celestial","Eternal","Transcendent","Omnipotent","Radiant"],suffix:["of the Immortals","of Eternity","of the Divine","of Transcendence","of Infinity","of the Cosmos"],priceMultiplier:8}},B={prefix:{Sturdy:{stats:{maxHp:15,blockChance:2,baseValue:5},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Sharp:{stats:{attack:2,critChance:3},allowedTypes:["weapon"]},Keen:{stats:{critChance:5,critDamage:8},allowedTypes:["weapon","necklace","ring"]},Fine:{stats:{attack:1,maxHp:5,attackSpeed:2},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Masterwork:{stats:{attack:4,maxHp:10,critChance:3},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},Superior:{stats:{attack:3,critDamage:10},allowedTypes:["weapon","necklace","ring"]},Enhanced:{stats:{attackSpeed:8,dodge:5,critChance:3},allowedTypes:["weapon","boots","legs","necklace","ring"]},Reinforced:{stats:{maxHp:30,blockChance:8,dodge:2},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Legendary:{stats:{attack:6,critChance:8,critDamage:15},allowedTypes:["weapon"]},Ancient:{stats:{attack:5,maxHp:20,blockChance:5,baseValue:6},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Mythical:{stats:{critDamage:20,dodge:8},allowedTypes:["weapon","necklace","ring"]},Heroic:{stats:{attack:7,attackSpeed:12,critChance:10},allowedTypes:["weapon"]},Blessed:{stats:{maxHp:25,dodge:6,blockChance:6,baseValue:25},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]},Cursed:{stats:{attack:8,critChance:12,critDamage:18,attackSpeed:10},allowedTypes:["weapon","necklace","ring"]},Divine:{stats:{attack:10,critChance:15,critDamage:25},allowedTypes:["weapon","necklace","ring"]},Celestial:{stats:{maxHp:40,blockChance:15,dodge:12,attackSpeed:15},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Eternal:{stats:{attack:8,maxHp:30,critDamage:30},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Transcendent:{stats:{attack:12,critChance:20,dodge:15,attackSpeed:20},allowedTypes:["weapon","boots","legs","necklace","ring"]},Omnipotent:{stats:{attack:15,critChance:18,critDamage:35},allowedTypes:["weapon","necklace","ring"]},Radiant:{stats:{maxHp:50,dodge:18,attackSpeed:25,blockChance:20,baseValue:32},allowedTypes:["helmet","body","legs","boots","belt","offhand"]}},suffix:{"of Power":{stats:{attack:3},allowedTypes:["weapon","necklace","ring"]},"of Might":{stats:{attack:2,critDamage:5},allowedTypes:["weapon"]},"of the Warrior":{stats:{attack:1,maxHp:10,blockChance:3,baseValue:10},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},"of the Elite":{stats:{attack:4,critChance:5,attackSpeed:5},allowedTypes:["weapon","necklace","ring"]},"of Excellence":{stats:{critChance:8,critDamage:12},allowedTypes:["weapon","necklace","ring"]},"of the Champion":{stats:{attack:3,maxHp:15,dodge:5},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},"of Mastery":{stats:{attackSpeed:10,critChance:6,dodge:6},allowedTypes:["weapon","boots","legs","necklace","ring"]},"of the Gods":{stats:{attack:8,critChance:12,critDamage:20},allowedTypes:["weapon"]},"of Legends":{stats:{maxHp:30,blockChance:12,baseValue:14},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Heroes":{stats:{attack:6,attackSpeed:15,dodge:10},allowedTypes:["weapon","boots","legs"]},"of Destiny":{stats:{critDamage:25,attackSpeed:12},allowedTypes:["weapon","necklace","ring"]},"of the Void":{stats:{attack:7,critChance:10,dodge:12},allowedTypes:["weapon","necklace","ring"]},"of Strength":{stats:{attack:9,critDamage:22,attackSpeed:8},allowedTypes:["weapon","belt","necklace","ring"]},"of the Immortals":{stats:{attack:10,maxHp:40,blockChance:15,baseValue:27},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Eternity":{stats:{critChance:20,critDamage:35,attackSpeed:25},allowedTypes:["weapon","necklace","ring"]},"of the Divine":{stats:{attack:12,maxHp:50,dodge:20},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Transcendence":{stats:{attack:15,critChance:25,critDamage:40,attackSpeed:30},allowedTypes:["weapon","necklace","ring"]},"of Infinity":{stats:{attack:13,critChance:22,critDamage:38,dodge:16},allowedTypes:["weapon","necklace","ring"]},"of the Cosmos":{stats:{maxHp:60,attackSpeed:28,blockChance:18,baseValue:45},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]}}},U={weapon:[{name:"Sword",attack:10,maxHp:0,attackSpeed:0,baseAttackInterval:2e3,critChance:5,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,handType:"1h",baseValue:5},{name:"Axe",attack:15,maxHp:0,attackSpeed:0,baseAttackInterval:2800,critChance:8,critDamage:15,lifeSteal:0,dodge:0,blockChance:0,handType:"1h",baseValue:5},{name:"Mace",attack:12,maxHp:0,attackSpeed:0,baseAttackInterval:2400,critChance:2,critDamage:0,lifeSteal:0,dodge:0,blockChance:5,handType:"1h",baseValue:5},{name:"Dagger",attack:6,maxHp:0,attackSpeed:0,baseAttackInterval:1600,critChance:12,critDamage:20,lifeSteal:0,dodge:8,blockChance:0,handType:"1h",baseValue:5},{name:"Staff",attack:8,maxHp:0,attackSpeed:0,baseAttackInterval:2200,critChance:10,critDamage:25,lifeSteal:0,dodge:0,blockChance:0,handType:"1h",baseValue:5},{name:"Greatsword",attack:20,maxHp:0,attackSpeed:0,baseAttackInterval:3200,critChance:3,critDamage:25,lifeSteal:0,dodge:0,blockChance:0,handType:"2h",baseValue:5},{name:"Battleaxe",attack:25,maxHp:0,attackSpeed:0,baseAttackInterval:3600,critChance:5,critDamage:30,lifeSteal:0,dodge:0,blockChance:0,handType:"2h",baseValue:5},{name:"Warhammer",attack:22,maxHp:0,attackSpeed:0,baseAttackInterval:3400,critChance:1,critDamage:0,lifeSteal:0,dodge:0,blockChance:8,handType:"2h",baseValue:5}],offhand:[{name:"Buckler",attack:0,maxHp:40,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:15,baseValue:5},{name:"Round Shield",attack:0,maxHp:60,attackSpeed:-5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:20,baseValue:5},{name:"Tower Shield",attack:0,maxHp:18,attackSpeed:-10,critChance:0,critDamage:0,lifeSteal:0,dodge:-5,blockChance:30,baseValue:5},{name:"Tome",attack:3,maxHp:0,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,baseValue:5}],helmet:[{name:"Helmet",attack:0,maxHp:5,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:3,baseValue:5},{name:"Cap",attack:0,maxHp:3,attackSpeed:2,critChance:0,critDamage:0,lifeSteal:0,dodge:2,blockChance:0,baseValue:5},{name:"Crown",attack:0,maxHp:20,attackSpeed:0,critChance:3,critDamage:5,lifeSteal:0,dodge:0,blockChance:0,baseValue:6},{name:"Hood",attack:0,maxHp:10,attackSpeed:3,critChance:2,critDamage:0,lifeSteal:0,dodge:5,blockChance:0,baseValue:5}],body:[{name:"Armor",attack:0,maxHp:60,attackSpeed:-5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:8,baseValue:5},{name:"Robe",attack:0,maxHp:40,attackSpeed:5,critChance:5,critDamage:10,lifeSteal:2,dodge:0,blockChance:0,baseValue:5},{name:"Vest",attack:0,maxHp:50,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:3,blockChance:2,baseValue:5},{name:"Tunic",attack:0,maxHp:30,attackSpeed:8,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:0,baseValue:5}],legs:[{name:"Greaves",attack:0,maxHp:40,attackSpeed:-3,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:5,baseValue:5},{name:"Pants",attack:0,maxHp:30,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:0,dodge:3,blockChance:0,baseValue:5},{name:"Leggings",attack:0,maxHp:7,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:2,blockChance:2,baseValue:5},{name:"Shorts",attack:0,maxHp:20,attackSpeed:10,critChance:2,critDamage:0,lifeSteal:0,dodge:8,blockChance:0,baseValue:5}],boots:[{name:"Sandals",attack:0,maxHp:10,attackSpeed:8,critChance:0,critDamage:0,lifeSteal:0,dodge:8,blockChance:0,baseValue:5},{name:"Boots",attack:0,maxHp:5,attackSpeed:3,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:0,baseValue:5},{name:"Heavy Boots",attack:0,maxHp:40,attackSpeed:-3,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:5,baseValue:5},{name:"Speed Boots",attack:0,maxHp:3,attackSpeed:15,critChance:2,critDamage:0,lifeSteal:0,dodge:12,blockChance:0,baseValue:5}],belt:[{name:"Leather Belt",attack:0,maxHp:1,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,baseValue:5},{name:"Utility Belt",attack:0,maxHp:0,attackSpeed:5,critChance:3,critDamage:0,lifeSteal:0,dodge:3,blockChance:0,baseValue:5},{name:"Chain Belt",attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:3,baseValue:5},{name:"War Belt",attack:0,maxHp:0,attackSpeed:0,critChance:5,critDamage:8,lifeSteal:0,dodge:0,blockChance:0,baseValue:5}],necklace:[{name:"Amulet",attack:0,maxHp:0,attackSpeed:0,critChance:8,critDamage:15,lifeSteal:0,dodge:0,blockChance:0,baseValue:5},{name:"Pendant",attack:0,maxHp:0,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:5,dodge:0,blockChance:0,baseValue:5}],ring:[{name:"Ring",attack:0,maxHp:0,attackSpeed:3,critChance:5,critDamage:8,lifeSteal:0,dodge:0,blockChance:0,baseValue:5},{name:"Bracelet",attack:0,maxHp:0,attackSpeed:8,critChance:6,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,baseValue:5}]};function de(t,a,e){const i=a.getElementById("zone-buttons");Object.values(t.zones).forEach(o=>{o.enemies.forEach(s=>{const c=new Image;c.src=`assets/enemies/${s.imageClass}.png`})});const n=Object.entries(t.zones).sort(([,o],[,s])=>(o.zoneNumber||0)-(s.zoneNumber||0));for(const[o,s]of n){const c=a.createElement("button"),r=t.unlockedZones.includes(o);c.className=`zone-btn ${o==="town"?"town":""} ${r?"":"locked"}`,c.textContent=s.name,c.setAttribute("data-zone",o),r?c.addEventListener("click",()=>q(t,a,o,e)):c.addEventListener("click",()=>{s.unlockLevel?t.addLogMessage(`This zone is locked. Reach level ${s.unlockLevel} to unlock it!`,"system"):t.addLogMessage("This zone is locked. Complete more areas to unlock it!","system")}),c.addEventListener("mouseleave",()=>{K()}),c.addEventListener("mouseenter",d=>{j(t,a,d,o,s,r)}),c.addEventListener("mousemove",d=>{N(d)}),i.appendChild(c)}}function V(t,a,e){const i=t.player.level;let n=!1;console.log("Checking zone unlocks...");let o={};for(const[c,r]of Object.entries(t.zones))o[c]={level:r.unlockLevel,message:`The ${r.name} can now be accessed!`};let s={};for(const c in o)s[c]={...o[c]};console.log("Unlock conditions:",s);for(const[c,r]of Object.entries(s))!t.unlockedZones.includes(c)&&i>=r.level&&(t.unlockedZones.push(c),console.log(`Unlocked zone: ${c}`),t.addLogMessage(r.message,"system"),n=!0);pe(t,a,e),n&&me(t,a,e)}function j(t,a,e,i,n,o){const s=a.getElementById("zone-tooltip"),c=a.getElementById("zone-tooltip-icon"),r=a.getElementById("zone-tooltip-title"),d=a.getElementById("zone-tooltip-description"),h=a.getElementById("zone-tooltip-content");s.style.display="block",setTimeout(()=>s.classList.add("visible"),10);let p="";if(c.textContent=n.icon||"🗺️",r.textContent=n.name,d.textContent=n.description,!s||!c||!r||!d||!h){console.log("One or more tooltip elements are missing.");return}if(n.allowedRarities&&n.allowedRarities.length>0&&(p+=`
      <div class="zone-drop-rarities">
        <div class="zone-drop-rarities-title">🎁 Drop Rarities:</div>
        <div class="zone-drop-rarities-list">
          ${n.allowedRarities.map(f=>`• ${f}`).join("<br>")}
        </div>
      </div>
    `),n.enemies&&n.enemies.length>0&&(p+=`
      <div class="zone-tooltip-enemies">
        <div class="zone-tooltip-enemies-title">⚔️ Enemies:</div>
        <div class="zone-tooltip-enemy-list">
          ${n.enemies.map(f=>`• ${f.name} (HP: ${f.hp}, ATK: ${f.attack})`).join("<br>")}
        </div>
      </div>
    `),n.boss&&(p+=`
      <div class="zone-tooltip-boss">
        <div class="zone-tooltip-boss-title">👑 Boss: ${n.boss.name}</div>
        <div class="zone-tooltip-boss-info">HP: ${n.boss.hp}, ATK: ${n.boss.attack}<br>Requires ${n.boss.requiredKills} zone kills<br>Drops high rarity items!</div>
      </div>
    `),!o)if(n.unlockLevel){const f=t.player.level;p+=`
        <div class="zone-tooltip-unlock">
          <div class="zone-tooltip-unlock-title">🔒 Zone Locked</div>
          <div class="zone-tooltip-unlock-req">Required Level: ${n.unlockLevel}</div>
          <div class="zone-tooltip-unlock-current">Current Level: ${f}</div>
        </div>
      `}else p+=`
        <div class="zone-tooltip-unlock">
          <div class="zone-tooltip-unlock-title">🔒 Zone Locked</div>
          <div class="zone-tooltip-unlock-req">Complete more areas to unlock</div>
        </div>
      `;h.innerHTML=p,s.style.display="block",s.classList.add("visible"),N(e)}function q(t,a,e,i){t.killCount=0,t.currentZone=e,t.currentEnemy=null,t.combat.isActive=!1,a.querySelectorAll(".zone-btn").forEach(s=>{s.classList.remove("active")}),a.querySelector(`[data-zone="${e}"]`).classList.add("active");const n=a.querySelector(".combat-area"),o=a.getElementById("shop-area");e==="restArea"?(n.style.display="grid",o.style.display="none",t.addLogMessage(`${t.zones[e].name} - ${t.zones[e].description}`,"system")):(n.style.display="grid",o.style.display="none",t.addLogMessage(`Entered ${t.zones[e].name}. ${t.zones[e].description}`,"system")),setTimeout(()=>i(t),500)}function N(t){const a=document.getElementById("zone-tooltip");if(a&&a.style.display==="block"){const e=t.clientX+15,i=t.clientY+15,n=a.getBoundingClientRect(),o=window.innerWidth,s=window.innerHeight;let c=e,r=i;e+n.width>o&&(c=t.clientX-n.width-15),i+n.height>s&&(r=t.clientY-n.height-15),a.style.left=c+"px",a.style.top=r+"px"}}function pe(t,a,e){a.querySelectorAll(".zone-btn").forEach(n=>{const o=n.getAttribute("data-zone"),s=t.zones[o],c=t.unlockedZones.includes(o),r=n.cloneNode(!0);c?r.addEventListener("click",()=>q(t,a,o,e)):r.addEventListener("click",()=>{const d=s.unlockLevel;d?t.addLogMessage(`This zone is locked. Reach level ${d} to unlock it!`,"system"):t.addLogMessage("This zone is locked. Complete more areas to unlock it!","system")}),r.addEventListener("mouseleave",()=>{K()}),r.addEventListener("mouseenter",d=>{j(t,a,d,o,s,c)}),r.addEventListener("mousemove",d=>{N(d)}),n.parentNode.replaceChild(r,n)})}function me(t,a,e){a.querySelectorAll(".zone-btn").forEach(n=>{const o=n.getAttribute("data-zone"),s=t.unlockedZones.includes(o),c=t.zones[o];if(console.log(`Checking zone: ${o}, Unlocked: ${s}`),s&&n.classList.contains("locked")){n.classList.remove("locked");const r=n.cloneNode(!0);r.addEventListener("click",()=>q(t,a,o,e)),r.addEventListener("mouseleave",()=>{K()}),r.addEventListener("mouseenter",d=>{j(t,a,d,o,c,s)}),r.addEventListener("mousemove",d=>{N(d)}),console.log(`${o} button updated`),n.parentNode.replaceChild(r,n)}})}function K(){const t=document.getElementById("zone-tooltip");t&&(t.classList.remove("visible"),setTimeout(()=>{t.classList.contains("visible")||(t.style.display="none")},200))}function ue(t){const a=document.getElementById("boss-warning"),e=document.getElementById("boss-warning-name");e.textContent=t,a.style.display="block",setTimeout(()=>{a.style.display="none"},2e3)}function J(t){const a=document.getElementById("victory-message"),e=document.getElementById("victory-subtext");e.textContent=`The ${t} has been defeated!`,a.style.display="block",setTimeout(()=>{a.style.display="none"},4e3)}const he={restArea:{name:"Rest Area",icon:"🛌",description:"A peaceful campsite where you can pause and relax. Nothing happens here.",zoneNumber:0,unlockLevel:1,killCount:0,enemies:[],isRestArea:!0},basement:{name:"The Basement",icon:"🐀",description:"A damp, dark basement infested with weak rats. Rats are too small to carry anything of value.",zoneNumber:1,unlockLevel:1,killCount:0,enemies:[{name:"Sewer Rat",imageClass:"sewerRat",hp:25,attack:2,xp:5,gold:2,attackInterval:1800},{name:"Giant Rat",imageClass:"giantRat",hp:50,attack:4,xp:8,gold:5,attackInterval:3e3},{name:"Diseased Rat",imageClass:"diseasedRat",hp:30,attack:3,xp:6,gold:3,attackInterval:2200}],dropChance:0,allowedRarities:[]},forest:{name:"Dark Forest",icon:"🌲",description:"A mysterious forest filled with creatures",zoneNumber:2,unlockLevel:1,killCount:0,enemies:[{name:"Slime",imageClass:"slime",hp:210,attack:4,xp:15,gold:5,attackInterval:3e3},{name:"Wolf",imageClass:"wolf",hp:90,attack:12,xp:20,gold:8,attackInterval:2200},{name:"Boar",imageClass:"boar",hp:180,attack:18,xp:20,gold:8,attackInterval:3200}],dropChance:25,allowedRarities:["common"]},cave:{name:"Mysterious Cave",icon:"🕳️",description:"Deep dark caves filled with monsters",zoneNumber:3,unlockLevel:4,killCount:0,enemies:[{name:"Goblin Runt",imageClass:"goblinRunt",hp:90,attack:10,xp:18,gold:7,attackInterval:2100},{name:"Orc",imageClass:"orc",hp:220,attack:14,xp:35,gold:15,attackInterval:2800},{name:"Spider",imageClass:"spider",hp:110,attack:4,xp:28,gold:10,attackInterval:900}],dropChance:30,allowedRarities:["common","uncommon"]},goblinCave:{name:"Goblin Cave",icon:"🧌",description:"One of the caves branches off to a den full of goblins! Defeat 15 goblins to face the Goblin King!",zoneNumber:4,unlockLevel:8,killCount:0,enemies:[{name:"Goblin",imageClass:"goblin",hp:90,attack:12,xp:25,gold:10,attackInterval:2e3},{name:"Goblin Shaman",imageClass:"goblinShaman",hp:85,attack:16,xp:28,gold:12,attackInterval:2800},{name:"Goblin Slinger",imageClass:"goblinSlinger",hp:75,attack:14,xp:22,gold:9,attackInterval:2100},{name:"Goblin Brute",imageClass:"goblinBrute",hp:110,attack:20,xp:35,gold:15,attackInterval:3200}],dropChance:40,allowedRarities:["common","uncommon","rare"],boss:{name:"Goblin King",imageClass:"goblinKing",hp:400,attack:40,xp:150,gold:100,requiredKills:15,isEpicDropper:!0,attackInterval:2500,xp:150}},mountain:{name:"Snowy Mountains",icon:"🏔️",description:"Treacherous peaks with powerful foes",zoneNumber:5,unlockLevel:10,killCount:0,enemies:[{name:"Yeti",imageClass:"yeti",hp:200,attack:25,xp:50,gold:25,attackInterval:3500},{name:"Dragon",imageClass:"dragon",hp:300,attack:35,xp:80,gold:50,attackInterval:3200},{name:"Giant",imageClass:"giant",hp:250,attack:30,xp:65,gold:35,attackInterval:4e3}],dropChance:35,allowedRarities:["common","uncommon","rare","epic"]},dragonPeak:{name:"Dragons' Peak",icon:"🐉",description:"The highest peak, home to the fiercest dragons",zoneNumber:6,unlockLevel:12,killCount:0,enemies:[{name:"Baby Dragon",imageClass:"babyDragon",hp:200,attack:25,xp:50,gold:25,attackInterval:3500},{name:"Elder Dragon",imageClass:"elderDragon",hp:300,attack:35,xp:80,gold:50,attackInterval:3200},{name:"Undying Dragon",imageClass:"undyingDragon",hp:250,attack:30,xp:65,gold:35,attackInterval:4e3}],dropChance:35,allowedRarities:["common","uncommon","rare","epic"]},graveYard:{name:"Graveyard",icon:"🪦",description:"A damp and dreary graveyard",zoneNumber:7,unlockLevel:14,killCount:0,enemies:[{name:"Zombie",imageClass:"zombie",hp:80,attack:10,xp:20,gold:5,attackInterval:1500},{name:"Bat",imageClass:"bat",hp:100,attack:12,xp:25,gold:8,attackInterval:1800},{name:"Plague Zombie",imageClass:"plagueZombie",hp:60,attack:8,xp:15,gold:4,attackInterval:1200}],dropChance:35,allowedRarities:["common","uncommon","rare","epic"]},crypts:{name:"Crypts",icon:"⚰️",description:"A vast, eerie crypt",zoneNumber:8,unlockLevel:18,killCount:0,enemies:[{name:"Banshee",imageClass:"banshee",hp:80,attack:10,xp:20,gold:5,attackInterval:1500},{name:"Ghost",imageClass:"ghost",hp:100,attack:12,xp:25,gold:8,attackInterval:1800},{name:"Skeleton",imageClass:"skeleton",hp:60,attack:8,xp:15,gold:4,attackInterval:1200}],dropChance:35,allowedRarities:["common","uncommon","rare","epic","legendary"],boss:{name:"Amalgamation",imageClass:"amalgamation",hp:1e3,attack:50,xp:300,gold:220,requiredKills:10,isLegendaryDropper:!0,attackInterval:2500,xp:150}}};function ae(t,a){const e=a.getElementById("end-run-btn");e&&(e.textContent=`💀 ${t.currentDeathMessage}`,e.title=`End current run: ${t.currentDeathMessage}`)}function Q(){return ee[Math.floor(Math.random()*ee.length)]}const ee=["Jump off a bridge","Lay facedown in a puddle","Starve yourself","Walk into a dragon's lair unarmed","Challenge a mountain troll to arm wrestling","Try to pet a wild bear","Swim with sharks while bleeding","Eat mysterious mushrooms","Sleep in a haunted cemetery","Juggle flaming torches blindfolded","Use a cursed sword as a toothpick","Tickle a sleeping giant","Dance on thin ice","Hug a cactus enthusiastically","Take a nap in quicksand","Play catch with a grenade","Use a lightning rod during a storm","Tell a vampire they have bad breath","Ask a kraken for directions","Wear meat clothing to a wolf den","Try to ride a wild griffin","Drink from the fountain of eternal poison","Challenge death to a game of chess","Use your head to test helmet durability","Go cave diving without oxygen","Practice sword swallowing with a real sword","Take a selfie with a basilisk","Use a nuclear reactor as a nightlight","Go bungee jumping with a rope that's too long","Try to milk a wild minotaur"];function ge(t,a){const e=a.getElementById("talent-tree-modal");e.style.display="none",t.isShowingTalentTree=!1,t.ascend(t,a)}function ye(t,a){const e=a.getElementById("talent-tree-modal");e.style.display="flex",t.isShowingTalentTree=!0,ne(t,a),se(t,a)}function ne(t,a){setTimeout(()=>{Object.keys(H).forEach(e=>{const i=H[e],n=a.getElementById(`pathway-${e}`);if(!n)return;let o=n.querySelector(".talent-nodes-container"),s=n.querySelector(".talent-connections");if(o||(o=a.getElementById(`${e}-nodes`)),s||(s=a.getElementById(`${e}-connections`)),!o||!s)return;o.innerHTML="",s.innerHTML="";const c=o.clientWidth||180,r=o.clientHeight||350,d=60,h=Math.max(...i.nodes.map(y=>y.position.x),4),p=Math.max(...i.nodes.map(y=>y.position.y));if(h===0||p===0)return;const f={};i.nodes.forEach(y=>{const v=t.getTalentLevel(e,y.id),E=t.canAllocateTalent(e,y.id);let m=y.cost*(v+1);t.getTalentLevel("knowledge","knowledge_5")>0&&(m=Math.floor(m*.5));const u=y.position.x/h*(c-d)+d/2,b=y.position.y/p*(r-d)+d/2;f[y.id]={x:u,y:b};const g=a.createElement("div");g.className=`talent-node tier-${y.tier} ${v>0?"allocated":""} ${E?"available":"locked"}`,g.dataset.pathway=e,g.dataset.talent=y.id,g.style.left=`${u}px`,g.style.top=`${b}px`,g.innerHTML=`
          ${v>0?`<div class="purchase-counter">${v}</div>`:""}
          <div class="talent-icon">${y.icon}</div>
        `,g.addEventListener("mouseenter",x=>{ve(x,y,v,m)}),g.addEventListener("mouseleave",()=>{ke()}),g.addEventListener("mousemove",x=>{le(x,a)}),g.addEventListener("click",()=>{t.canAllocateTalent(e,y.id)&&(t.allocateTalent(e,y.id),se(t,a))}),o.appendChild(g)}),i.nodes.forEach(y=>{y.prerequisites&&y.prerequisites.length>0&&y.prerequisites.forEach(v=>{i.nodes.find(m=>m.id===v)&&f[y.id]&&f[v]&&fe(s,f[v],f[y.id],t.getTalentLevel(e,v)>0,t.canAllocateTalent(e,y.id))})})})},100)}function fe(t,a,e,i,n){const o=document.createElementNS("http://www.w3.org/2000/svg","line");o.setAttribute("x1",a.x),o.setAttribute("y1",a.y),o.setAttribute("x2",e.x),o.setAttribute("y2",e.y);let s="talent-connection-line";i&&(s+=" active"),n&&(s+=" available"),o.setAttribute("class",s),t.appendChild(o)}function se(t,a){const e=a.getElementById("talent-gold");e&&(e.textContent=t.player.gold);const i=a.getElementById("talent-points");i&&(i.textContent=t.getTotalTalentPoints());const n=a.getElementById("ascension-count");n&&(n.textContent=t.ascensionCount),ne(t,a)}function ve(t,a,e,i){const n=document.getElementById("talent-tooltip"),o=document.getElementById("talent-tooltip-name"),s=document.getElementById("talent-tooltip-level"),c=document.getElementById("talent-tooltip-description"),r=document.getElementById("talent-tooltip-effect"),d=document.getElementById("talent-tooltip-cost");n&&o&&s&&c&&r&&d&&(o.textContent=a.name,s.textContent=`${e}/${a.maxLevel}`,c.textContent=a.description,r.textContent=a.effect,e>=a.maxLevel?d.textContent="Max Level":d.textContent=`Cost: ${i} gold`,n.style.display="block",n.classList.add("visible"),le(t,document))}function ke(){const t=document.getElementById("talent-tooltip");t&&(t.classList.remove("visible"),setTimeout(()=>{t.classList.contains("visible")||(t.style.display="none")},200))}function le(t,a){const e=a.getElementById("talent-tooltip");if(e&&e.style.display==="block"){let i=t.clientX+12,n=t.clientY-8-e.offsetHeight;n<0&&(n=t.clientY+12);const o=e.getBoundingClientRect(),s=window.innerWidth,c=window.innerHeight;i+o.width>s&&(i=s-o.width-8),n+o.height>c&&(n=c-o.height-8),i<0&&(i=8),n<0&&(n=8),e.style.left=i+"px",e.style.top=n+"px"}}const H={power:{name:"Path of Power",icon:"⚔️",description:"Increase combat effectiveness",nodes:[{id:"power_1",name:"Warrior Training",icon:"💪",description:"Increase base attack power",effect:"+5 attack",stat:"attack",value:5,cost:40,maxLevel:5,tier:1,position:{x:2,y:0},prerequisites:[]},{id:"power_2a",name:"Weapon Mastery",icon:"🗡️",description:"Master weapon combat",effect:"+10% attack per level",cost:60,maxLevel:3,tier:2,position:{x:0,y:1},prerequisites:["power_1"]},{id:"power_2b",name:"Combat Mastery",icon:"🎯",description:"Improve critical hit chance",effect:"+2% critical chance per level",cost:60,maxLevel:3,tier:2,position:{x:4,y:1},prerequisites:["power_1"]},{id:"power_3a",name:"Berserker Rage",icon:"⚡",description:"Increase attack speed",effect:"+10% attack speed per level",cost:80,maxLevel:3,tier:3,position:{x:0,y:2},prerequisites:["power_2a"]},{id:"power_3b",name:"Precise Strikes",icon:"🔥",description:"Deadly precision",effect:"+15% critical damage per level",cost:85,maxLevel:4,tier:3,position:{x:2,y:2},prerequisites:["power_2a","power_2b"]},{id:"power_3c",name:"Battle Focus",icon:"🧠",description:"Mental fortitude in combat",effect:"+5% dodge chance and +3% block chance per level",cost:90,maxLevel:2,tier:3,position:{x:4,y:2},prerequisites:["power_2b"]},{id:"power_4",name:"Legendary Warrior",icon:"🏆",description:"Transcendent combat mastery",effect:"+50% damage, +25% crit chance, +20% attack speed",cost:300,maxLevel:1,tier:4,position:{x:2,y:3},prerequisites:["power_3a","power_3b","power_3c"]}]},wealth:{name:"Path of Wealth",icon:"💰",description:"Increase gold gain and rewards",nodes:[{id:"wealth_1",name:"Coin Collector",icon:"🪙",description:"Increase gold drops from enemies",effect:"+25% gold gain per level",cost:45,maxLevel:4,tier:1,position:{x:2,y:0},prerequisites:[]},{id:"wealth_2a",name:"Lucky Find",icon:"🍀",description:"Increase item drop chance",effect:"+10% item drop chance per level",cost:70,maxLevel:3,tier:2,position:{x:1,y:1},prerequisites:["wealth_1"]},{id:"wealth_2b",name:"Gold Rush",icon:"💸",description:"Bonus gold from streaks - not implemented",effect:"Killing enemies without taking damage gives +5% gold per streak",cost:65,maxLevel:5,tier:2,position:{x:3,y:1},prerequisites:["wealth_1"]},{id:"wealth_3a",name:"Treasure Hunter",icon:"💎",description:"Higher chance for rare items - not implemented",effect:"+15% chance for higher rarity per level",cost:90,maxLevel:2,tier:3,position:{x:0,y:2},prerequisites:["wealth_2a"]},{id:"wealth_3b",name:"Merchant Mind",icon:"🏪",description:"Better item values",effect:"Items sell for +10% more gold per level",cost:95,maxLevel:8,tier:3,position:{x:2,y:2},prerequisites:["wealth_2a","wealth_2b"]},{id:"wealth_3c",name:"Golden Streak",icon:"🌟",description:"Massive streak bonuses - not implemented",effect:"Gold streak bonuses last 50% longer per level",cost:100,maxLevel:2,tier:3,position:{x:4,y:2},prerequisites:["wealth_2b"]},{id:"wealth_4",name:"Golden Touch",icon:"✨",description:"Midas-like power",effect:"Double gold gain, +50% item drops, items have 10% chance to duplicate",cost:350,maxLevel:1,tier:4,position:{x:2,y:3},prerequisites:["wealth_3a","wealth_3b","wealth_3c"]}]},knowledge:{name:"Path of Knowledge",icon:"📚",description:"Increase experience gain",nodes:[{id:"knowledge_1",name:"Quick Learner",icon:"📖",description:"Bonus XP from combat victories",effect:"+5% experience gain per level",cost:30,maxLevel:10,tier:1,position:{x:2,y:0},prerequisites:[]},{id:"knowledge_2a",name:"Battle Wisdom",icon:"⚔️",description:"EVEN MORE bonus XP from combat victories",effect:"+20% experience gain per level",cost:95,maxLevel:3,tier:2,position:{x:0,y:1},prerequisites:["knowledge_1"]},{id:"knowledge_2b",name:"Study Habits",icon:"📝",description:"Efficient learning methods - untested but implemented",effect:"Gain bonus XP equal to 5% of current level every 60 seconds",cost:90,maxLevel:4,tier:2,position:{x:2,y:1},prerequisites:["knowledge_1"]},{id:"knowledge_3a",name:"Master Scholar",icon:"🎓",description:"Reduce XP requirements for leveling",effect:"-5% XP needed per level (max 30%)",cost:120,maxLevel:6,tier:3,position:{x:0,y:2},prerequisites:["knowledge_2b"]},{id:"knowledge_3b",name:"Experience Burst",icon:"💫",description:"Burst learning",effect:"Every 10th enemy gives 5x experience",cost:160,maxLevel:1,tier:3,position:{x:2,y:2},prerequisites:["knowledge_2b"]},{id:"knowledge_3c",name:"Head Start",icon:"🏃‍♂️",description:"Increase your starting level",effect:"Gain one starting level per talent level",cost:200,maxLevel:5,tier:3,position:{x:4,y:2},prerequisites:["knowledge_2b"]},{id:"knowledge_4",name:"Enlightened One",icon:"🔮",description:"Transcendent learning abilities",effect:"Multiply XP gain by 3",cost:1400,maxLevel:1,tier:4,position:{x:2,y:3},prerequisites:["knowledge_3a","knowledge_3b","knowledge_3c"]},{id:"knowledge_5",name:"Meditative State",icon:"🧘",description:"Fully ascended state of being",effect:"Reduce all talent costs by 50%",cost:2e3,maxLevel:1,tier:5,position:{x:2,y:4},prerequisites:["knowledge_4"]}]},time:{name:"Path of Time",icon:"🕑",description:"TIME",nodes:[{id:"time_1",name:"Vitamins",description:"Increase max age by 5 years per level",icon:"💊",effect:"+5 years",stat:"maxAge",value:5,cost:40,maxLevel:5,tier:1,position:{x:2,y:0},prerequisites:[]},{id:"time_2a",name:"Child Labor",description:"Start combat at a younger age",icon:"👶🏻",effect:"-2 years",stat:"baseAge",value:-2,cost:40,maxLevel:5,tier:2,position:{x:1,y:1},prerequisites:["time_1"]},{id:"time_2b",name:"Time Dilation",description:"Age slower",icon:"⌚",effect:"5% slower aging per level",stat:"ageLength",value:5,cost:40,maxLevel:5,tier:2,position:{x:3,y:1},prerequisites:["time_1"]},{id:"time_3",name:"Drink Water",description:"Further increase max age",icon:"💧",effect:"+10 years",stat:"maxAge",value:10,cost:40,maxLevel:3,tier:3,position:{x:2,y:2},prerequisites:["time_2a","time_2b"]},{id:"time_4",name:"Time Lord",description:"Double your max age",icon:"👤",effect:"x2 max age",stat:"maxAge",value:0,cost:40,maxLevel:1,tier:4,position:{x:2,y:3},prerequisites:["time_3"]}]}};function be(t,a,e,i){["weapon","helmet","body","legs","accessory1","accessory2","belt","boots","offhand"].forEach(o=>{const s=a.getElementById(`${o}-tooltip`);s&&(s.innerHTML="",s.style.display="none")})}function Y(t,a,e,i,n=!1){const o=a.getElementById("inventory-tooltip");if(!o||!i)return;const s=t.player.equipment[i.type],c=S[i.rarity]||S.common,r=s?S[s.rarity]||S.common:null;let d=`<div class="tooltip-title" style="color: ${c.color};">${M(i)}</div>`;d+=`<div class="tooltip-item-type">${i.type.charAt(0).toUpperCase()+i.type.slice(1)}</div>`;const{baseStats:h,affixStats:p}=T(i),f=[],y=[];if(h.attack>0){let m=`${h.attack} Base Attack`;if(n&&s){const{baseStats:k}=T(s),u=h.attack-k.attack;u>0?m=`<div class="stat-gain">${m} (+${u})</div>`:u<0?m=`<div class="stat-loss">${m} (${u})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-base">${m}</div>`;f.push(m)}if(i.type==="weapon"&&i.baseAttackInterval){let m=`${(i.baseAttackInterval/1e3).toFixed(1)}s Base Attack Speed`;if(n&&s){const k=s.baseAttackInterval||2e3,u=i.baseAttackInterval-k;u>0?m=`<div class="stat-loss">${m} (+${(u/1e3).toFixed(1)}s)</div>`:u<0?m=`<div class="stat-gain">${m} (${(u/1e3).toFixed(1)}s)</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-base">${m}</div>`;f.push(m)}if(h.maxHp>0){let m=`${h.maxHp} Max HP`;if(n&&s){const{baseStats:k}=T(s),u=h.maxHp-k.maxHp;u>0?m=`<div class="stat-gain">${m} (+${u})</div>`:u<0?m=`<div class="stat-loss">${m} (${u})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-base">${m}</div>`;f.push(m)}const v=[{key:"attackSpeed",label:"Attack Speed",unit:"%"},{key:"critChance",label:"Crit Chance",unit:"%"},{key:"critDamage",label:"Crit Damage",unit:"%"},{key:"lifeSteal",label:"Life Steal",unit:"%"},{key:"dodge",label:"Dodge",unit:"%"},{key:"blockChance",label:"Block Chance",unit:"%"}];if(v.forEach(({key:m,label:k,unit:u})=>{if(h[m]>0){let g=`${h[m]}${u} ${k}`;if(n&&s){const{baseStats:x}=T(s),w=h[m]-x[m];w>0?g=`<div class="stat-gain">${g} (${w}${u})</div>`:w<0?g=`<div class="stat-loss">${g} (${w}${u})</div>`:g=`<div class="stat-neutral">${g}</div>`}else g=`<div class="stat-base">${g}</div>`;f.push(g)}}),p.attack>0){let m=`${p.attack} Attack`;if(n&&s){const{affixStats:k}=T(s),u=p.attack-k.attack;u>0?m=`<div class="stat-gain">${m} (+${u})</div>`:u<0?m=`<div class="stat-loss">${m} (${u})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-neutral">${m}</div>`;y.push(m)}if(p.maxHp>0){let m=`${p.maxHp} Max HP`;if(n&&s){const{affixStats:k}=T(s),u=p.maxHp-k.maxHp;u>0?m=`<div class="stat-gain">${m} (+${u})</div>`:u<0?m=`<div class="stat-loss">${m} (${u})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-neutral">${m}</div>`;y.push(m)}if(v.forEach(({key:m,label:k,unit:u})=>{if(p[m]>0){let g=`${p[m]}${u} ${k}`;if(n&&s){const{affixStats:x}=T(s),w=p[m]-x[m];w>0?g=`<div class="stat-gain">${g} (${w}${u})</div>`:w<0?g=`<div class="stat-loss">${g} (${w}${u})</div>`:g=`<div class="stat-neutral">${g}</div>`}else g=`<div class="stat-neutral">${g}</div>`;y.push(g)}}),d+=f.join(""),f.length>0&&y.length>0&&(d+='<div class="tooltip-separator"></div>'),d+=y.join(""),n&&s){const{baseStats:m,affixStats:k}=T(s),u=[];[{key:"attack",label:"Attack",unit:"",isBase:!0},{key:"maxHp",label:"Max HP",unit:"",isBase:!0},{key:"attackSpeed",label:"Attack Speed",unit:"%",isBase:!0},{key:"critChance",label:"Crit Chance",unit:"%",isBase:!0},{key:"critDamage",label:"Crit Damage",unit:"%",isBase:!0},{key:"lifeSteal",label:"Life Steal",unit:"%",isBase:!0},{key:"dodge",label:"Dodge",unit:"%",isBase:!0},{key:"blockChance",label:"Block Chance",unit:"%",isBase:!0}].forEach(({key:g,label:x,unit:w})=>{const C=(m[g]||0)+(k[g]||0),re=(h[g]||0)+(p[g]||0);C>0&&re===0&&u.push(`<div class="stat-missing">${x}: ${C}${w} → 0${w} (-${C}${w})</div>`)}),u.length>0&&(d+='<div class="tooltip-separator"></div>',d+=u.join("")),d+=`<div class="tooltip-comparison">Compared to: <span style="color: ${r.color};">${M(s)}</span></div>`}else s?d+='<div class="tooltip-comparison">Hold Shift for detailed comparison</div>':d+=`<div class="tooltip-comparison">No ${i.type} equipped</div>`;const E=Math.floor((i.price!==void 0?i.price:10)*.5);d+=`<div class="tooltip-sell-info">Right click to sell for ${E} gold</div>`,o.innerHTML=d,o.style.display="block",ie(e,a)}function R(){const t=document.getElementById("inventory-tooltip");t&&(t.style.display="none")}function ie(t,a){const e=a.getElementById("inventory-tooltip");if(!e)return;const i=e.getBoundingClientRect(),n=window.innerWidth,o=window.innerHeight;let s=t.clientX+10,c=t.clientY+10;s+i.width>n&&(s=t.clientX-i.width-10),c+i.height>o&&(c=t.clientY-i.height-10),s=Math.max(5,s),c=Math.max(5,c),e.style.left=s+"px",e.style.top=c+"px"}function xe(t,a,e){const i=document.getElementById("stats-tooltip"),n=document.getElementById("stats-tooltip-name"),o=document.getElementById("stats-tooltip-content");if(i&&n&&o){let s="";const c={attack:{key:"attack",label:"Attack",unit:""},hp:{key:"maxHp",label:"Max HP",unit:""},"attack-speed":{key:"attackSpeed",label:"Attack Speed",unit:"ms"},"crit-chance":{key:"critChance",label:"Crit Chance",unit:"%"},"crit-damage":{key:"critDamage",label:"Crit Damage",unit:"%"},"life-steal":{key:"lifeSteal",label:"Life Steal",unit:"%"},dodge:{key:"dodge",label:"Dodge",unit:"%"},"block-chance":{key:"blockChance",label:"Block Chance",unit:"%"}};if(c[e]){const{key:r,label:d,unit:h}=c[e];n.textContent=`${d} Breakdown`;let p="";const f=r==="attack"?t.player.baseAttack+(t.player.level-1)*2:r==="maxHp"?t.player.baseHp+(t.player.level-1)*10:r==="attackSpeed"?t.player.equipment.weapon.baseAttackInterval:t.player[`base${d.replace(/ /g,"")}`]??0;p+=`
        <div class="stat-breakdown-item">
          <span>Base:</span>
          <span class="stat-breakdown-value">${f}${h}</span>
        </div>
      `;let y=0;for(const k in t.player.equipment){const u=t.player.equipment[k];u&&u[r]&&u[r]!==0&&(p+=`
            <div class="stat-breakdown-item">
              <span>${u.fullName||u.name}:</span>
              <span class="stat-breakdown-value">+${u[r]}${r==="attackSpeed"?"%":h}</span>
            </div>
          `,y+=u[r])}y===0&&(p+=`
          <div class="stat-breakdown-item">
            <span>Equipment:</span>
            <span class="stat-breakdown-value">+0${r==="attackSpeed"?"%":h}</span>
          </div>
        `);let v=0;for(const k in H){const u=H[k];for(const b of u.nodes)if(b.stat&&b.stat===r){const g=t.getTalentLevel(k,b.id);if(g>0){let x=0;typeof b.value=="function"?x=b.value(g):Array.isArray(b.value)?x=b.value[g-1]||0:x=(b.value||0)*g,p+=`
                <div class="stat-breakdown-item">
                  <span>${b.name} (Talent):</span>
                  <span class="stat-breakdown-value">+${x}${r==="attackSpeed"?"%":h}</span>
                </div>
              `,v+=x}}}v===0&&(p+=`
          <div class="stat-breakdown-item">
            <span>Talents:</span>
            <span class="stat-breakdown-value">+0${r==="attackSpeed"?"%":h}</span>
          </div>
        `);let m=f+y+v;if(typeof t[`getPlayer${d.replace(/ /g,"")}`]=="function")try{m=t[`getPlayer${d.replace(/ /g,"")}`]()}catch{}p+=`
        <div class="stat-breakdown-item total">
          <span>Total ${d}:</span>
          <span class="stat-breakdown-value">${m}${h}</span>
        </div>
      `,s=p}else if(e==="xp-multiplier"){const d=t.getTalentLevel("knowledge","knowledge_1"),h=t.getTalentLevel("knowledge","knowledge_2a"),p=t.getTalentLevel("knowledge","asc_knowledge_1"),f=t.getExperienceMultiplier();n.textContent="Experience Multiplier Breakdown",s=`
        <div class="stat-breakdown-item">
          <span>Base Multiplier:</span>
          <span class="stat-breakdown-value">${1 .toFixed(2)}x</span>
        </div>
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Quick Learner (Lv${d}):</span>
          <span class="stat-breakdown-value">+${(d*.05).toFixed(2)}x</span>
        </div>
        `:""}
        ${h>0?`
        <div class="stat-breakdown-item">
          <span>Battle Wisdom (Lv${h}):</span>
          <span class="stat-breakdown-value">+${(h*.2).toFixed(2)}x</span>
        </div>
        `:""}
        ${p>0?`
        <div class="stat-breakdown-item">
          <span>Enlightened One (Ascendancy):</span>
          <span class="stat-breakdown-value">×3</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Experience Multiplier:</span>
          <span class="stat-breakdown-value">${f.toFixed(2)}x</span>
        </div>
      `}else if(e==="gold-multiplier"){const d=t.getTalentLevel("wealth","wealth_1"),h=t.getTalentLevel("wealth","wealth_4"),p=t.getGoldMultiplier();n.textContent="Gold Multiplier Breakdown",s=`
        <div class="stat-breakdown-item">
          <span>Base Multiplier:</span>
          <span class="stat-breakdown-value">${1 .toFixed(2)}x</span>
        </div>
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Coin Collector (Lv${d}):</span>
          <span class="stat-breakdown-value">+${(d*.25).toFixed(2)}x</span>
        </div>
        `:""}
        ${h>0?`
        <div class="stat-breakdown-item">
          <span>Golden Touch (Ascendancy):</span>
          <span class="stat-breakdown-value">×2</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Gold Multiplier:</span>
          <span class="stat-breakdown-value">${p.toFixed(2)}x</span>
        </div>
      `}else if(e==="item-drop-chance"){const d=t.getTalentLevel("wealth","wealth_2a"),h=t.getTalentLevel("wealth","asc_wealth_1"),p=t.getItemDropMultiplier();n.textContent="Item Drop Chance Breakdown",s=`
        <div class="stat-breakdown-item">
          <span>Base Drop Chance:</span>
          <span class="stat-breakdown-value">25%</span>
        </div>
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Lucky Find (Lv${d}):</span>
          <span class="stat-breakdown-value">+${(d*10).toFixed(0)}%</span>
        </div>
        `:""}
        ${h>0?`
        <div class="stat-breakdown-item">
          <span>Golden Touch (Ascendancy):</span>
          <span class="stat-breakdown-value">+50%</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Drop Chance:</span>
          <span class="stat-breakdown-value">${(25*p).toFixed(0)}%</span>
        </div>
      `}o.innerHTML=s,i.style.display="block",i.classList.add("visible"),oe(a,document)}}function we(){const t=document.getElementById("stats-tooltip");t&&(t.classList.remove("visible"),setTimeout(()=>{t.classList.contains("visible")||(t.style.display="none")},200))}function oe(t,a){const e=a.getElementById("stats-tooltip");if(e&&e.style.display==="block"){const i=t.clientX+10,n=t.clientY+10,o=e.getBoundingClientRect(),s=window.innerWidth,c=window.innerHeight;let r=i,d=n;i+o.width>s&&(r=t.clientX-o.width-10),n+o.height>c&&(d=t.clientY-o.height-10),e.style.left=`${r}px`,e.style.top=`${d}px`}}function Ce(t,a,e){const i=S[e.rarity]||S.common,n=i.color;if(!e.type){for(const[p,f]of Object.entries(t.player.equipment))if(f===e){e.type=p;break}}if(!e.type){const p=[];e.attack&&p.push(`<div class="tooltip-stat-line"><span>Attack:</span><span>${e.attack}</span></div>`),e.maxHp&&p.push(`<div class="tooltip-stat-line"><span>Max HP:</span><span>${e.maxHp}</span></div>`),e.baseAttackInterval&&p.push(`<div class="tooltip-stat-line"><span>Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),e.attackSpeed&&p.push(`<div class="tooltip-stat-line"><span>Attack Speed:</span><span>${e.attackSpeed}%</span></div>`),e.critChance&&p.push(`<div class="tooltip-stat-line"><span>Critical Chance:</span><span>${e.critChance}%</span></div>`),e.critDamage&&p.push(`<div class="tooltip-stat-line"><span>Critical Damage:</span><span>${e.critDamage}%</span></div>`),e.dodge&&p.push(`<div class="tooltip-stat-line"><span>Dodge:</span><span>${e.dodge}%</span></div>`),e.blockChance&&p.push(`<div class="tooltip-stat-line"><span>Block Chance:</span><span>${e.blockChance}%</span></div>`),a.innerHTML=`
      <div class="tooltip-name" style="color: ${n};">
        ${M(e)}
      </div>
      <div class="tooltip-stats">
        ${p.join("")}
      </div>
      <div class="tooltip-rarity" style="color: ${n};">
        ${i.name}
      </div>
    `;return}const{baseStats:o,affixStats:s}=T(e);if(!o||!s){console.error("Error separating item stats:",e);const p=[];e.attack&&p.push(`<div class="tooltip-stat-line stat-base"><span>Attack:</span><span>${e.attack}</span></div>`),e.maxHp&&p.push(`<div class="tooltip-stat-line stat-base"><span>Max HP:</span><span>${e.maxHp}</span></div>`),e.baseAttackInterval&&p.push(`<div class="tooltip-stat-line stat-base"><span>Base Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),e.attackSpeed&&p.push(`<div class="tooltip-stat-line stat-base"><span>Attack Speed:</span><span>${e.attackSpeed}%</span></div>`),e.critChance&&p.push(`<div class="tooltip-stat-line stat-base"><span>Critical Chance:</span><span>${e.critChance}%</span></div>`),e.critDamage&&p.push(`<div class="tooltip-stat-line stat-base"><span>Critical Damage:</span><span>${e.critDamage}%</span></div>`),e.dodge&&p.push(`<div class="tooltip-stat-line stat-base"><span>Dodge:</span><span>${e.dodge}%</span></div>`),e.blockChance&&p.push(`<div class="tooltip-stat-line stat-base"><span>Block Chance:</span><span>${e.blockChance}%</span></div>`),a.innerHTML=`
      <div class="tooltip-name" style="color: ${n};">
        ${M(e)}
      </div>
      <div class="tooltip-stats">
        ${p.join("")}
      </div>
      <div class="tooltip-rarity" style="color: ${n};">
        ${i.name}
      </div>
    `;return}const c=[],r=[];(e.type==="weapon"||o.attack>0)&&c.push(`<div class="tooltip-stat-line stat-base"><span>Attack:</span><span>${o.attack}</span></div>`),e.type==="weapon"&&e.baseAttackInterval&&c.push(`<div class="tooltip-stat-line stat-base"><span>Base Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),(["helmet","body","legs","boots","offhand"].includes(e.type)||o.maxHp>0)&&c.push(`<div class="tooltip-stat-line stat-base"><span>Max HP:</span><span>${o.maxHp}</span></div>`);const d=[{key:"attackSpeed",label:"Attack Speed",unit:"%"},{key:"critChance",label:"Critical Chance",unit:"%"},{key:"critDamage",label:"Critical Damage",unit:"%"},{key:"lifeSteal",label:"Life Steal",unit:"%"},{key:"dodge",label:"Dodge",unit:"%"},{key:"blockChance",label:"Block Chance",unit:"%"}];d.forEach(({key:p,label:f,unit:y})=>{o[p]>0&&c.push(`<div class="tooltip-stat-line stat-base"><span>${f}:</span><span>${o[p]}${y}</span></div>`)}),s.attack>0&&r.push(`<div class="tooltip-stat-line stat-neutral"><span>Attack:</span><span>${s.attack}</span></div>`),s.maxHp>0&&r.push(`<div class="tooltip-stat-line stat-neutral"><span>Max HP:</span><span>${s.maxHp}</span></div>`),d.forEach(({key:p,label:f,unit:y})=>{s[p]>0&&r.push(`<div class="tooltip-stat-line stat-neutral"><span>${f}:</span><span>${s[p]}${y}</span></div>`)});let h=c.join("");c.length>0&&r.length>0&&(h+='<div class="tooltip-separator"></div>'),h+=r.join(""),a.innerHTML=`
    <div class="tooltip-name" style="color: ${n};">
      ${M(e)}
    </div>
    <div class="tooltip-stats">
      ${h}
    </div>
    <div class="tooltip-rarity" style="color: ${n};">
      ${i.name}
    </div>
  `}function Se(){let t=document.getElementById("admin-panel");return t||(t=document.createElement("div"),t.id="admin-panel",t.style.position="fixed",t.style.top="60px",t.style.right="30px",t.style.background="rgba(30,30,30,0.98)",t.style.border="2px solid #FFD700",t.style.borderRadius="10px",t.style.padding="18px 22px 18px 22px",t.style.zIndex=9999,t.style.display="none",t.style.color="#fff",t.style.minWidth="220px",t.innerHTML=`
      <h3 style="margin-top:0;margin-bottom:10px;color:#FFD700;">Admin Panel</h3>
      <div style="margin-bottom:10px;">
        <label>Give Levels: <input id="admin-levels" type="number" min="1" value="1" style="width:50px;"></label>
        <button id="admin-give-levels">Give</button>
      </div>
      <div style="margin-bottom:10px;">
        <label>Give Gold: <input id="admin-gold" type="number" min="1" value="1000" style="width:70px;"></label>
        <button id="admin-give-gold">Give</button>
      </div>
      <div style="margin-bottom:10px;">
        <label><input id="admin-guaranteed-drops" type="checkbox"> Guaranteed Drops</label>
      </div>
      <button id="admin-close">Close</button>
    `,document.body.appendChild(t)),t}function Ee(){const t=Se();return t.style.display="block",!0}function Le(){const t=document.getElementById("admin-panel");return t&&(t.style.display="none"),!1}function Te(t){const a=document.getElementById("kill-counter"),e=document.getElementById("kill-counter-text");a.style.display="block";let i=t.zones[t.currentZone];i.boss&&i.boss.requiredKills>0?e.innerHTML=`Enemies defeated this zone: ${t.killCount} <br>Kills to boss: ${t.killCount%i.boss.requiredKills}/${i.boss.requiredKills}`:e.textContent=`Enemies defeated this zone: ${t.killCount}`}function F(t,a,e,i="enemy",n=!1,o=!1,s=!1){const c=t.createElement("div");if(c.className="floating-damage",o?(c.textContent="MISS",c.classList.add("miss")):s?(c.textContent=`+${a}`,c.classList.add("heal")):(c.textContent=`-${a}`,c.classList.add(i),n&&(c.classList.add("critical"),c.textContent=`CRIT! -${a}`)),!e)return;const r=e.getBoundingClientRect();c.style.position="fixed",c.style.left=`${r.left+r.width/2+Math.random()*40-20}px`,c.style.top=`${r.top+r.height/2}px`,c.style.transform="translate(-50%, -50%)",t.body.appendChild(c),setTimeout(()=>{c.parentNode&&c.parentNode.removeChild(c)},1500)}function I(t){if(t.currentZone!=="restArea"&&!t.currentEnemy){if(t.currentEnemy=t.spawnEnemy(),!t.currentEnemy)return;t.addCombatMessage(`A wild ${t.currentEnemy.name} appears!`),t.combat.isActive=!0,t.combat.lastAttackTime=Date.now(),t.attackBars.player.currentTime=0,t.attackBars.enemy.currentTime=0,t.attackBars.player.maxTime=t.getPlayerAttackInterval(),t.attackBars.enemy.maxTime=t.getEnemyAttackInterval(t.currentEnemy)}}function Ie(t,a){const e=a.getElementById("death-modal");e.style.display="flex",t.combat.isActive=!1}function Be(t,a){const e=a.getElementById("death-modal");e.style.display="none",ye(t,a)}let _=!1,D=null,$=null,P=!1,O=!1,A="";document.addEventListener("keydown",t=>{P||(A+=t.key.toLowerCase(),A.length>4&&(A=A.slice(-4)),A==="poop"&&(P=Ee(),setTimeout(()=>{A=""},100)))});document.addEventListener("click",t=>{if(!(!P||!document.getElementById("admin-panel").contains(t.target))){if(t.target.id==="admin-close")P=Le();else if(t.target.id==="admin-give-levels"){const e=parseInt(document.getElementById("admin-levels").value);if(!isNaN(e)&&e>0){for(let i=0;i<e;i++)l.levelUp();l.player.xp=0,l.addToInventory(G(["legendary"],1)),l.addLogMessage(`Admin: Gave ${e} level(s)`,"system"),L()}}else if(t.target.id==="admin-give-gold"){const e=parseInt(document.getElementById("admin-gold").value);!isNaN(e)&&e>0&&(l.player.gold+=e,l.addLogMessage(`Admin: Gave ${e} gold`,"system"),L())}}});document.addEventListener("change",t=>{P&&t.target.id==="admin-guaranteed-drops"&&(O=t.target.checked,l.addLogMessage(`Admin: Guaranteed drops ${O?"enabled":"disabled"}`,"system"))});function Z(t){const a="/idle-rpg-game/",e=t.startsWith("/")?t.slice(1):t;return a+e}function $e(t,a=2e3){const e=1+t/100;return Math.max(500,a/e)}class Ae{constructor(){this.player={level:1,hp:100,baseHp:100,maxHp:100,equipmentMaxHp:0,age:18,baseAge:18,maxAge:50,subAge:0,ageLength:3e4,attack:10,baseAttack:10,equipmentAttack:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0,gold:0,xp:0,nextLevelXp:100,equipment:{weapon:{name:"Rusty Sword",type:"weapon",rarity:"common",attack:5,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0,price:0,baseAttackInterval:2500},offhand:null,helmet:null,body:null,legs:null,belt:null,boots:null,necklace:null,ring:null},inventory:[]},this.currentZone="basement",this.killCount=0,this.currentEnemy=null,this.unlockedZones=["basement","restArea","forest"],this.needsInventoryUpdate=!0,this.needsCharacterUpdate=!0,this.lastAgeUpdate=performance.now(),this.respawnTimer={isActive:!1,currentTime:0,maxTime:3e3},this.combat={isActive:!1,playerTurn:!0,lastAttackTime:0},this.ageBar={currentAge:0,maxAge:this.player.maxAge-this.player.baseAge},this.attackBars={player:{currentTime:0,maxTime:2e3},enemy:{currentTime:0,maxTime:3e3}},this.activityLog=[],this.logFilter="all",this.passiveSystems={studyHabits:{lastTick:0,interval:6e4},passiveLearning:{lastTick:0,interval:1e3}},this.inventorySettings={sortBy:"name",filterBy:"all",autoSell:{enabled:!1,rarities:{common:!1,uncommon:!1,rare:!1},types:{weapon:!1,offhand:!1,helmet:!1,body:!1,legs:!1,belt:!1,boots:!1,necklace:!1,ring:!1}}},this.needsInventoryUpdate=!0,this.zones=he,this.talents={power:{},wealth:{},knowledge:{},time:{}},this.ascensionCount=0,this.isShowingTalentTree=!1,this.currentDeathMessage=Q()}calculateStats(){let a=this.getBaseAttackWithTalents(),e=this.player.baseHp,i=0,n=0,o=0,s=0,c=0,r=0,d=0;this.getTalentLevel("power","power_1");const h=this.getTalentLevel("power","power_2a"),p=this.getTalentLevel("power","power_2b"),f=this.getTalentLevel("power","power_3a"),y=this.getTalentLevel("power","power_3b"),v=this.getTalentLevel("power","power_3c"),E=this.getTalentLevel("power","power_4");let m=p*2,k=y*15,u=f*10,b=v*5,g=v*3;h>0&&(a*=1+h*.1),E>0&&(a*=1.5,m+=25,u+=20);for(const w in this.player.equipment){const C=this.player.equipment[w];C&&(i+=C.attack||0,n+=C.maxHp||0,o+=C.attackSpeed||0,s+=C.critChance||0,c+=C.critDamage||0,r+=C.dodge||0,d+=C.blockChance||0)}const x=(this.player.level-1)*10;this.player.attack=a+i,this.player.maxHp=e+x+n,this.player.equipmentAttack=i,this.player.equipmentMaxHp=n,this.player.attackSpeed=o+u,this.player.critChance=s+m,this.player.critDamage=c+k,this.player.dodge=r+b,this.player.blockChance=d+g,this.player.hp>this.player.maxHp&&(this.player.hp=this.player.maxHp)}addToInventory(a){if(a.addedTimestamp=Date.now(),this.shouldAutoSell(a)){this.sellItem(a);return}this.player.inventory.push(a),this.needsInventoryUpdate=!0}shouldAutoSell(a){if(!this.inventorySettings.autoSell.enabled)return!1;const e=a.rarity||"common",i=this.inventorySettings.autoSell.rarities[e],n=this.inventorySettings.autoSell.types[a.type];return i||n}sellItem(a,e=!0){let i=Math.floor(a.price!==void 0?a.price:10);const n=this.getTalentLevel("wealth","wealth_3b");return i*=1+n*.1,this.player.gold+=i,e&&this.addLogMessage(`💰 Sold ${a.fullName||a.name} for ${i} gold`,"shop"),i}sellAllJunk(){let a=0,e=0;const i=[];return this.player.inventory.forEach((n,o)=>{this.shouldAutoSell(n)&&i.push({item:n,index:o})}),i.reverse().forEach(({item:n,index:o})=>{a+=this.sellItem(n,!1),this.player.inventory.splice(o,1),this.needsInventoryUpdate=!0,e++}),e>0?this.addLogMessage(`💰 Sold ${e} items for ${a} total gold`,"shop"):this.addLogMessage("No items to sell based on current auto-sell settings","system"),{itemsSold:e,totalGold:a}}getSortedAndFilteredInventory(){let a=[...this.player.inventory];return this.inventorySettings.filterBy!=="all"&&(a=a.filter(e=>e.type===this.inventorySettings.filterBy)),a.sort((e,i)=>{switch(this.inventorySettings.sortBy){case"rarity":const n=["common","uncommon","rare","epic","legendary"],o=n.indexOf(e.rarity||"common");return n.indexOf(i.rarity||"common")-o;case"type":return e.type.localeCompare(i.type);case"attack":return(i.attack||0)-(e.attack||0);case"new":return(i.addedTimestamp||0)-(e.addedTimestamp||0);case"name":default:return(e.fullName||e.name).localeCompare(i.fullName||i.name)}}),a}equipItem(a,e=!1,i=-1){console.log("equipItem called with:",{item:a,fromInventory:e,inventoryIndex:i});const n=a.type;if(n==="weapon"&&a.handType==="2h"){if(this.player.equipment.offhand){const c={...this.player.equipment.offhand,type:"offhand"};c.addedTimestamp=Date.now(),this.player.inventory.push(c),this.player.equipment.offhand=null,this.addLogMessage(`Unequipped ${c.fullName||c.name} to wield 2-handed weapon`,"system")}}else if(n==="offhand"){const c=this.player.equipment.weapon;if(c&&c.handType==="2h"){this.addLogMessage("Cannot equip offhand item while wielding a 2-handed weapon!","system");return}}let o=null;this.player.equipment[n]&&(o={...this.player.equipment[n],type:n});const s={name:a.name,fullName:a.fullName||a.name,rarity:a.rarity,attack:a.attack||0,maxHp:a.maxHp||0,attackSpeed:a.attackSpeed||0,critChance:a.critChance||0,critDamage:a.critDamage||0,dodge:a.dodge||0,blockChance:a.blockChance||0,handType:a.handType||"1h",prefixes:a.prefixes||[],suffixes:a.suffixes||[]};console.log("Equipping to slot:",n,"new item:",s),this.player.equipment[n]=s,this.needsCharacterUpdate=!0,e&&i>=0&&(console.log("Removing from inventory at index:",i,"inventory before:",[...this.player.inventory]),this.player.inventory.splice(i,1),this.needsInventoryUpdate=!0,console.log("Inventory after removal:",[...this.player.inventory]),o&&(console.log("Adding previously equipped item to inventory:",o),o.addedTimestamp=Date.now(),this.player.inventory.push(o))),this.calculateStats(),console.log("Stats after equipping:",{attack:this.player.attack,maxHp:this.player.maxHp})}spawnEnemy(){const a=this.zones[this.currentZone];if(!a.enemies||a.enemies.length===0)return null;if(a.boss&&l.killCount>=a.boss.requiredKills&&l.killCount%a.boss.requiredKills===0){ue(a.boss.name);const n={...a.boss,hp:a.boss.hp,maxHp:a.boss.hp,attackInterval:a.boss.attackInterval||2e3,isBoss:!0,isEpicDropper:a.boss.isEpicDropper||!1,isLegendaryDropper:a.boss.isLegendaryDropper||!1};return this.addCombatMessage(`🏴‍☠️ The ${a.boss.name} emerges from the depths!`,"system"),n}const e=a.enemies[Math.floor(Math.random()*a.enemies.length)];return{...e,hp:e.hp,maxHp:e.hp,attackInterval:e.attackInterval||2e3}}gainXp(a){for(this.player.xp+=a;this.player.xp>=this.player.nextLevelXp;)this.levelUp()}levelUp(){this.player.xp-=this.player.nextLevelXp,this.player.level++;const a=this.getTalentLevel("knowledge","knowledge_3a"),e=Math.min(.3,a*.05);this.player.nextLevelXp=Math.floor(this.player.nextLevelXp*1.2*(1-e)),this.player.maxHp+=10,this.player.attack+=2,this.player.hp=this.player.hp+this.player.maxHp*.4,this.player.hp>this.player.maxHp&&(this.player.hp=this.player.maxHp),document.getElementById("character-level").classList.add("level-up"),setTimeout(()=>{document.getElementById("character-level").classList.remove("level-up")},500),this.addLogMessage(`🎉 Level up! You are now level ${this.player.level}!`,"loot","level-up"),V(l,document,I)}addLogMessage(a,e="system",i=""){const n={message:a,category:e,type:i,timestamp:new Date().toLocaleTimeString()};this.activityLog.push(n),this.activityLog.length>100&&this.activityLog.shift(),this.updateActivityLog()}addCombatMessage(a,e=""){this.addLogMessage(a,"combat",e)}updateActivityLog(){const a=document.getElementById("activity-messages");if(!a)return;a.innerHTML="",(this.logFilter==="all"?this.activityLog:this.activityLog.filter(i=>i.category===this.logFilter)).forEach(i=>{const n=document.createElement("div");n.className=`activity-message ${i.category} ${i.type}`,n.innerHTML=`<span class="timestamp">[${i.timestamp}]</span> ${i.message}`,a.appendChild(n)}),a.scrollTop=a.scrollHeight}setLogFilter(a){this.logFilter=a,this.updateActivityLog(),document.querySelectorAll(".filter-btn").forEach(e=>{e.classList.remove("active")}),document.querySelector(`[data-filter="${a}"]`).classList.add("active")}clearActivityLog(){this.activityLog=[],this.updateActivityLog()}save(){const a={player:this.player,currentZone:this.currentZone,unlockedZones:this.unlockedZones};localStorage.setItem("idleRPG_save",JSON.stringify(a)),alert("Game saved successfully!")}load(){const a=localStorage.getItem("idleRPG_save");if(a){const e=JSON.parse(a);return this.player={...this.player,...e.player},this.currentZone=e.currentZone||"basement",this.unlockedZones=e.unlockedZones||["basement","forest"],Object.keys(this.player.equipment).forEach(i=>{const n=this.player.equipment[i];n&&!n.type&&(n.type=i)}),this.calculateStats(),this.needsCharacterUpdate=!0,alert("Game loaded successfully!"),!0}return!1}reset(){confirm("Are you sure you want to reset your game? This cannot be undone!")&&(localStorage.removeItem("idleRPG_save"),location.reload())}getPlayerAttackInterval(){const e=this.player.equipment.weapon?.baseAttackInterval||2e3;return $e(this.player.attackSpeed||0,e)}getEnemyAttackInterval(a){return a?.attackInterval||2e3}updateAttackBars(a){if(!(!this.combat.isActive||!this.currentEnemy)){if(this.attackBars.player.maxTime=this.getPlayerAttackInterval(),this.attackBars.player.currentTime+=a,this.attackBars.enemy.maxTime=this.getEnemyAttackInterval(this.currentEnemy),this.attackBars.enemy.currentTime+=a,this.attackBars.player.currentTime>=this.attackBars.player.maxTime){this.performPlayerAttack(),this.attackBars.player.currentTime=0;const e=document.getElementById("player-attack-fill");e&&(e.style.width="0%")}if(this.attackBars.enemy.currentTime>=this.attackBars.enemy.maxTime){this.performEnemyAttack(),this.attackBars.enemy.currentTime=0;const e=document.getElementById("enemy-attack-fill");e&&(e.style.width="0%")}this.updateAttackBarUI()}}updateAgeBar(){this.ageBar.maxAge=this.player.maxAge-this.player.baseAge,this.ageBar.currentAge=this.player.age-this.player.baseAge;const a=document.getElementById("player-age-bar");a&&(a.style.width="0%"),this.updateAgeBarUI()}updateAgeBarUI(){const a=(this.ageBar.currentAge+this.player.subAge/10)/this.ageBar.maxAge*100,e=document.getElementById("player-age-bar");e&&(e.style.width=`${Math.min(100,a)}%`);const i=document.getElementById("player-age-text");i&&(i.textContent=`${this.player.age}.${this.player.subAge} yrs old`)}updateRespawnTimer(a){this.respawnTimer.isActive&&(this.respawnTimer.currentTime+=a,this.respawnTimer.currentTime>=this.respawnTimer.maxTime&&(this.respawnTimer.isActive=!1,this.respawnTimer.currentTime=0,I(l)))}updatePassiveSystems(a){const e=this.getTalentLevel("knowledge","knowledge_2b");if(e>0&&a-this.passiveSystems.studyHabits.lastTick>=this.passiveSystems.studyHabits.interval){const n=Math.floor(this.player.level*.05*e);n>0&&(this.gainXp(n),this.addLogMessage(`Study Habits: Gained ${n} bonus XP from passive learning!`,"system","passive-xp")),this.passiveSystems.studyHabits.lastTick=a}const i=this.getTalentLevel("knowledge","knowledge_3c");if(i>0&&a-this.passiveSystems.passiveLearning.lastTick>=this.passiveSystems.passiveLearning.interval){const o=Math.floor(1*i);o>0&&(this.gainXp(o),(a-this.passiveSystems.passiveLearning.lastTick)%3e4<1e3&&this.addLogMessage(`Passive Learning: Gained ${o*30} XP over the last 30 seconds!`,"system","passive-xp")),this.passiveSystems.passiveLearning.lastTick=a}}updateAttackBarUI(){const a=this.attackBars.player.currentTime/this.attackBars.player.maxTime*100,e=this.attackBars.enemy.currentTime/this.attackBars.enemy.maxTime*100,i=document.getElementById("player-attack-fill"),n=document.getElementById("enemy-attack-fill");i&&(i.style.width=`${Math.min(100,a)}%`),n&&(n.style.width=`${Math.min(100,e)}%`);const o=document.getElementById("player-attack-label"),s=document.getElementById("enemy-attack-label");if(o){const c=Math.floor(this.attackBars.player.currentTime),r=Math.floor(this.attackBars.player.maxTime);o.textContent=`${c}/${r}`}if(s){const c=Math.floor(this.attackBars.enemy.currentTime),r=Math.floor(this.attackBars.enemy.maxTime);s.textContent=`${c}/${r}`}}performPlayerAttack(){if(!this.currentEnemy)return;let a=this.player.attack,e=!1;if(this.player.critChance>0&&Math.random()*100<=this.player.critChance&&(e=!0,a=Math.floor(a*(1+this.player.critDamage/100))),this.currentEnemy.hp-=a,this.currentEnemy.hp<=0){const c=document.getElementById("enemy-hp-bar");c&&(c.classList.add("instant"),c.style.width="0%",c.classList.add("respawning"),setTimeout(()=>{c.classList.remove("instant")},50))}const i=document.getElementById("enemy-hp-bar");i&&this.currentEnemy.hp>0&&F(document,a,i,"enemy",e);let n=`You attack ${this.currentEnemy.name} for ${a} damage`;e&&(n+=" (💥 CRITICAL HIT!)"),n+="!",this.addCombatMessage(n,e?"player-crit":"player-attack");const o=document.querySelector(".enemy-side");o&&(o.classList.add("damage-animation"),setTimeout(()=>{o.classList.remove("damage-animation")},300));const s=document.getElementById("player-image");s&&(s.classList.add("player-attacking"),setTimeout(()=>{s.classList.remove("player-attacking")},600)),this.currentEnemy.hp<=0&&this.handleEnemyDefeat()}performEnemyAttack(){if(!this.currentEnemy)return;const a=document.getElementById("enemy-image");if(a&&(a.classList.add("enemy-attacking"),setTimeout(()=>{a.classList.remove("enemy-attacking")},600)),this.player.dodge>0&&Math.random()*100<=this.player.dodge){const r=document.getElementById("player-hp-bar");r&&F(document,0,r,"player",!1,!0),this.addCombatMessage(`You dodge ${this.currentEnemy.name}'s attack! 💨`,"player-dodge");return}let e=this.currentEnemy.attack,i=!1;this.player.blockChance>0&&Math.random()*100<=this.player.blockChance&&(i=!0,e=Math.floor(e*.5)),this.player.hp-=e;const n=document.getElementById("player-hp-bar");n&&F(document,e,n,"player",!1,!1,!1);let o=`${this.currentEnemy.name} attacks you for ${e} damage`;i&&(o+=" (🛡️ BLOCKED!)"),o+="!",this.addCombatMessage(o,i?"enemy-blocked":"enemy-attack");const s=document.querySelector(".player-side");s&&(s.classList.add("damage-animation"),setTimeout(()=>{s.classList.remove("damage-animation")},300)),this.player.hp<=0&&this.handlePlayerDeath()}handleEnemyDefeat(){l.killCount++;const a=this.currentEnemy.gold,e=.1+Math.random()*.9;let i=Math.floor(a*e),n=this.currentEnemy.xp;i=Math.floor(i*this.getGoldMultiplier());const o=this.getTalentLevel("knowledge","knowledge_3b");let s=1;o>0&&l.killCount%10===0&&(s=5*o,this.addLogMessage(`🌟 Experience Burst! ${s}x XP bonus on this kill!`,"loot","experience-burst")),n=Math.floor(n*this.getExperienceMultiplier()*s),this.player.gold+=i,this.gainXp(n),this.addLogMessage(`${this.currentEnemy.name} defeated! Gained ${i} gold and ${n} XP!`,"loot","enemy-defeated"),this.currentZone==="goblinCave"&&this.currentEnemy.name.includes("Goblin")&&!this.currentEnemy.isBoss&&this.addCombatMessage(`Goblins defeated: ${l.killCount}/${this.zones[this.currentZone].boss.requiredKills}`,"system");let c;const r=this.zones[this.currentZone];if(this.currentEnemy.isBoss&&J(this.currentEnemy.name),this.currentEnemy.isLegendaryDropper)c=G(["legendary"],1),this.addLogMessage(`💎 The ${this.currentEnemy.name} dropped a legendary item! ${c.fullName}!`,"loot","enemy-defeated"),this.addToInventory(c);else if(this.currentEnemy.isEpicDropper)c=G(["epic"],1),this.addLogMessage(`💎 The ${this.currentEnemy.name} dropped an epic item! ${c.fullName}!`,"loot","enemy-defeated"),J(this.currentEnemy.name),this.addToInventory(c);else if(this.currentZone!=="basement"){const d=r.dropChance||25,h=r.allowedRarities||["common","uncommon","rare","epic"],p=this.getItemDropMultiplier();let f=d*p;O&&(f=100),Math.random()*100<=f&&(c=G(h),this.addLogMessage(`${this.currentEnemy.name} dropped ${c.fullName}!`,"loot","enemy-defeated"),this.addToInventory(c))}this.currentEnemy=null,this.combat.isActive=!1,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,this.respawnTimer.isActive=!0,this.respawnTimer.currentTime=0}handlePlayerDeath(){this.combat.isActive=!1,this.currentEnemy=null,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,this.ageBar.currentAge=0,l.killCount=0,be(l,document),this.addCombatMessage("This life is over! Choose to ascend and gain permanent power...","player-death"),this.currentDeathMessage=Q(),ae(l,document),Ie(l,document)}getTalentLevel(a,e){return this.talents[a][e]||0}getBaseAttackWithTalents(){const a=this.player.baseAttack,e=this.getTalentLevel("power","power_1");return a+e*5}getBaseMaxHpWithTalents(){return 100}getBaseAttackSpeedWithTalents(){return this.getTalentLevel("power","power_3a")*10}getBaseCritChanceWithTalents(){const a=this.getTalentLevel("power","power_2b"),e=this.getTalentLevel("power","power_4");let i=a*2;return e>0&&(i+=25),i}getBaseCritDamageWithTalents(){return 0}getBaseLifeStealWithTalents(){return 0}getBaseDodgeWithTalents(){return 0}getBaseBlockChanceWithTalents(){return 0}getExperienceMultiplier(){let a=1;const e=this.getTalentLevel("knowledge","knowledge_1"),i=this.getTalentLevel("knowledge","knowledge_2a"),n=this.getTalentLevel("knowledge","knowledge_4");return a+=e*.05,a+=i*.2,n>0&&(a*=3),a}getGoldMultiplier(){let a=1;const e=this.getTalentLevel("wealth","wealth_1"),i=this.getTalentLevel("wealth","wealth_4");return a+=e*.25,i>0&&(a*=2),a}getItemDropMultiplier(){let a=1;const e=this.getTalentLevel("wealth","wealth_2a"),i=this.getTalentLevel("wealth","wealth_4");return a+=e*.1,i>0&&(a+=.5),a}canAllocateTalent(a,e){const n=H[a].nodes.find(r=>r.id===e);if(!n)return!1;const o=this.getTalentLevel(a,e);if(o>=n.maxLevel)return!1;let s=n.cost*(o+1);if(this.getTalentLevel("knowledge","knowledge_5")>0&&(s=Math.floor(s*.5)),this.player.gold<s)return!1;for(const r of n.prerequisites)if(this.getTalentLevel(a,r)===0)return!1;return!0}allocateTalent(a,e){if(!this.canAllocateTalent(a,e))return!1;const n=H[a].nodes.find(r=>r.id===e),o=this.getTalentLevel(a,e);let s=n.cost*(o+1);return this.getTalentLevel("knowledge","knowledge_5")>0&&(s=Math.floor(s*.5)),this.player.gold-=s,this.talents[a][e]=o+1,this.addLogMessage(`Allocated ${n.name} (Level ${o+1})`,"system"),!0}getTotalTalentPoints(){let a=0;for(const e in this.talents)for(const i in this.talents[e])a+=this.talents[e][i];return a}ascend(a,e){this.player.gold;const i=this.getTalentLevel("knowledge","knowledge_3c"),n=i>0?i:1;if(this.player.level=n,this.player.hp=this.getBaseMaxHpWithTalents(),this.player.maxHp=this.getBaseMaxHpWithTalents(),this.player.attack=10,this.player.equipmentAttack=0,this.player.equipmentMaxHp=0,this.player.attackSpeed=0,this.player.critChance=0,this.player.critDamage=0,this.player.dodge=0,this.player.blockChance=0,this.player.age=this.player.baseAge,this.player.xp=0,this.player.nextLevelXp=100,n>1){for(let o=1;o<n;o++)this.player.maxHp+=10,this.player.nextLevelXp=Math.floor(this.player.nextLevelXp*1.2);this.player.hp=this.player.maxHp,this.addLogMessage(`🌟 Enlightened One: Starting at level ${n}!`,"system","enlightened-start")}this.player.inventory=[],this.player.equipment={weapon:{name:"Rusty Sword",type:"weapon",rarity:"common",attack:5,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0,price:0,baseAttackInterval:2500},offhand:null,helmet:null,body:null,legs:null,belt:null,boots:null,necklace:null,ring:null},this.unlockedZones=["basement","restArea","forest"],this.currentZone="basement",V(a,e,I),this.currentEnemy=null,this.combat.isActive=!1,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,this.applyTalentBonuses(),this.ascensionCount++,this.addLogMessage(`Ascension ${this.ascensionCount} complete! Your journey begins anew with ${this.getTotalTalentPoints()} talent points.`,"system"),this.needsCharacterUpdate=!0,this.needsInventoryUpdate=!0,this.updateAgeBarUI()}applyTalentBonuses(){const a=this.getTalentLevel("knowledge","knowledge_3c");a>0&&(this.player.level=a,this.player.xp=0,this.player.nextLevelXp=this.calculateXpForLevel(a+1));const e=this.getTalentLevel("power","power_1");this.player.attack+=e*5;const i=this.getTalentLevel("time","time_1"),n=this.getTalentLevel("time","time_2a"),o=this.getTalentLevel("time","time_2b"),s=this.getTalentLevel("time","time_3"),c=this.getTalentLevel("time","time_4");i>0&&(this.player.maxAge=50+i*5),n>0&&(this.player.baseAge=18-n*2),o>0&&(this.player.ageLength=this.player.ageLength*(1-o*.05)),s>0&&(this.player.maxAge=this.player.maxAge+s*10),c>0&&(this.player.maxAge*=2),this.player.age=this.player.baseAge,this.player.subAge=0,this.updateAgeBar(),this.calculateStats()}calculateXpForLevel(a){return Math.floor(100*Math.pow(1.1,a-1))}}const l=new Ae;function L(){const t=document.getElementById("inventory-gold");t&&(t.textContent=l.player.gold,t.style.fontSize="0.7rem");const a=document.getElementById("shop-gold");a&&(a.textContent=l.player.gold);const e=document.getElementById("player-image");e&&(e.src="assets/player.png",e.style.visibility="visible");const i=document.getElementById("player-attack");i&&(i.textContent=l.player.attack),l.updateAgeBarUI(),Me(),document.getElementById("character-level").textContent=l.player.level,document.getElementById("character-xp-text").textContent=`${l.player.xp} / ${l.player.nextLevelXp}`;const n=l.player.xp/l.player.nextLevelXp*100;document.getElementById("character-xp-fill").style.width=`${n}%`;const o=l.player.hp/l.player.maxHp*100;if(document.getElementById("player-hp-bar").style.width=`${o}%`,document.getElementById("player-hp-text").textContent=`${l.player.hp}/${l.player.maxHp}`,Te(l),l.currentEnemy){document.getElementById("enemy-title").textContent=l.currentEnemy.name,document.getElementById("enemy-attack").textContent=l.currentEnemy.attack;const s=document.getElementById("enemy-image");s&&(s.src=`assets/enemies/${l.currentEnemy.imageClass+".png"}`,s.alt=l.currentEnemy.name,s.style.visibility="visible");const c=l.currentEnemy.hp/l.currentEnemy.maxHp*100,r=document.getElementById("enemy-hp-bar");r&&(r.style.width=`${c}%`,r.classList.remove("respawning")),document.getElementById("enemy-hp-text").textContent=`${l.currentEnemy.hp}/${l.currentEnemy.maxHp}`}else if(l.respawnTimer.isActive){const s=Math.ceil((l.respawnTimer.maxTime-l.respawnTimer.currentTime)/1e3),c=l.respawnTimer.currentTime/l.respawnTimer.maxTime*100;document.getElementById("enemy-title").textContent=`Respawning in ${s}s...`,document.getElementById("enemy-attack").textContent="-";const r=document.getElementById("enemy-hp-bar");r&&(r.style.width=`${c}%`,r.classList.add("respawning")),document.getElementById("enemy-hp-text").textContent="";const d=document.getElementById("enemy-image");d&&(d.style.visibility="hidden")}else{document.getElementById("enemy-title").textContent="No Enemy",document.getElementById("enemy-attack").textContent="-";const s=document.getElementById("enemy-hp-bar");s&&(s.style.width="0%",s.classList.remove("respawning"));const c=document.getElementById("enemy-hp-text");c&&(c.textContent="");const r=document.getElementById("enemy-image");r&&(r.style.visibility="hidden")}if(l.needsCharacterUpdate){for(const s in l.player.equipment){const c=l.player.equipment[s],r=document.getElementById(`${s}-item`),d=document.getElementById(`${s}-tooltip`);if(r){const h=s.charAt(0).toUpperCase()+s.slice(1);if(c){const f=W(c);r.innerHTML=`
            <div class="character-slot-name">${h}</div>
            <div class="character-slot-icon">${f}</div>
            <div class="equipped-item-name">${c.name}</div>
          `}else{const f=W(s);r.innerHTML=`
            <div class="character-slot-name">${h}</div>
            <div class="character-slot-icon empty">${f}</div>
            <div class="empty-slot">Empty</div>
          `}const p=r.closest(".character-slot");c?(p.classList.add("has-item"),d&&(Ce(l,d,c),d.style.display="block")):(p.classList.remove("has-item"),r.style.color="",d&&(d.innerHTML="",d.style.display="none"))}}l.needsCharacterUpdate=!1}l.needsInventoryUpdate&&X()}function Me(){document.getElementById("stats-total-attack").textContent=l.player.attack,document.getElementById("stats-max-hp").textContent=l.player.maxHp;const t=l.getPlayerAttackInterval();document.getElementById("stats-actual-attack-speed").textContent=`${(t/1e3).toFixed(1)}s`,document.getElementById("stats-crit-chance").textContent=`${l.player.critChance||0}%`,document.getElementById("stats-crit-damage").textContent=`${l.player.critDamage||0}%`,document.getElementById("stats-dodge").textContent=`${l.player.dodge||0}%`,document.getElementById("stats-block-chance").textContent=`${l.player.blockChance||0}%`,document.getElementById("stats-xp-multiplier").textContent=`${l.getExperienceMultiplier().toFixed(2)}x`,document.getElementById("stats-gold-multiplier").textContent=`${l.getGoldMultiplier().toFixed(2)}x`,document.getElementById("stats-item-drop-chance").textContent=`${(25*l.getItemDropMultiplier()).toFixed(0)}%`;const a=document.getElementById("stats-total-attack"),e=document.getElementById("stats-max-hp");a&&(a.className="stat-value",l.player.equipmentAttack>0&&a.classList.add("positive")),e&&(e.className="stat-value",l.player.equipmentMaxHp>0&&e.classList.add("positive")),["crit-chance","crit-damage","dodge","block-chance"].forEach(r=>{const d=document.getElementById(`stats-${r}`);if(d){const h=parseInt(d.textContent);d.className="stat-value",h>0&&d.classList.add("positive")}});const n=document.getElementById("stats-xp-multiplier"),o=document.getElementById("stats-gold-multiplier"),s=document.getElementById("stats-item-drop-chance");n&&(n.className="stat-value",l.getExperienceMultiplier()>1&&n.classList.add("positive")),o&&(o.className="stat-value",l.getGoldMultiplier()>1&&o.classList.add("positive")),s&&(s.className="stat-value",l.getItemDropMultiplier()>1&&s.classList.add("positive"));const c=document.getElementById("stats-actual-attack-speed");c&&(c.className="stat-value",l.player.attackSpeed>0&&c.classList.add("positive"))}function He(t){const a=l.player.equipment[t.type];if(!a)return!0;const e={attack:t.attack||0,maxHp:t.maxHp||0,attackSpeed:t.attackSpeed||0,critChance:t.critChance||0,critDamage:t.critDamage||0,lifeSteal:t.lifeSteal||0,dodge:t.dodge||0,blockChance:t.blockChance||0},i={attack:a.attack||0,maxHp:a.maxHp||0,attackSpeed:a.attackSpeed||0,critChance:a.critChance||0,critDamage:a.critDamage||0,lifeSteal:a.lifeSteal||0,dodge:a.dodge||0,blockChance:a.blockChance||0};let n=0,o=0;for(const s in e)(e[s]>0||i[s]>0)&&(o++,e[s]>i[s]&&n++);return o>0&&n/o>.5}function W(t){if(typeof t=="string"){const s={weapon:"sword",offhand:"buckler",helmet:"helmet",body:"armor",legs:"pants",belt:"leather-belt",boots:"boots",necklace:"amulet",ring:"ring"}[t]||"sword";return`<img src="${Z(`assets/gear/${s}.svg`)}" alt="${t}" class="gear-icon" />`}let e=t.name.toLowerCase().replace(/\s+/g,"-");const i={sword:"sword",axe:"axe",mace:"mace",dagger:"dagger",staff:"staff",greatsword:"greatsword",battleaxe:"battleaxe",warhammer:"warhammer",buckler:"buckler","round-shield":"round-shield","tower-shield":"tower-shield",tome:"tome",helmet:"helmet",cap:"cap",crown:"crown",hood:"hood",armor:"armor",robe:"robe",vest:"vest",tunic:"tunic",greaves:"greaves",pants:"pants",leggings:"leggings",shorts:"shorts",sandals:"sandals",boots:"boots","heavy-boots":"heavy-boots","speed-boots":"speed-boots","leather-belt":"leather-belt","utility-belt":"utility-belt","chain-belt":"chain-belt","war-belt":"war-belt",amulet:"amulet",pendant:"pendant",ring:"ring",bracelet:"bracelet"};i[e]&&(e=i[e]);const n=t.rarity||"common";return`<img src="${Z(`assets/gear/${e}.svg`)}" alt="${t.name}" class="gear-icon rarity-${n}" loading="eager" onerror="this.style.display='none';" />`}function X(){const t=document.getElementById("inventory-items");if(!t){console.error("Inventory div not found!");return}R(),t.innerHTML="";const a=l.getSortedAndFilteredInventory();if(a.length===0){const e=document.createElement("div");e.className="inventory-empty",e.textContent=l.inventorySettings.filterBy==="all"?"No items in inventory":`No ${l.inventorySettings.filterBy} items in inventory`,e.style.color="var(--light-color)",e.style.fontStyle="italic",e.style.textAlign="center",e.style.padding="20px",t.appendChild(e);return}a.forEach(e=>{const i=l.player.inventory.findIndex(s=>s===e||s.fullName===e.fullName&&s.type===e.type),n=document.createElement("div");n.className="inventory-item",n.setAttribute("data-item-index",i),He(e)&&n.classList.add("stat-improvement");const o=e.rarity&&S[e.rarity]?S[e.rarity].color:"#9CA3AF";Math.floor((e.price!==void 0?e.price:10)*.5),n.innerHTML=`
      <div class="item-icon">${W(e)}</div>
      <div class="item-name" style="color: ${o}; font-weight: bold;">
        ${M(e)}
      </div>
    `,n.addEventListener("mouseenter",s=>{D=e,$=s,Y(l,document,s,e,_)}),n.addEventListener("mouseleave",s=>{D=null,$=null,R()}),n.addEventListener("mousemove",s=>{$=s,ie(s,document)}),n.addEventListener("click",s=>{if(s.preventDefault(),s.stopPropagation(),R(),s.button===0){const c=parseInt(n.getAttribute("data-item-index")),r=l.player.inventory[c];if(r&&c>=0&&c<l.player.inventory.length){const d={...r};l.equipItem(d,!0,c),l.addLogMessage(`✨ Equipped ${d.fullName||d.name}!`,"system"),n.classList.add("equipping"),setTimeout(()=>{L()},300)}}}),n.addEventListener("contextmenu",s=>{s.preventDefault(),s.stopPropagation(),R();const c=parseInt(n.getAttribute("data-item-index")),r=l.player.inventory[c];r&&c>=0&&c<l.player.inventory.length&&(l.sellItem(r),l.player.inventory.splice(c,1),l.needsInventoryUpdate=!0,n.classList.add("selling"),setTimeout(()=>{L()},300))}),t.appendChild(n),l.needsInventoryUpdate=!1})}document.getElementById("save-game").addEventListener("click",()=>l.save());document.getElementById("load-game").addEventListener("click",()=>{l.load()&&(q(l,document,l.currentZone,I),setTimeout(()=>I(l),500),L())});document.getElementById("reset-game").addEventListener("click",()=>l.reset());document.getElementById("end-run-btn").addEventListener("click",()=>{confirm(`Are you sure you want to ${l.currentDeathMessage.toLowerCase()}? This will end your current run and trigger ascension.`)&&(l.player.hp=0,l.handlePlayerDeath())});document.getElementById("ascend-btn").addEventListener("click",()=>Be(l,document));document.getElementById("confirm-ascend").addEventListener("click",()=>{q(l,document,"basement",I),L(),ge(l,document)});document.querySelectorAll(".character-slot").forEach(t=>{t.addEventListener("click",()=>{const a=t.getAttribute("data-slot"),e=l.player.equipment[a];if(e){const i={...e,type:a,addedTimestamp:Date.now()};l.player.inventory.push(i),l.player.equipment[a]=null,l.needsCharacterUpdate=!0,l.needsInventoryUpdate=!0,l.calculateStats(l),l.addLogMessage(`Unequipped ${e.fullName||e.name}`,"system"),t.classList.add("damage-animation"),setTimeout(()=>{t.classList.remove("damage-animation"),L()},300)}else l.addLogMessage(`No item equipped in ${a} slot`,"system")})});document.querySelectorAll(".stat-tooltip-item").forEach(t=>{const a=t.getAttribute("data-tooltip");t.addEventListener("mouseenter",e=>{xe(l,e,a)}),t.addEventListener("mouseleave",()=>{we()}),t.addEventListener("mousemove",e=>{oe(e,document)})});let te=0,z=0;const De=100;function ce(t=performance.now()){z===0&&(z=t);const a=t-z;z=t,l.updatePassiveSystems(t),l.combat.isActive&&l.currentEnemy&&l.currentZone!=="restArea"&&l.updateAttackBars(a),t-l.lastAgeUpdate>=l.player.ageLength/10&&l.player.hp>0&&(l.player.subAge+=1,console.log(`Sub-age incremented: ${l.player.subAge}`),l.player.subAge>=10&&(l.player.age+=1,l.player.subAge=0,l.player.age>=l.player.maxAge&&(l.player.hp=0,l.handlePlayerDeath())),l.lastAgeUpdate=t,l.updateAgeBar()),l.respawnTimer.isActive&&l.currentZone!=="restArea"&&l.updateRespawnTimer(a),t-te>=De&&(L(),te=t),requestAnimationFrame(ce)}function qe(){l.calculateStats(),V(l,document,I),de(l,document,I),q(l,document,"basement",I),L(),ae(l,document),document.querySelectorAll(".filter-btn").forEach(t=>{t.addEventListener("click",()=>{const a=t.getAttribute("data-filter");l.setLogFilter(a)})}),document.getElementById("clear-log").addEventListener("click",()=>{confirm("Clear all activity log entries?")&&l.clearActivityLog()}),document.getElementById("inventory-sort").addEventListener("change",t=>{l.inventorySettings.sortBy=t.target.value,l.needsInventoryUpdate=!0,X()}),document.getElementById("inventory-filter").addEventListener("change",t=>{l.inventorySettings.filterBy=t.target.value,l.needsInventoryUpdate=!0,X()}),document.getElementById("auto-sell-btn").addEventListener("click",()=>{document.getElementById("auto-sell-common").checked=l.inventorySettings.autoSell.rarities.common,document.getElementById("auto-sell-uncommon").checked=l.inventorySettings.autoSell.rarities.uncommon,document.getElementById("auto-sell-rare").checked=l.inventorySettings.autoSell.rarities.rare,document.getElementById("auto-sell-weapons").checked=l.inventorySettings.autoSell.types.weapon,document.getElementById("auto-sell-offhand").checked=l.inventorySettings.autoSell.types.offhand,document.getElementById("auto-sell-helmets").checked=l.inventorySettings.autoSell.types.helmet,document.getElementById("auto-sell-body").checked=l.inventorySettings.autoSell.types.body,document.getElementById("auto-sell-legs").checked=l.inventorySettings.autoSell.types.legs,document.getElementById("auto-sell-belt").checked=l.inventorySettings.autoSell.types.belt,document.getElementById("auto-sell-boots").checked=l.inventorySettings.autoSell.types.boots,document.getElementById("auto-sell-necklaces").checked=l.inventorySettings.autoSell.types.necklace,document.getElementById("auto-sell-rings").checked=l.inventorySettings.autoSell.types.ring,document.getElementById("auto-sell-modal").style.display="flex"}),document.getElementById("close-auto-sell").addEventListener("click",()=>{document.getElementById("auto-sell-modal").style.display="none"}),document.getElementById("save-auto-sell").addEventListener("click",()=>{if(l.inventorySettings.autoSell.rarities.common=document.getElementById("auto-sell-common").checked,l.inventorySettings.autoSell.rarities.uncommon=document.getElementById("auto-sell-uncommon").checked,l.inventorySettings.autoSell.rarities.rare=document.getElementById("auto-sell-rare").checked,l.inventorySettings.autoSell.types.weapon=document.getElementById("auto-sell-weapons").checked,l.inventorySettings.autoSell.types.offhand=document.getElementById("auto-sell-offhand").checked,l.inventorySettings.autoSell.types.helmet=document.getElementById("auto-sell-helmets").checked,l.inventorySettings.autoSell.types.body=document.getElementById("auto-sell-body").checked,l.inventorySettings.autoSell.types.legs=document.getElementById("auto-sell-legs").checked,l.inventorySettings.autoSell.types.belt=document.getElementById("auto-sell-belt").checked,l.inventorySettings.autoSell.types.boots=document.getElementById("auto-sell-boots").checked,l.inventorySettings.autoSell.types.necklace=document.getElementById("auto-sell-necklaces").checked,l.inventorySettings.autoSell.types.ring=document.getElementById("auto-sell-rings").checked,l.inventorySettings.autoSell.enabled){const t=[];if(l.player.inventory.forEach((a,e)=>{l.shouldAutoSell(a)&&t.push({item:a,index:e})}),t.length>0){let a=0;t.reverse().forEach(({item:e,index:i})=>{a+=l.sellItem(e,!1),l.player.inventory.splice(i,1),l.needsInventoryUpdate=!0}),l.addLogMessage(`💰 Auto-sold ${t.length} existing items for ${a} total gold`,"shop")}}document.getElementById("auto-sell-modal").style.display="none",l.addLogMessage("💾 Auto-sell settings saved","system")}),document.getElementById("auto-sell-enabled-main").addEventListener("change",t=>{if(l.inventorySettings.autoSell.enabled=t.target.checked,t.target.checked){l.addLogMessage("✅ Auto-sell enabled","system");const a=[];if(l.player.inventory.forEach((e,i)=>{l.shouldAutoSell(e)&&a.push({item:e,index:i})}),a.length>0){let e=0;a.reverse().forEach(({item:i,index:n})=>{e+=l.sellItem(i,!1),l.player.inventory.splice(n,1),l.needsInventoryUpdate=!0}),l.addLogMessage(`💰 Auto-sold ${a.length} existing items for ${e} total gold`,"shop")}}else l.addLogMessage("❌ Auto-sell disabled","system")}),document.getElementById("auto-sell-enabled-main").checked=l.inventorySettings.autoSell.enabled,l.addLogMessage("🎮 Welcome to the Idle RPG! Your adventure begins...","system"),Object.keys(l.player.equipment).forEach(t=>{const a=l.player.equipment[t];a&&(a.type||(a.type=t))}),L(),ce()}function _e(){["sword","axe","mace","dagger","staff","greatsword","battleaxe","warhammer","buckler","round-shield","tower-shield","tome","helmet","cap","crown","hood","armor","robe","vest","tunic","greaves","pants","leggings","shorts","sandals","boots","heavy-boots","speed-boots","leather-belt","utility-belt","chain-belt","war-belt","amulet","pendant","ring","bracelet"].forEach(a=>{const e=new Image;e.src=Z(`assets/gear/${a}.svg`)})}document.addEventListener("keydown",t=>{t.key==="Shift"&&(_=!0,D&&$&&Y(l,document,$,D,_))});document.addEventListener("keyup",t=>{t.key==="Shift"&&(_=!1,D&&$&&Y(l,document,$,D,_))});document.addEventListener("DOMContentLoaded",()=>{_e(),qe()});
