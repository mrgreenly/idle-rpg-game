(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const l of s)if(l.type==="childList")for(const o of l.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&i(o)}).observe(document,{childList:!0,subtree:!0});function t(s){const l={};return s.integrity&&(l.integrity=s.integrity),s.referrerPolicy&&(l.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?l.credentials="include":s.crossOrigin==="anonymous"?l.credentials="omit":l.credentials="same-origin",l}function i(s){if(s.ep)return;s.ep=!0;const l=t(s);fetch(s.href,l)}})();const w={common:{name:"Common",color:"#9CA3AF",chance:50,affixCount:0,prefix:[],suffix:[],priceMultiplier:1},uncommon:{name:"Uncommon",color:"#10B981",chance:30,affixCount:1,prefix:["Sturdy","Sharp","Keen","Fine"],suffix:["of Power","of Might","of the Warrior"],priceMultiplier:1.5},rare:{name:"Rare",color:"#3B82F6",chance:15,affixCount:2,prefix:["Masterwork","Superior","Enhanced","Reinforced"],suffix:["of the Elite","of Excellence","of the Champion","of Mastery"],priceMultiplier:2.5},epic:{name:"Epic",color:"#8B5CF6",chance:4,affixCount:3,prefix:["Legendary","Ancient","Mythical","Heroic","Blessed","Cursed"],suffix:["of the Gods","of Legends","of Heroes","of Destiny","of the Void","of Strength"],priceMultiplier:4},legendary:{name:"Legendary",color:"#F59E0B",chance:1,affixCount:5,prefix:["Divine","Celestial","Eternal","Transcendent","Omnipotent","Radiant"],suffix:["of the Immortals","of Eternity","of the Divine","of Transcendence","of Infinity","of the Cosmos"],priceMultiplier:8}},S={prefix:{Sturdy:{stats:{maxHp:15,blockChance:2,baseValue:5},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Sharp:{stats:{attack:2,critChance:3},allowedTypes:["weapon"]},Keen:{stats:{critChance:5,critDamage:8},allowedTypes:["weapon","necklace","ring"]},Fine:{stats:{attack:1,maxHp:5,attackSpeed:2},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Masterwork:{stats:{attack:4,maxHp:10,critChance:3},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},Superior:{stats:{attack:3,critDamage:10},allowedTypes:["weapon","necklace","ring"]},Enhanced:{stats:{attackSpeed:8,dodge:5,critChance:3},allowedTypes:["weapon","boots","legs","necklace","ring"]},Reinforced:{stats:{maxHp:30,blockChance:8,dodge:2},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Legendary:{stats:{attack:6,critChance:8,critDamage:15},allowedTypes:["weapon"]},Ancient:{stats:{attack:5,maxHp:20,blockChance:5,baseValue:6},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Mythical:{stats:{critDamage:20,dodge:8},allowedTypes:["weapon","necklace","ring"]},Heroic:{stats:{attack:7,attackSpeed:12,critChance:10},allowedTypes:["weapon"]},Blessed:{stats:{maxHp:25,dodge:6,blockChance:6,baseValue:25},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]},Cursed:{stats:{attack:8,critChance:12,critDamage:18,attackSpeed:10},allowedTypes:["weapon","necklace","ring"]},Divine:{stats:{attack:10,critChance:15,critDamage:25},allowedTypes:["weapon","necklace","ring"]},Celestial:{stats:{maxHp:40,blockChance:15,dodge:12,attackSpeed:15},allowedTypes:["helmet","body","legs","boots","belt","offhand"]},Eternal:{stats:{attack:8,maxHp:30,critDamage:30},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},Transcendent:{stats:{attack:12,critChance:20,dodge:15,attackSpeed:20},allowedTypes:["weapon","boots","legs","necklace","ring"]},Omnipotent:{stats:{attack:15,critChance:18,critDamage:35},allowedTypes:["weapon","necklace","ring"]},Radiant:{stats:{maxHp:50,dodge:18,attackSpeed:25,blockChance:20,baseValue:32},allowedTypes:["helmet","body","legs","boots","belt","offhand"]}},suffix:{"of Power":{stats:{attack:3},allowedTypes:["weapon","necklace","ring"]},"of Might":{stats:{attack:2,critDamage:5},allowedTypes:["weapon"]},"of the Warrior":{stats:{attack:1,maxHp:10,blockChance:3,baseValue:10},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},"of the Elite":{stats:{attack:4,critChance:5,attackSpeed:5},allowedTypes:["weapon","necklace","ring"]},"of Excellence":{stats:{critChance:8,critDamage:12},allowedTypes:["weapon","necklace","ring"]},"of the Champion":{stats:{attack:3,maxHp:15,dodge:5},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand"]},"of Mastery":{stats:{attackSpeed:10,critChance:6,dodge:6},allowedTypes:["weapon","boots","legs","necklace","ring"]},"of the Gods":{stats:{attack:8,critChance:12,critDamage:20},allowedTypes:["weapon"]},"of Legends":{stats:{maxHp:30,blockChance:12,baseValue:14},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Heroes":{stats:{attack:6,attackSpeed:15,dodge:10},allowedTypes:["weapon","boots","legs"]},"of Destiny":{stats:{critDamage:25,attackSpeed:12},allowedTypes:["weapon","necklace","ring"]},"of the Void":{stats:{attack:7,critChance:10,dodge:12},allowedTypes:["weapon","necklace","ring"]},"of Strength":{stats:{attack:9,critDamage:22,attackSpeed:8},allowedTypes:["weapon","belt","necklace","ring"]},"of the Immortals":{stats:{attack:10,maxHp:40,blockChance:15,baseValue:27},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Eternity":{stats:{critChance:20,critDamage:35,attackSpeed:25},allowedTypes:["weapon","necklace","ring"]},"of the Divine":{stats:{attack:12,maxHp:50,dodge:20},allowedTypes:["weapon","helmet","body","legs","boots","belt","offhand","necklace","ring"]},"of Transcendence":{stats:{attack:15,critChance:25,critDamage:40,attackSpeed:30},allowedTypes:["weapon","necklace","ring"]},"of Infinity":{stats:{attack:13,critChance:22,critDamage:38,dodge:16},allowedTypes:["weapon","necklace","ring"]},"of the Cosmos":{stats:{maxHp:60,attackSpeed:28,blockChance:18,baseValue:45},allowedTypes:["helmet","body","legs","boots","belt","offhand","necklace","ring"]}}},_={weapon:[{name:"Sword",attack:10,maxHp:0,attackSpeed:0,baseAttackInterval:2e3,critChance:5,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,handType:"1h",baseValue:5},{name:"Axe",attack:15,maxHp:0,attackSpeed:0,baseAttackInterval:2800,critChance:8,critDamage:15,lifeSteal:0,dodge:0,blockChance:0,handType:"1h",baseValue:5},{name:"Mace",attack:12,maxHp:0,attackSpeed:0,baseAttackInterval:2400,critChance:2,critDamage:0,lifeSteal:0,dodge:0,blockChance:5,handType:"1h",baseValue:5},{name:"Dagger",attack:6,maxHp:0,attackSpeed:0,baseAttackInterval:1600,critChance:12,critDamage:20,lifeSteal:0,dodge:8,blockChance:0,handType:"1h",baseValue:5},{name:"Staff",attack:8,maxHp:0,attackSpeed:0,baseAttackInterval:2200,critChance:10,critDamage:25,lifeSteal:0,dodge:0,blockChance:0,handType:"1h",baseValue:5},{name:"Greatsword",attack:20,maxHp:0,attackSpeed:0,baseAttackInterval:3200,critChance:3,critDamage:25,lifeSteal:0,dodge:0,blockChance:0,handType:"2h",baseValue:5},{name:"Battleaxe",attack:25,maxHp:0,attackSpeed:0,baseAttackInterval:3600,critChance:5,critDamage:30,lifeSteal:0,dodge:0,blockChance:0,handType:"2h",baseValue:5},{name:"Warhammer",attack:22,maxHp:0,attackSpeed:0,baseAttackInterval:3400,critChance:1,critDamage:0,lifeSteal:0,dodge:0,blockChance:8,handType:"2h",baseValue:5}],offhand:[{name:"Buckler",attack:0,maxHp:40,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:15,baseValue:5},{name:"Round Shield",attack:0,maxHp:60,attackSpeed:-5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:20,baseValue:5},{name:"Tower Shield",attack:0,maxHp:18,attackSpeed:-10,critChance:0,critDamage:0,lifeSteal:0,dodge:-5,blockChance:30,baseValue:5},{name:"Tome",attack:3,maxHp:0,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,baseValue:5}],helmet:[{name:"Helmet",attack:0,maxHp:5,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:3,baseValue:5},{name:"Cap",attack:0,maxHp:3,attackSpeed:2,critChance:0,critDamage:0,lifeSteal:0,dodge:2,blockChance:0,baseValue:5},{name:"Crown",attack:0,maxHp:20,attackSpeed:0,critChance:3,critDamage:5,lifeSteal:0,dodge:0,blockChance:0,baseValue:6},{name:"Hood",attack:0,maxHp:10,attackSpeed:3,critChance:2,critDamage:0,lifeSteal:0,dodge:5,blockChance:0,baseValue:5}],body:[{name:"Armor",attack:0,maxHp:60,attackSpeed:-5,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:8,baseValue:5},{name:"Robe",attack:0,maxHp:40,attackSpeed:5,critChance:5,critDamage:10,lifeSteal:2,dodge:0,blockChance:0,baseValue:5},{name:"Vest",attack:0,maxHp:50,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:3,blockChance:2,baseValue:5},{name:"Tunic",attack:0,maxHp:30,attackSpeed:8,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:0,baseValue:5}],legs:[{name:"Greaves",attack:0,maxHp:40,attackSpeed:-3,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:5,baseValue:5},{name:"Pants",attack:0,maxHp:30,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:0,dodge:3,blockChance:0,baseValue:5},{name:"Leggings",attack:0,maxHp:7,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:2,blockChance:2,baseValue:5},{name:"Shorts",attack:0,maxHp:20,attackSpeed:10,critChance:2,critDamage:0,lifeSteal:0,dodge:8,blockChance:0,baseValue:5}],boots:[{name:"Sandals",attack:0,maxHp:10,attackSpeed:8,critChance:0,critDamage:0,lifeSteal:0,dodge:8,blockChance:0,baseValue:5},{name:"Boots",attack:0,maxHp:5,attackSpeed:3,critChance:0,critDamage:0,lifeSteal:0,dodge:5,blockChance:0,baseValue:5},{name:"Heavy Boots",attack:0,maxHp:40,attackSpeed:-3,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:5,baseValue:5},{name:"Speed Boots",attack:0,maxHp:3,attackSpeed:15,critChance:2,critDamage:0,lifeSteal:0,dodge:12,blockChance:0,baseValue:5}],belt:[{name:"Leather Belt",attack:0,maxHp:1,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,baseValue:5},{name:"Utility Belt",attack:0,maxHp:0,attackSpeed:5,critChance:3,critDamage:0,lifeSteal:0,dodge:3,blockChance:0,baseValue:5},{name:"Chain Belt",attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,lifeSteal:0,dodge:0,blockChance:3,baseValue:5},{name:"War Belt",attack:0,maxHp:0,attackSpeed:0,critChance:5,critDamage:8,lifeSteal:0,dodge:0,blockChance:0,baseValue:5}],necklace:[{name:"Amulet",attack:0,maxHp:0,attackSpeed:0,critChance:8,critDamage:15,lifeSteal:0,dodge:0,blockChance:0,baseValue:5},{name:"Pendant",attack:0,maxHp:0,attackSpeed:5,critChance:0,critDamage:0,lifeSteal:5,dodge:0,blockChance:0,baseValue:5}],ring:[{name:"Ring",attack:0,maxHp:0,attackSpeed:3,critChance:5,critDamage:8,lifeSteal:0,dodge:0,blockChance:0,baseValue:5},{name:"Bracelet",attack:0,maxHp:0,attackSpeed:8,critChance:6,critDamage:0,lifeSteal:0,dodge:0,blockChance:0,baseValue:5}]},le={town:{name:"🏘️ Town",description:"A peaceful place to rest and shop",enemies:[],isShop:!0},restArea:{name:"🏕️ Rest Area",description:"A peaceful campsite where you can pause and relax. Nothing happens here.",enemies:[],isRestArea:!0},basement:{name:"🏠 The Basement",description:"A damp, dark basement infested with weak rats. Perfect for beginners.",enemies:[{name:"Sewer Rat",imageClass:"sewer-rat",hp:25,attack:2,xp:8,gold:2,attackInterval:3500},{name:"Giant Rat",imageClass:"giant-rat",hp:35,attack:3,xp:12,gold:3,attackInterval:3e3},{name:"Diseased Rat",imageClass:"diseased-rat",hp:30,attack:4,xp:10,gold:3,attackInterval:2800}],dropChance:15,allowedRarities:["common"]},forest:{name:"🌲 Dark Forest",description:"A mysterious forest filled with creatures",enemies:[{name:"Slime",imageClass:"slime",hp:50,attack:4,xp:15,gold:5,attackInterval:3e3},{name:"Goblin",imageClass:"goblin",hp:80,attack:8,xp:25,gold:10,attackInterval:2e3},{name:"Wolf",imageClass:"wolf",hp:70,attack:12,xp:20,gold:8,attackInterval:2200}],dropChance:25,allowedRarities:["common"]},cave:{name:"🕳️ Mysterious Cave",description:"Deep caves with stronger monsters",enemies:[{name:"Orc",imageClass:"orc",hp:120,attack:18,xp:35,gold:15,attackInterval:2800},{name:"Skeleton",imageClass:"skeleton",hp:100,attack:20,xp:30,gold:12,attackInterval:2300},{name:"Spider",imageClass:"spider",hp:90,attack:16,xp:28,gold:10,attackInterval:1800}],dropChance:30,allowedRarities:["common","uncommon"]},mountain:{name:"⛰️ Snowy Mountains",description:"Treacherous peaks with powerful foes",enemies:[{name:"Yeti",imageClass:"yeti",hp:200,attack:25,xp:50,gold:25,attackInterval:3500},{name:"Dragon",imageClass:"dragon",hp:300,attack:35,xp:80,gold:50,attackInterval:2200},{name:"Giant",imageClass:"giant",hp:250,attack:30,xp:65,gold:35,attackInterval:4e3}],dropChance:35,allowedRarities:["common","uncommon","rare"]},goblinCave:{name:"🏴‍☠️ Goblin Cave",description:"A dark cave infested with goblins. Defeat 15 goblins to face the Goblin King!",enemies:[{name:"Goblin Runt",imageClass:"goblin",hp:60,attack:10,xp:18,gold:7,attackInterval:2400},{name:"Goblin Shaman",imageClass:"goblin",hp:85,attack:16,xp:28,gold:12,attackInterval:2800},{name:"Goblin Slinger",imageClass:"goblin",hp:75,attack:14,xp:22,gold:9,attackInterval:2100},{name:"Goblin Brute",imageClass:"goblin",hp:110,attack:20,xp:35,gold:15,attackInterval:3200}],dropChance:40,allowedRarities:["common","uncommon","rare","epic"],boss:{name:"Goblin King",imageClass:"goblin",hp:400,attack:40,xp:150,gold:100,requiredKills:15,isLegendaryDropper:!0,attackInterval:2500},killCount:0}},ce=[{name:"Iron Sword",type:"weapon",attack:15,maxHp:0,price:100},{name:"Steel Helmet",type:"helmet",attack:0,maxHp:8,price:80},{name:"Leather Armor",type:"body",attack:0,maxHp:12,price:120},{name:"Chain Legs",type:"legs",attack:0,maxHp:10,price:100},{name:"Studded Belt",type:"belt",attack:3,maxHp:6,price:70},{name:"Leather Boots",type:"boots",attack:0,maxHp:4,price:60},{name:"Iron Shield",type:"offhand",attack:0,maxHp:10,price:90},{name:"Magic Ring",type:"ring",attack:5,maxHp:5,price:150},{name:"Steel Sword",type:"weapon",attack:25,maxHp:0,price:250},{name:"Iron Plate",type:"body",attack:0,maxHp:20,price:300},{name:"Dragon Sword",type:"weapon",attack:40,maxHp:0,price:500}],X=["Jump off a bridge","Lay facedown in a puddle","Starve yourself","Walk into a dragon's lair unarmed","Challenge a mountain troll to arm wrestling","Try to pet a wild bear","Swim with sharks while bleeding","Eat mysterious mushrooms","Sleep in a haunted cemetery","Juggle flaming torches blindfolded","Use a cursed sword as a toothpick","Tickle a sleeping giant","Dance on thin ice","Hug a cactus enthusiastically","Take a nap in quicksand","Play catch with a grenade","Use a lightning rod during a storm","Tell a vampire they have bad breath","Ask a kraken for directions","Wear meat clothing to a wolf den","Try to ride a wild griffin","Drink from the fountain of eternal poison","Challenge death to a game of chess","Use your head to test helmet durability","Go cave diving without oxygen","Practice sword swallowing with a real sword","Take a selfie with a basilisk","Use a nuclear reactor as a nightlight","Go bungee jumping with a rope that's too long","Try to milk a wild minotaur"];function j(){return X[Math.floor(Math.random()*X.length)]}function re(n){return{id:n.id,name:n.name,icon:n.icon,description:n.description,effect:n.effect,cost:n.cost,maxLevel:n.maxLevel||1,tier:n.tier,position:n.position,prerequisites:n.prerequisites||[]}}function q(n){return{name:n.name,icon:n.icon,description:n.description,nodes:n.nodes.map(e=>re(e))}}const G={exploration:q({name:"Path of Exploration",icon:"🗺️",description:"Unlock new zones and content",nodes:[{id:"exploration_1",name:"Zone Scout",icon:"🧭",description:"Unlocks additional zones earlier",effect:"Reduce zone unlock level requirements by 2",cost:50,tier:1,position:{x:2,y:0},prerequisites:[]},{id:"exploration_2a",name:"Monster Hunter",icon:"🏹",description:"Encounter rare enemies more often",effect:"Increase rare enemy spawn chance by 25%",cost:75,tier:2,position:{x:1,y:1},prerequisites:["exploration_1"]},{id:"exploration_2b",name:"Zone Master",icon:"🌍",description:"Better understanding of zones",effect:"Gain 15% more XP and gold from all zones",cost:75,maxLevel:2,tier:2,position:{x:3,y:1},prerequisites:["exploration_1"]},{id:"exploration_3a",name:"Beast Tracker",icon:"🐺",description:"Specialize in hunting beasts",effect:"Double drop chance from beast-type enemies",cost:100,tier:3,position:{x:0,y:2},prerequisites:["exploration_2a"]},{id:"exploration_3b",name:"Boss Slayer",icon:"🗡️",description:"Reduce boss requirements",effect:"Reduce boss spawn requirements by 5 kills",cost:100,tier:3,position:{x:2,y:2},prerequisites:["exploration_2a","exploration_2b"]},{id:"exploration_3c",name:"Territory Control",icon:"🏰",description:"Dominate zones completely",effect:"Killing 100 enemies in a zone grants permanent 10% bonus",cost:120,maxLevel:3,tier:3,position:{x:4,y:2},prerequisites:["exploration_2b"]},{id:"exploration_4",name:"Realm Walker",icon:"👑",description:"Master of all zones",effect:"Unlocks special endgame zones and 25% global bonus",cost:250,tier:4,position:{x:2,y:3},prerequisites:["exploration_3a","exploration_3b","exploration_3c"]}]}),power:q({name:"Path of Power",icon:"⚔️",description:"Increase combat effectiveness",nodes:[{id:"power_1",name:"Warrior Training",icon:"💪",description:"Increase base attack power",effect:"+5 base attack per level",cost:40,maxLevel:5,tier:1,position:{x:2,y:0},prerequisites:[]},{id:"power_2a",name:"Weapon Mastery",icon:"🗡️",description:"Master weapon combat",effect:"+10% weapon damage per level",cost:60,maxLevel:3,tier:2,position:{x:1,y:1},prerequisites:["power_1"]},{id:"power_2b",name:"Combat Mastery",icon:"🎯",description:"Improve critical hit chance",effect:"+2% critical chance per level",cost:60,maxLevel:3,tier:2,position:{x:3,y:1},prerequisites:["power_1"]},{id:"power_3a",name:"Berserker Rage",icon:"⚡",description:"Increase attack speed",effect:"+10% attack speed per level",cost:80,maxLevel:3,tier:3,position:{x:0,y:2},prerequisites:["power_2a"]},{id:"power_3b",name:"Precise Strikes",icon:"🔥",description:"Deadly precision",effect:"+15% critical damage per level",cost:85,maxLevel:4,tier:3,position:{x:2,y:2},prerequisites:["power_2a","power_2b"]},{id:"power_3c",name:"Battle Focus",icon:"🧠",description:"Mental fortitude in combat",effect:"+5% dodge chance and +3% block chance per level",cost:90,maxLevel:2,tier:3,position:{x:4,y:2},prerequisites:["power_2b"]},{id:"power_4",name:"Legendary Warrior",icon:"🏆",description:"Transcendent combat mastery",effect:"+50% damage, +25% crit chance, +20% attack speed",cost:300,tier:4,position:{x:2,y:3},prerequisites:["power_3a","power_3b","power_3c"]}]}),wealth:q({name:"Path of Wealth",icon:"💰",description:"Increase gold gain and rewards",nodes:[{id:"wealth_1",name:"Coin Collector",icon:"🪙",description:"Increase gold drops from enemies",effect:"+25% gold gain per level",cost:45,maxLevel:4,tier:1,position:{x:2,y:0},prerequisites:[]},{id:"wealth_2a",name:"Lucky Find",icon:"🍀",description:"Increase item drop chance",effect:"+10% item drop chance per level",cost:70,maxLevel:3,tier:2,position:{x:1,y:1},prerequisites:["wealth_1"]},{id:"wealth_2b",name:"Gold Rush",icon:"💸",description:"Bonus gold from streaks",effect:"Killing enemies without taking damage gives +5% gold per streak",cost:65,maxLevel:5,tier:2,position:{x:3,y:1},prerequisites:["wealth_1"]},{id:"wealth_3a",name:"Treasure Hunter",icon:"💎",description:"Higher chance for rare items",effect:"+15% chance for higher rarity per level",cost:90,maxLevel:2,tier:3,position:{x:0,y:2},prerequisites:["wealth_2a"]},{id:"wealth_3b",name:"Merchant Mind",icon:"🏪",description:"Better item values",effect:"Items sell for +20% more gold per level",cost:95,maxLevel:3,tier:3,position:{x:2,y:2},prerequisites:["wealth_2a","wealth_2b"]},{id:"wealth_3c",name:"Golden Streak",icon:"🌟",description:"Massive streak bonuses",effect:"Gold streak bonuses last 50% longer per level",cost:100,maxLevel:2,tier:3,position:{x:4,y:2},prerequisites:["wealth_2b"]},{id:"wealth_4",name:"Golden Touch",icon:"✨",description:"Midas-like power",effect:"Double gold gain, +50% item drops, items have 10% chance to duplicate",cost:350,tier:4,position:{x:2,y:3},prerequisites:["wealth_3a","wealth_3b","wealth_3c"]}]}),knowledge:q({name:"Path of Knowledge",icon:"📚",description:"Increase experience gain",nodes:[{id:"knowledge_1",name:"Quick Learner",icon:"📖",description:"Gain experience faster",effect:"+20% experience gain per level",cost:35,maxLevel:5,tier:1,position:{x:2,y:0},prerequisites:[]},{id:"knowledge_2a",name:"Battle Wisdom",icon:"⚔️",description:"Bonus XP from combat victories",effect:"+50% bonus XP from defeating enemies per level",cost:55,maxLevel:3,tier:2,position:{x:1,y:1},prerequisites:["knowledge_1"]},{id:"knowledge_2b",name:"Study Habits",icon:"📝",description:"Efficient learning methods",effect:"Gain bonus XP equal to 5% of current level every 60 seconds",cost:50,maxLevel:4,tier:2,position:{x:3,y:1},prerequisites:["knowledge_1"]},{id:"knowledge_3a",name:"Master Scholar",icon:"🎓",description:"Reduce XP requirements for leveling",effect:"-10% XP needed per level (max 30%)",cost:85,maxLevel:3,tier:3,position:{x:0,y:2},prerequisites:["knowledge_2a"]},{id:"knowledge_3b",name:"Experience Burst",icon:"💫",description:"Burst learning periods",effect:"Every 10th enemy gives 5x experience",cost:90,maxLevel:2,tier:3,position:{x:2,y:2},prerequisites:["knowledge_2a","knowledge_2b"]},{id:"knowledge_3c",name:"Passive Learning",icon:"🧘",description:"Learn while inactive",effect:"Gain XP over time even when not fighting",cost:80,maxLevel:3,tier:3,position:{x:4,y:2},prerequisites:["knowledge_2b"]},{id:"knowledge_4",name:"Enlightened One",icon:"🔮",description:"Transcendent learning abilities",effect:"Triple XP gain, start at level 5, reduce talent costs by 50%",cost:400,tier:4,position:{x:2,y:3},prerequisites:["knowledge_3a","knowledge_3b","knowledge_3c"]}]})};q({name:"New Pathway Name",icon:"🆕",description:"Description of what this pathway does",nodes:[{id:"pathway_1",name:"Starting Node",icon:"🌟",description:"Description of the talent",effect:"What the talent does mechanically",cost:50,maxLevel:1,tier:1,position:{x:2,y:0},prerequisites:[]}]});function Z(n){const e="/idle-rpg-game/",t=n.startsWith("/")?n.slice(1):n;return e+t}let P=!1,I=null,B=null;function de(){I=null,B=null,["weapon","helmet","body","legs","accessory1","accessory2"].forEach(t=>{const i=document.getElementById(`${t}-tooltip`);i&&(i.innerHTML="",i.style.display="none")}),document.querySelectorAll(".tooltip, .zone-tooltip, .stat-tooltip").forEach(t=>{t.style.display="none",t.innerHTML=""})}function pe(n){const e={};n.forEach(y=>{w[y]&&(e[y]=w[y])}),Object.keys(e).length===0&&(e.common=w.common);const t=Math.random()*100;let i="common",s=0;for(const[y,m]of Object.entries(e))if(s+=m.chance,t<=s){i=y;break}const l=Object.keys(_),o=l[Math.floor(Math.random()*l.length)],c=_[o],r=c[Math.floor(Math.random()*c.length)],d=w[i],p={name:r.name,type:o,rarity:i,attack:r.attack,maxHp:r.maxHp,attackSpeed:r.attackSpeed,critChance:r.critChance,critDamage:r.critDamage,dodge:r.dodge,blockChance:r.blockChance,price:Math.floor((r.baseValue||10)*(d.priceMultiplier||1)),handType:r.handType||"1h",baseAttackInterval:r.baseAttackInterval,prefixes:[],suffixes:[]},u=d.affixCount;if(u>0){const y=Math.min(3,Math.ceil(u/2)),m=Math.min(3,u-y),v=d.prefix.filter(k=>{const g=S.prefix[k];return g&&g.allowedTypes.includes(o)});for(let k=0;k<y&&v.length>0;k++){const g=Math.floor(Math.random()*v.length),x=v.splice(g,1)[0];p.prefixes.push(x);const b=S.prefix[x].stats;b&&Object.keys(b).forEach(C=>{p[C]+=b[C]})}const h=d.suffix.filter(k=>{const g=S.suffix[k];return g&&g.allowedTypes.includes(o)});for(let k=0;k<m&&h.length>0;k++){const g=Math.floor(Math.random()*h.length),x=h.splice(g,1)[0];p.suffixes.push(x);const b=S.suffix[x].stats;b&&Object.keys(b).forEach(C=>{p[C]+=b[C]})}}let f=p.name;if(p.prefixes.length>0&&(f=`${p.prefixes[Math.floor(Math.random()*p.prefixes.length)]} ${f}`),p.suffixes.length>0){const y=p.suffixes[Math.floor(Math.random()*p.suffixes.length)];f=`${f} ${y}`}return p.fullName=f,p}function me(){const n="legendary",e=Object.keys(_),t=e[Math.floor(Math.random()*e.length)],i=_[t],s=i[Math.floor(Math.random()*i.length)],l=w[n],o={name:s.name,type:t,rarity:n,attack:s.attack,maxHp:s.maxHp,attackSpeed:s.attackSpeed,critChance:s.critChance,critDamage:s.critDamage,lifeSteal:s.lifeSteal,dodge:s.dodge,blockChance:s.blockChance,timestamp:Date.now(),prefixes:[],suffixes:[]};t==="weapon"&&s.handType&&(o.handType=s.handType),t==="weapon"&&s.baseAttackInterval&&(o.baseAttackInterval=s.baseAttackInterval);const c=l.affixCount;if(c>0){const d=Math.min(2,Math.ceil(c/2)),p=Math.min(2,c-d),u=l.prefix.filter(y=>{const m=S.prefix[y];return m&&m.allowedTypes.includes(t)});for(let y=0;y<d&&u.length>0;y++){const m=Math.floor(Math.random()*u.length),v=u.splice(m,1)[0];o.prefixes.push(v);const h=S.prefix[v].stats;h&&Object.keys(h).forEach(k=>{o[k]+=h[k]})}const f=l.suffix.filter(y=>{const m=S.suffix[y];return m&&m.allowedTypes.includes(t)});for(let y=0;y<p&&f.length>0;y++){const m=Math.floor(Math.random()*f.length),v=f.splice(m,1)[0];o.suffixes.push(v);const h=S.suffix[v].stats;h&&Object.keys(h).forEach(k=>{o[k]+=h[k]})}}let r=s.name;if(o.prefixes.length>0&&(r=`${o.prefixes[Math.floor(Math.random()*o.prefixes.length)]} ${r}`),o.suffixes.length>0){const d=o.suffixes[Math.floor(Math.random()*o.suffixes.length)];r=`${r} ${d}`}return o.fullName=r,o}function ue(n,e=2e3){const t=1+n/100;return Math.max(500,e/t)}function H(n){if(w[n.rarity]||w.common,n.rarity==="common")return n.name;let e=n.name;return n.prefixes&&n.prefixes.length>0&&(e=n.prefixes.join(" ")+" "+e),n.suffixes&&n.suffixes.length>0&&(e=e+" "+n.suffixes.join(" ")),e}function L(n){const t=_[n.type]?.find(s=>s.name===n.name);if(!t){if(n.name==="Rusty Sword"||!n.prefixes&&!n.suffixes||console.warn("Base template not found for item:",n),n.prefixes||n.suffixes){const l={attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0};return n.prefixes&&n.prefixes.forEach(o=>{const c=S.prefix[o]?.stats;c&&Object.keys(c).forEach(r=>{l.hasOwnProperty(r)&&(l[r]+=c[r])})}),n.suffixes&&n.suffixes.forEach(o=>{const c=S.suffix[o]?.stats;c&&Object.keys(c).forEach(r=>{l.hasOwnProperty(r)&&(l[r]+=c[r])})}),{baseStats:{attack:(n.attack||0)-l.attack,maxHp:(n.maxHp||0)-l.maxHp,attackSpeed:(n.attackSpeed||0)-l.attackSpeed,critChance:(n.critChance||0)-l.critChance,critDamage:(n.critDamage||0)-l.critDamage,dodge:(n.dodge||0)-l.dodge,blockChance:(n.blockChance||0)-l.blockChance},affixStats:l}}return{baseStats:{attack:n.attack||0,maxHp:n.maxHp||0,attackSpeed:n.attackSpeed||0,critChance:n.critChance||0,critDamage:n.critDamage||0,dodge:n.dodge||0,blockChance:n.blockChance||0},affixStats:{attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0}}}const i={attack:0,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0};return n.prefixes&&n.prefixes.forEach(s=>{const l=S.prefix[s]?.stats;l&&Object.keys(l).forEach(o=>{i.hasOwnProperty(o)&&(i[o]+=l[o])})}),n.suffixes&&n.suffixes.forEach(s=>{const l=S.suffix[s]?.stats;l&&Object.keys(l).forEach(o=>{i.hasOwnProperty(o)&&(i[o]+=l[o])})}),{baseStats:{attack:t.attack||0,maxHp:t.maxHp||0,attackSpeed:t.attackSpeed||0,critChance:t.critChance||0,critDamage:t.critDamage||0,dodge:t.dodge||0,blockChance:t.blockChance||0},affixStats:i}}class he{constructor(){this.player={level:1,hp:100,maxHp:100,attack:10,equipmentAttack:0,equipmentMaxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0,gold:0,xp:0,nextLevelXp:100,equipment:{weapon:{name:"Rusty Sword",type:"weapon",rarity:"common",attack:5,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0,price:0,baseAttackInterval:2500},offhand:null,helmet:null,body:null,legs:null,belt:null,boots:null,necklace:null,ring:null},inventory:[]},this.currentZone="basement",this.currentEnemy=null,this.unlockedZones=["basement","town","restArea"],this.needsInventoryUpdate=!0,this.needsCharacterUpdate=!0,this.respawnTimer={isActive:!1,currentTime:0,maxTime:3e3},this.needsShopUpdate=!0,this.combat={isActive:!1,playerTurn:!0,lastAttackTime:0},this.attackBars={player:{currentTime:0,maxTime:2e3},enemy:{currentTime:0,maxTime:3e3}},this.activityLog=[],this.logFilter="all",this.passiveSystems={studyHabits:{lastTick:0,interval:6e4},passiveLearning:{lastTick:0,interval:1e3},enemyCounter:0},this.inventorySettings={sortBy:"name",filterBy:"all",autoSell:{enabled:!1,rarities:{common:!1,uncommon:!1,rare:!1},types:{weapon:!1,offhand:!1,helmet:!1,body:!1,legs:!1,belt:!1,boots:!1,necklace:!1,ring:!1}}},this.needsInventoryUpdate=!0,this.zones=le,this.shopItems=ce,this.talents={exploration:{},power:{},wealth:{},knowledge:{}},this.ascensionCount=0,this.isShowingTalentTree=!1,this.currentDeathMessage=j()}calculateStats(){let e=this.getBaseAttackWithTalents(),t=this.getBaseMaxHpWithTalents(),i=0,s=0,l=0,o=0,c=0,r=0,d=0;const p=this.getTalentLevel("power","power_1"),u=this.getTalentLevel("power","power_2a"),f=this.getTalentLevel("power","power_2b"),y=this.getTalentLevel("power","power_3a"),m=this.getTalentLevel("power","power_3b"),v=this.getTalentLevel("power","power_3c"),h=this.getTalentLevel("power","power_4");e+=p*5;let k=f*2,g=m*15,x=y*10,b=v*5,C=v*3;u>0&&(e*=1+u*.1),h>0&&(e*=1.5,k+=25,x+=20);for(const N in this.player.equipment){const T=this.player.equipment[N];T&&(i+=T.attack||0,s+=T.maxHp||0,l+=T.attackSpeed||0,o+=T.critChance||0,c+=T.critDamage||0,r+=T.dodge||0,d+=T.blockChance||0)}const F=(this.player.level-1)*10;this.player.attack=e+i,this.player.maxHp=t+F+s,this.player.equipmentAttack=i,this.player.equipmentMaxHp=s,this.player.attackSpeed=l+x,this.player.critChance=o+k,this.player.critDamage=c+g,this.player.dodge=r+b,this.player.blockChance=d+C,this.player.hp>this.player.maxHp&&(this.player.hp=this.player.maxHp)}addToInventory(e){if(e.addedTimestamp=Date.now(),this.shouldAutoSell(e)){this.sellItem(e);return}this.player.inventory.push(e),this.needsInventoryUpdate=!0}shouldAutoSell(e){if(!this.inventorySettings.autoSell.enabled)return!1;const t=e.rarity||"common",i=this.inventorySettings.autoSell.rarities[t],s=this.inventorySettings.autoSell.types[e.type];return i||s}sellItem(e,t=!0){const i=Math.floor((e.price!==void 0?e.price:10)*.5);return this.player.gold+=i,t&&this.addLogMessage(`💰 Sold ${e.fullName||e.name} for ${i} gold`,"shop"),i}sellAllJunk(){let e=0,t=0;const i=[];return this.player.inventory.forEach((s,l)=>{this.shouldAutoSell(s)&&i.push({item:s,index:l})}),i.reverse().forEach(({item:s,index:l})=>{e+=this.sellItem(s,!1),this.player.inventory.splice(l,1),this.needsInventoryUpdate=!0,t++}),t>0?this.addLogMessage(`💰 Sold ${t} items for ${e} total gold`,"shop"):this.addLogMessage("No items to sell based on current auto-sell settings","system"),{itemsSold:t,totalGold:e}}getSortedAndFilteredInventory(){let e=[...this.player.inventory];return this.inventorySettings.filterBy!=="all"&&(e=e.filter(t=>t.type===this.inventorySettings.filterBy)),e.sort((t,i)=>{switch(this.inventorySettings.sortBy){case"rarity":const s=["common","uncommon","rare","epic","legendary"],l=s.indexOf(t.rarity||"common");return s.indexOf(i.rarity||"common")-l;case"type":return t.type.localeCompare(i.type);case"attack":return(i.attack||0)-(t.attack||0);case"new":return(i.addedTimestamp||0)-(t.addedTimestamp||0);case"name":default:return(t.fullName||t.name).localeCompare(i.fullName||i.name)}}),e}equipItem(e,t=!1,i=-1){console.log("equipItem called with:",{item:e,fromInventory:t,inventoryIndex:i});const s=e.type;if(s==="weapon"&&e.handType==="2h"){if(this.player.equipment.offhand){const c={...this.player.equipment.offhand,type:"offhand"};c.addedTimestamp=Date.now(),this.player.inventory.push(c),this.player.equipment.offhand=null,this.addLogMessage(`Unequipped ${c.fullName||c.name} to wield 2-handed weapon`,"system")}}else if(s==="offhand"){const c=this.player.equipment.weapon;if(c&&c.handType==="2h"){this.addLogMessage("Cannot equip offhand item while wielding a 2-handed weapon!","system");return}}let l=null;this.player.equipment[s]&&(l={...this.player.equipment[s],type:s});const o={name:e.name,fullName:e.fullName||e.name,rarity:e.rarity,attack:e.attack||0,maxHp:e.maxHp||0,attackSpeed:e.attackSpeed||0,critChance:e.critChance||0,critDamage:e.critDamage||0,dodge:e.dodge||0,blockChance:e.blockChance||0,handType:e.handType||"1h",prefixes:e.prefixes||[],suffixes:e.suffixes||[]};console.log("Equipping to slot:",s,"new item:",o),this.player.equipment[s]=o,this.needsCharacterUpdate=!0,t&&i>=0&&(console.log("Removing from inventory at index:",i,"inventory before:",[...this.player.inventory]),this.player.inventory.splice(i,1),this.needsInventoryUpdate=!0,console.log("Inventory after removal:",[...this.player.inventory]),l&&(console.log("Adding previously equipped item to inventory:",l),l.addedTimestamp=Date.now(),this.player.inventory.push(l))),this.calculateStats(),console.log("Stats after equipping:",{attack:this.player.attack,maxHp:this.player.maxHp})}spawnEnemy(){const e=this.zones[this.currentZone];if(!e.enemies||e.enemies.length===0)return null;if(this.currentZone==="goblinCave"&&e.boss&&e.killCount>=e.boss.requiredKills){$e(e.boss.name);const s={...e.boss,hp:e.boss.hp,maxHp:e.boss.hp,attackInterval:e.boss.attackInterval||2e3,isBoss:!0,isLegendaryDropper:e.boss.isLegendaryDropper||!1};return e.killCount=0,this.addCombatMessage("🏴‍☠️ The Goblin King emerges from the depths!","system"),s}const t=e.enemies[Math.floor(Math.random()*e.enemies.length)];return{...t,hp:t.hp,maxHp:t.hp,attackInterval:t.attackInterval||2e3}}gainXp(e){const t=this.getTalentLevel("knowledge","knowledge_1"),i=this.getTalentLevel("knowledge","knowledge_2a"),s=this.getTalentLevel("knowledge","knowledge_4");let l=1+t*.2;l+=i*.5,s>0&&(l*=3);const o=Math.floor(e*l);for(this.player.xp+=o;this.player.xp>=this.player.nextLevelXp;)this.levelUp()}levelUp(){this.player.xp-=this.player.nextLevelXp,this.player.level++;const e=this.getTalentLevel("knowledge","knowledge_3a"),t=Math.min(.3,e*.1);this.player.nextLevelXp=Math.floor(this.player.nextLevelXp*1.2*(1-t)),this.player.maxHp+=10,this.player.hp=this.player.maxHp,document.getElementById("character-level").classList.add("level-up"),setTimeout(()=>{document.getElementById("character-level").classList.remove("level-up")},500),this.addLogMessage(`🎉 Level up! You are now level ${this.player.level}!`,"loot","level-up"),ae()}addLogMessage(e,t="system",i=""){const s={message:e,category:t,type:i,timestamp:new Date().toLocaleTimeString()};this.activityLog.push(s),this.activityLog.length>100&&this.activityLog.shift(),this.updateActivityLog()}addCombatMessage(e,t=""){this.addLogMessage(e,"combat",t)}updateActivityLog(){const e=document.getElementById("activity-messages");if(!e)return;e.innerHTML="",(this.logFilter==="all"?this.activityLog:this.activityLog.filter(i=>i.category===this.logFilter)).forEach(i=>{const s=document.createElement("div");s.className=`activity-message ${i.category} ${i.type}`,s.innerHTML=`<span class="timestamp">[${i.timestamp}]</span> ${i.message}`,e.appendChild(s)}),e.scrollTop=e.scrollHeight}setLogFilter(e){this.logFilter=e,this.updateActivityLog(),document.querySelectorAll(".filter-btn").forEach(t=>{t.classList.remove("active")}),document.querySelector(`[data-filter="${e}"]`).classList.add("active")}clearActivityLog(){this.activityLog=[],this.updateActivityLog()}save(){const e={player:this.player,currentZone:this.currentZone,unlockedZones:this.unlockedZones};localStorage.setItem("idleRPG_save",JSON.stringify(e)),alert("Game saved successfully!")}load(){const e=localStorage.getItem("idleRPG_save");if(e){const t=JSON.parse(e);return this.player={...this.player,...t.player},this.currentZone=t.currentZone||"basement",this.unlockedZones=t.unlockedZones||["basement"],Object.keys(this.player.equipment).forEach(i=>{const s=this.player.equipment[i];s&&!s.type&&(s.type=i)}),this.calculateStats(),this.needsCharacterUpdate=!0,alert("Game loaded successfully!"),!0}return!1}reset(){confirm("Are you sure you want to reset your game? This cannot be undone!")&&(localStorage.removeItem("idleRPG_save"),location.reload())}getPlayerAttackInterval(){const t=this.player.equipment.weapon?.baseAttackInterval||2e3;return ue(this.player.attackSpeed||0,t)}getEnemyAttackInterval(e){return e?.attackInterval||2e3}updateAttackBars(e){if(!(!this.combat.isActive||!this.currentEnemy)){if(this.attackBars.player.maxTime=this.getPlayerAttackInterval(),this.attackBars.player.currentTime+=e,this.attackBars.enemy.maxTime=this.getEnemyAttackInterval(this.currentEnemy),this.attackBars.enemy.currentTime+=e,this.attackBars.player.currentTime>=this.attackBars.player.maxTime){this.performPlayerAttack(),this.attackBars.player.currentTime=0;const t=document.getElementById("player-attack-fill");t&&(t.style.width="0%")}if(this.attackBars.enemy.currentTime>=this.attackBars.enemy.maxTime){this.performEnemyAttack(),this.attackBars.enemy.currentTime=0;const t=document.getElementById("enemy-attack-fill");t&&(t.style.width="0%")}this.updateAttackBarUI()}}updateRespawnTimer(e){this.respawnTimer.isActive&&(this.respawnTimer.currentTime+=e,this.respawnTimer.currentTime>=this.respawnTimer.maxTime&&(this.respawnTimer.isActive=!1,this.respawnTimer.currentTime=0,J()))}updatePassiveSystems(e){const t=this.getTalentLevel("knowledge","knowledge_2b");if(t>0&&e-this.passiveSystems.studyHabits.lastTick>=this.passiveSystems.studyHabits.interval){const s=Math.floor(this.player.level*.05*t);s>0&&(this.gainXp(s),this.addLogMessage(`Study Habits: Gained ${s} bonus XP from passive learning!`,"system","passive-xp")),this.passiveSystems.studyHabits.lastTick=e}const i=this.getTalentLevel("knowledge","knowledge_3c");if(i>0&&e-this.passiveSystems.passiveLearning.lastTick>=this.passiveSystems.passiveLearning.interval){const l=Math.floor(1*i);l>0&&(this.gainXp(l),(e-this.passiveSystems.passiveLearning.lastTick)%3e4<1e3&&this.addLogMessage(`Passive Learning: Gained ${l*30} XP over the last 30 seconds!`,"system","passive-xp")),this.passiveSystems.passiveLearning.lastTick=e}}updateAttackBarUI(){const e=this.attackBars.player.currentTime/this.attackBars.player.maxTime*100,t=this.attackBars.enemy.currentTime/this.attackBars.enemy.maxTime*100,i=document.getElementById("player-attack-fill"),s=document.getElementById("enemy-attack-fill");i&&(i.style.width=`${Math.min(100,e)}%`),s&&(s.style.width=`${Math.min(100,t)}%`);const l=document.getElementById("player-attack-label"),o=document.getElementById("enemy-attack-label");if(l){const c=Math.floor(this.attackBars.player.currentTime),r=Math.floor(this.attackBars.player.maxTime);l.textContent=`${c}/${r}`}if(o){const c=Math.floor(this.attackBars.enemy.currentTime),r=Math.floor(this.attackBars.enemy.maxTime);o.textContent=`${c}/${r}`}}performPlayerAttack(){if(!this.currentEnemy)return;let e=this.player.attack,t=!1;if(this.player.critChance>0&&Math.random()*100<=this.player.critChance&&(t=!0,e=Math.floor(e*(1+this.player.critDamage/100))),this.currentEnemy.hp-=e,this.currentEnemy.hp<=0){const c=document.getElementById("enemy-hp-bar");c&&(c.classList.add("instant"),c.style.width="0%",c.classList.add("respawning"),setTimeout(()=>{c.classList.remove("instant")},50))}const i=document.getElementById("enemy-hp-bar");i&&this.currentEnemy.hp>0&&U(e,i,"enemy",t);let s=`You attack ${this.currentEnemy.name} for ${e} damage`;t&&(s+=" (💥 CRITICAL HIT!)"),s+="!",this.addCombatMessage(s,t?"player-crit":"player-attack");const l=document.querySelector(".enemy-side");l&&(l.classList.add("damage-animation"),setTimeout(()=>{l.classList.remove("damage-animation")},300));const o=document.getElementById("player-image");o&&(o.classList.add("player-attacking"),setTimeout(()=>{o.classList.remove("player-attacking")},600)),this.currentEnemy.hp<=0&&this.handleEnemyDefeat()}performEnemyAttack(){if(!this.currentEnemy)return;const e=document.getElementById("enemy-image");if(e&&(console.log("Enemy attacking! Classes before:",e.className),e.classList.add("enemy-attacking"),setTimeout(()=>{console.log("Enemy attack finished! Classes after:",e.className),e.classList.remove("enemy-attacking")},600)),this.player.dodge>0&&Math.random()*100<=this.player.dodge){const r=document.getElementById("player-hp-bar");r&&U(0,r,"player",!1,!0),this.addCombatMessage(`You dodge ${this.currentEnemy.name}'s attack! 💨`,"player-dodge");return}let t=this.currentEnemy.attack,i=!1;this.player.blockChance>0&&Math.random()*100<=this.player.blockChance&&(i=!0,t=Math.floor(t*.5)),this.player.hp-=t;const s=document.getElementById("player-hp-bar");s&&U(t,s,"player",!1,!1,!1);let l=`${this.currentEnemy.name} attacks you for ${t} damage`;i&&(l+=" (🛡️ BLOCKED!)"),l+="!",this.addCombatMessage(l,i?"enemy-blocked":"enemy-attack");const o=document.querySelector(".player-side");o&&(o.classList.add("damage-animation"),setTimeout(()=>{o.classList.remove("damage-animation")},300)),this.player.hp<=0&&this.handlePlayerDeath()}handleEnemyDefeat(){this.passiveSystems.enemyCounter++;const e=this.currentEnemy.gold,t=.1+Math.random()*.9;let i=Math.floor(e*t),s=this.currentEnemy.xp;i=Math.floor(i*this.getGoldMultiplier());const o=1+this.getTalentLevel("exploration","exploration_2b")*.15;i=Math.floor(i*o);const c=this.getTalentLevel("knowledge","knowledge_3b");let r=1;c>0&&this.passiveSystems.enemyCounter%10===0&&(r=5*c,this.addLogMessage(`🌟 Experience Burst! ${r}x XP bonus on this kill!`,"loot","experience-burst")),s=Math.floor(s*this.getExperienceMultiplier()*r*o),this.player.gold+=i,this.gainXp(s),this.addLogMessage(`${this.currentEnemy.name} defeated! Gained ${i} gold and ${s} XP!`,"loot","enemy-defeated"),this.currentZone==="goblinCave"&&this.currentEnemy.name.includes("Goblin")&&!this.currentEnemy.isBoss&&(this.zones.goblinCave.killCount++,this.addCombatMessage(`Goblins defeated: ${this.zones.goblinCave.killCount}/${this.zones.goblinCave.boss.requiredKills}`,"system"));let d;const p=this.zones[this.currentZone];if(this.currentEnemy.isBoss&&this.currentEnemy.isLegendaryDropper)d=me(),this.addLogMessage(`💎 The ${this.currentEnemy.name} dropped a legendary item! ${d.fullName}!`,"loot","enemy-defeated"),Ie(this.currentEnemy.name),this.addToInventory(d);else{let u=25;const f=p.allowedRarities||["common","uncommon","rare","epic"],y=this.getItemDropMultiplier();let m=u*y;Math.random()*100<=m&&(d=pe(f),this.addLogMessage(`${this.currentEnemy.name} dropped ${d.fullName}!`,"loot","enemy-defeated"),this.addToInventory(d))}this.currentEnemy=null,this.combat.isActive=!1,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,this.respawnTimer.isActive=!0,this.respawnTimer.currentTime=0}handlePlayerDeath(){this.combat.isActive=!1,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,de(),this.currentZone==="goblinCave"&&(this.zones.goblinCave.killCount=0),this.addCombatMessage("You were defeated! Choose to ascend and gain permanent power...","player-death"),this.currentEnemy=null,this.currentDeathMessage=j(),ne(),ve()}getTalentLevel(e,t){return this.talents[e][t]||0}getBaseAttackWithTalents(){return 10+this.getTalentLevel("power","power_1")*5}getBaseMaxHpWithTalents(){return 100}getBaseAttackSpeedWithTalents(){return this.getTalentLevel("power","power_3a")*10}getBaseCritChanceWithTalents(){const e=this.getTalentLevel("power","power_2b"),t=this.getTalentLevel("power","power_4");let i=e*2;return t>0&&(i+=25),i}getBaseCritDamageWithTalents(){return 0}getBaseLifeStealWithTalents(){return 0}getBaseDodgeWithTalents(){return 0}getBaseBlockChanceWithTalents(){return 0}getExperienceMultiplier(){let e=1;const t=this.getTalentLevel("knowledge","knowledge_1"),i=this.getTalentLevel("knowledge","knowledge_2a"),s=this.getTalentLevel("knowledge","knowledge_4");return e+=t*.2,e+=i*.5,s>0&&(e*=3),e}getGoldMultiplier(){let e=1;const t=this.getTalentLevel("wealth","wealth_1"),i=this.getTalentLevel("wealth","wealth_4");return e+=t*.25,i>0&&(e*=2),e}getItemDropMultiplier(){let e=1;const t=this.getTalentLevel("wealth","wealth_2a"),i=this.getTalentLevel("wealth","wealth_4");return e+=t*.1,i>0&&(e+=.5),e}canAllocateTalent(e,t){const s=G[e].nodes.find(r=>r.id===t);if(!s)return!1;const l=this.getTalentLevel(e,t);if(l>=s.maxLevel)return!1;let o=s.cost*(l+1);if(this.getTalentLevel("knowledge","knowledge_4")>0&&(o=Math.floor(o*.5)),this.player.gold<o)return!1;for(const r of s.prerequisites)if(this.getTalentLevel(e,r)===0)return!1;return!0}allocateTalent(e,t){if(!this.canAllocateTalent(e,t))return!1;const s=G[e].nodes.find(r=>r.id===t),l=this.getTalentLevel(e,t);let o=s.cost*(l+1);return this.getTalentLevel("knowledge","knowledge_4")>0&&(o=Math.floor(o*.5)),this.player.gold-=o,this.talents[e][t]=l+1,this.addLogMessage(`Allocated ${s.name} (Level ${l+1})`,"system"),!0}getTotalTalentPoints(){let e=0;for(const t in this.talents)for(const i in this.talents[t])e+=this.talents[t][i];return e}ascend(){this.player.gold;const t=this.getTalentLevel("knowledge","knowledge_4")>0?5:1;if(this.player.level=t,this.player.hp=this.getBaseMaxHpWithTalents(),this.player.maxHp=this.getBaseMaxHpWithTalents(),this.player.attack=10,this.player.maxHp=5,this.player.equipmentAttack=0,this.player.equipmentMaxHp=0,this.player.attackSpeed=0,this.player.critChance=0,this.player.critDamage=0,this.player.dodge=0,this.player.blockChance=0,this.player.xp=0,this.player.nextLevelXp=100,t>1){for(let i=1;i<t;i++)this.player.maxHp+=10,this.player.nextLevelXp=Math.floor(this.player.nextLevelXp*1.2);this.player.hp=this.player.maxHp,this.addLogMessage(`🌟 Enlightened One: Starting at level ${t}!`,"system","enlightened-start")}this.player.inventory=[],this.player.equipment={weapon:{name:"Rusty Sword",type:"weapon",rarity:"common",attack:5,maxHp:0,attackSpeed:0,critChance:0,critDamage:0,dodge:0,blockChance:0,price:0,baseAttackInterval:2500},offhand:null,helmet:null,body:null,legs:null,belt:null,boots:null,necklace:null,ring:null},this.unlockedZones=["basement","restArea"],this.currentZone="basement",this.currentEnemy=null,this.combat.isActive=!1,this.attackBars.player.currentTime=0,this.attackBars.enemy.currentTime=0,this.applyTalentBonuses(),this.ascensionCount++,this.addLogMessage(`Ascension ${this.ascensionCount} complete! Your journey begins anew with ${this.getTotalTalentPoints()} talent points.`,"system"),this.needsCharacterUpdate=!0,this.needsInventoryUpdate=!0,this.needsShopUpdate=!0}applyTalentBonuses(){this.getTalentLevel("knowledge","knowledge_4")>0&&(this.player.level=5,this.player.xp=0,this.player.nextLevelXp=this.calculateXpForLevel(6));const t=this.getTalentLevel("power","power_1");this.player.attack+=t*5,this.getTalentLevel("exploration","exploration_1"),this.calculateStats()}calculateXpForLevel(e){return Math.floor(100*Math.pow(1.1,e-1))}}const a=new he;function U(n,e,t="enemy",i=!1,s=!1,l=!1){const o=document.createElement("div");if(o.className="floating-damage",s?(o.textContent="MISS",o.classList.add("miss")):l?(o.textContent=`+${n}`,o.classList.add("heal")):(o.textContent=`-${n}`,o.classList.add(t),i&&(o.classList.add("critical"),o.textContent=`CRIT! -${n}`)),!e)return;const c=e.getBoundingClientRect();o.style.position="fixed",o.style.left=`${c.left+c.width/2+Math.random()*40-20}px`,o.style.top=`${c.top+c.height/2}px`,o.style.transform="translate(-50%, -50%)",document.body.appendChild(o),setTimeout(()=>{o.parentNode&&o.parentNode.removeChild(o)},1500)}function E(){const n=document.getElementById("inventory-gold");n&&(n.textContent=a.player.gold,n.style.fontSize="0.7rem");const e=document.getElementById("shop-gold");e&&(e.textContent=a.player.gold);const t=a.getPlayerAttackInterval();document.getElementById("player-attack-interval").textContent=`${(t/1e3).toFixed(1)}s`;const i=document.getElementById("player-attack");i&&(i.textContent=a.player.attack),ge(),document.getElementById("character-level").textContent=a.player.level,document.getElementById("character-xp-text").textContent=`${a.player.xp} / ${a.player.nextLevelXp}`;const s=a.player.xp/a.player.nextLevelXp*100;document.getElementById("character-xp-fill").style.width=`${s}%`;const l=a.player.hp/a.player.maxHp*100;if(document.getElementById("player-hp-bar").style.width=`${l}%`,document.getElementById("player-hp-text").textContent=`${a.player.hp}/${a.player.maxHp}`,Be(),a.currentEnemy){document.getElementById("enemy-title").textContent=a.currentEnemy.name,document.getElementById("enemy-attack").textContent=a.currentEnemy.attack;const o=document.getElementById("enemy-image");o&&(o.classList.remove("slime","goblin","orc","skeleton","dragon"),o.classList.add("enemy-image",a.currentEnemy.imageClass),o.style.display="block",o.style.visibility="visible");const c=a.getEnemyAttackInterval(a.currentEnemy);document.getElementById("enemy-attack-interval").textContent=`${(c/1e3).toFixed(1)}s`;const r=a.currentEnemy.hp/a.currentEnemy.maxHp*100,d=document.getElementById("enemy-hp-bar");d&&(d.style.width=`${r}%`,d.classList.remove("respawning")),document.getElementById("enemy-hp-text").textContent=`${a.currentEnemy.hp}/${a.currentEnemy.maxHp}`}else if(a.respawnTimer.isActive){const o=Math.ceil((a.respawnTimer.maxTime-a.respawnTimer.currentTime)/1e3),c=a.respawnTimer.currentTime/a.respawnTimer.maxTime*100;document.getElementById("enemy-title").textContent=`Respawning in ${o}s...`,document.getElementById("enemy-attack").textContent="-",document.getElementById("enemy-attack-interval").textContent="-";const r=document.getElementById("enemy-hp-bar");r&&(r.style.width=`${c}%`,r.classList.add("respawning")),document.getElementById("enemy-hp-text").textContent="";const d=document.getElementById("enemy-image");d&&(d.style.visibility="hidden")}else{document.getElementById("enemy-title").textContent="No Enemy",document.getElementById("enemy-attack").textContent="-",document.getElementById("enemy-attack-interval").textContent="-";const o=document.getElementById("enemy-hp-bar");o&&(o.style.width="0%",o.classList.remove("respawning"));const c=document.getElementById("enemy-hp-text");c&&(c.textContent="");const r=document.getElementById("enemy-image");r&&(r.style.visibility="hidden")}if(a.needsCharacterUpdate){for(const o in a.player.equipment){const c=a.player.equipment[o],r=document.getElementById(`${o}-item`),d=document.getElementById(`${o}-tooltip`);if(r){const p=o.charAt(0).toUpperCase()+o.slice(1);if(c){const f=W(c);r.innerHTML=`
            <div class="character-slot-name">${p}</div>
            <div class="character-slot-icon">${f}</div>
            <div class="equipped-item-name">${c.name}</div>
          `}else{const f=W(o);r.innerHTML=`
            <div class="character-slot-name">${p}</div>
            <div class="character-slot-icon empty">${f}</div>
            <div class="empty-slot">Empty</div>
          `}const u=r.closest(".character-slot");c?(u.classList.add("has-item"),d&&(fe(d,c),d.style.display="block")):(u.classList.remove("has-item"),r.style.color="",d&&(d.innerHTML="",d.style.display="none"))}}a.needsCharacterUpdate=!1}a.needsInventoryUpdate&&(O(),a.needsInventoryUpdate=!1),a.currentZone==="town"&&a.needsShopUpdate&&(ye(),a.needsShopUpdate=!1)}function ge(){document.getElementById("stats-total-attack").textContent=a.player.attack,document.getElementById("stats-max-hp").textContent=a.player.maxHp;const n=a.getPlayerAttackInterval();document.getElementById("stats-actual-attack-speed").textContent=`${(n/1e3).toFixed(1)}s`,document.getElementById("stats-crit-chance").textContent=`${a.player.critChance||0}%`,document.getElementById("stats-crit-damage").textContent=`${a.player.critDamage||0}%`,document.getElementById("stats-dodge").textContent=`${a.player.dodge||0}%`,document.getElementById("stats-block-chance").textContent=`${a.player.blockChance||0}%`,document.getElementById("stats-xp-multiplier").textContent=`${a.getExperienceMultiplier().toFixed(2)}x`,document.getElementById("stats-gold-multiplier").textContent=`${a.getGoldMultiplier().toFixed(2)}x`,document.getElementById("stats-item-drop-chance").textContent=`${(25*a.getItemDropMultiplier()).toFixed(0)}%`;const e=document.getElementById("stats-total-attack"),t=document.getElementById("stats-max-hp");e&&(e.className="stat-value",a.player.equipmentAttack>0&&e.classList.add("positive")),t&&(t.className="stat-value",a.player.equipmentMaxHp>0&&t.classList.add("positive")),["crit-chance","crit-damage","dodge","block-chance"].forEach(r=>{const d=document.getElementById(`stats-${r}`);if(d){const p=parseInt(d.textContent);d.className="stat-value",p>0&&d.classList.add("positive")}});const s=document.getElementById("stats-xp-multiplier"),l=document.getElementById("stats-gold-multiplier"),o=document.getElementById("stats-item-drop-chance");s&&(s.className="stat-value",a.getExperienceMultiplier()>1&&s.classList.add("positive")),l&&(l.className="stat-value",a.getGoldMultiplier()>1&&l.classList.add("positive")),o&&(o.className="stat-value",a.getItemDropMultiplier()>1&&o.classList.add("positive"));const c=document.getElementById("stats-actual-attack-speed");c&&(c.className="stat-value",a.player.attackSpeed>0&&c.classList.add("positive"))}function fe(n,e){const t=w[e.rarity]||w.common,i=t.color;if(!e.type){for(const[p,u]of Object.entries(a.player.equipment))if(u===e){e.type=p;break}}if(!e.type){const p=[];e.attack&&p.push(`<div class="tooltip-stat-line"><span>Attack:</span><span>${e.attack}</span></div>`),e.maxHp&&p.push(`<div class="tooltip-stat-line"><span>Max HP:</span><span>${e.maxHp}</span></div>`),e.baseAttackInterval&&p.push(`<div class="tooltip-stat-line"><span>Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),e.attackSpeed&&p.push(`<div class="tooltip-stat-line"><span>Attack Speed:</span><span>${e.attackSpeed}%</span></div>`),e.critChance&&p.push(`<div class="tooltip-stat-line"><span>Critical Chance:</span><span>${e.critChance}%</span></div>`),e.critDamage&&p.push(`<div class="tooltip-stat-line"><span>Critical Damage:</span><span>${e.critDamage}%</span></div>`),e.dodge&&p.push(`<div class="tooltip-stat-line"><span>Dodge:</span><span>${e.dodge}%</span></div>`),e.blockChance&&p.push(`<div class="tooltip-stat-line"><span>Block Chance:</span><span>${e.blockChance}%</span></div>`),n.innerHTML=`
      <div class="tooltip-name" style="color: ${i};">
        ${H(e)}
      </div>
      <div class="tooltip-stats">
        ${p.join("")}
      </div>
      <div class="tooltip-rarity" style="color: ${i};">
        ${t.name}
      </div>
    `;return}const{baseStats:s,affixStats:l}=L(e);if(!s||!l){console.error("Error separating item stats:",e);const p=[];e.attack&&p.push(`<div class="tooltip-stat-line stat-base"><span>Attack:</span><span>${e.attack}</span></div>`),e.maxHp&&p.push(`<div class="tooltip-stat-line stat-base"><span>Max HP:</span><span>${e.maxHp}</span></div>`),e.baseAttackInterval&&p.push(`<div class="tooltip-stat-line stat-base"><span>Base Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),e.attackSpeed&&p.push(`<div class="tooltip-stat-line stat-base"><span>Attack Speed:</span><span>${e.attackSpeed}%</span></div>`),e.critChance&&p.push(`<div class="tooltip-stat-line stat-base"><span>Critical Chance:</span><span>${e.critChance}%</span></div>`),e.critDamage&&p.push(`<div class="tooltip-stat-line stat-base"><span>Critical Damage:</span><span>${e.critDamage}%</span></div>`),e.dodge&&p.push(`<div class="tooltip-stat-line stat-base"><span>Dodge:</span><span>${e.dodge}%</span></div>`),e.blockChance&&p.push(`<div class="tooltip-stat-line stat-base"><span>Block Chance:</span><span>${e.blockChance}%</span></div>`),n.innerHTML=`
      <div class="tooltip-name" style="color: ${i};">
        ${H(e)}
      </div>
      <div class="tooltip-stats">
        ${p.join("")}
      </div>
      <div class="tooltip-rarity" style="color: ${i};">
        ${t.name}
      </div>
    `;return}const o=[],c=[];(e.type==="weapon"||s.attack>0)&&o.push(`<div class="tooltip-stat-line stat-base"><span>Attack:</span><span>${s.attack}</span></div>`),e.type==="weapon"&&e.baseAttackInterval&&o.push(`<div class="tooltip-stat-line stat-base"><span>Base Attack Speed:</span><span>${(e.baseAttackInterval/1e3).toFixed(1)}s</span></div>`),(["helmet","body","legs","boots","offhand"].includes(e.type)||s.maxHp>0)&&o.push(`<div class="tooltip-stat-line stat-base"><span>Max HP:</span><span>${s.maxHp}</span></div>`);const r=[{key:"attackSpeed",label:"Attack Speed",unit:"%"},{key:"critChance",label:"Critical Chance",unit:"%"},{key:"critDamage",label:"Critical Damage",unit:"%"},{key:"lifeSteal",label:"Life Steal",unit:"%"},{key:"dodge",label:"Dodge",unit:"%"},{key:"blockChance",label:"Block Chance",unit:"%"}];r.forEach(({key:p,label:u,unit:f})=>{s[p]>0&&o.push(`<div class="tooltip-stat-line stat-base"><span>${u}:</span><span>${s[p]}${f}</span></div>`)}),l.attack>0&&c.push(`<div class="tooltip-stat-line stat-neutral"><span>Attack:</span><span>${l.attack}</span></div>`),l.maxHp>0&&c.push(`<div class="tooltip-stat-line stat-neutral"><span>Max HP:</span><span>${l.maxHp}</span></div>`),r.forEach(({key:p,label:u,unit:f})=>{l[p]>0&&c.push(`<div class="tooltip-stat-line stat-neutral"><span>${u}:</span><span>${l[p]}${f}</span></div>`)});let d=o.join("");o.length>0&&c.length>0&&(d+='<div class="tooltip-separator"></div>'),d+=c.join(""),n.innerHTML=`
    <div class="tooltip-name" style="color: ${i};">
      ${H(e)}
    </div>
    <div class="tooltip-stats">
      ${d}
    </div>
    <div class="tooltip-rarity" style="color: ${i};">
      ${t.name}
    </div>
  `}function K(n){const e=a.player.equipment[n.type];if(!e)return!0;const t={attack:n.attack||0,maxHp:n.maxHp||0,attackSpeed:n.attackSpeed||0,critChance:n.critChance||0,critDamage:n.critDamage||0,lifeSteal:n.lifeSteal||0,dodge:n.dodge||0,blockChance:n.blockChance||0},i={attack:e.attack||0,maxHp:e.maxHp||0,attackSpeed:e.attackSpeed||0,critChance:e.critChance||0,critDamage:e.critDamage||0,lifeSteal:e.lifeSteal||0,dodge:e.dodge||0,blockChance:e.blockChance||0};let s=0,l=0;for(const o in t)(t[o]>0||i[o]>0)&&(l++,t[o]>i[o]&&s++);return l>0&&s/l>.5}function W(n){if(typeof n=="string"){const o={weapon:"sword",offhand:"buckler",helmet:"helmet",body:"armor",legs:"pants",belt:"leather-belt",boots:"boots",necklace:"amulet",ring:"ring"}[n]||"sword";return`<img src="${Z(`assets/gear/${o}.svg`)}" alt="${n}" class="gear-icon" />`}let t=n.name.toLowerCase().replace(/\s+/g,"-");const i={sword:"sword",axe:"axe",mace:"mace",dagger:"dagger",staff:"staff",greatsword:"greatsword",battleaxe:"battleaxe",warhammer:"warhammer",buckler:"buckler","round-shield":"round-shield","tower-shield":"tower-shield",tome:"tome",helmet:"helmet",cap:"cap",crown:"crown",hood:"hood",armor:"armor",robe:"robe",vest:"vest",tunic:"tunic",greaves:"greaves",pants:"pants",leggings:"leggings",shorts:"shorts",sandals:"sandals",boots:"boots","heavy-boots":"heavy-boots","speed-boots":"speed-boots","leather-belt":"leather-belt","utility-belt":"utility-belt","chain-belt":"chain-belt","war-belt":"war-belt",amulet:"amulet",pendant:"pendant",ring:"ring",bracelet:"bracelet"};i[t]&&(t=i[t]);const s=n.rarity||"common";return`<img src="${Z(`assets/gear/${t}.svg`)}" alt="${n.name}" class="gear-icon rarity-${s}" loading="eager" onerror="this.style.display='none';" />`}function O(){const n=document.getElementById("inventory-items");if(!n){console.error("Inventory div not found!");return}z(),n.innerHTML="";const e=a.getSortedAndFilteredInventory();if(e.length===0){const t=document.createElement("div");t.className="inventory-empty",t.textContent=a.inventorySettings.filterBy==="all"?"No items in inventory":`No ${a.inventorySettings.filterBy} items in inventory`,t.style.color="var(--light-color)",t.style.fontStyle="italic",t.style.textAlign="center",t.style.padding="20px",n.appendChild(t);return}e.forEach(t=>{const i=a.player.inventory.findIndex(o=>o===t||o.fullName===t.fullName&&o.type===t.type),s=document.createElement("div");s.className="inventory-item",s.setAttribute("data-item-index",i),K(t)&&s.classList.add("stat-improvement");const l=t.rarity&&w[t.rarity]?w[t.rarity].color:"#9CA3AF";Math.floor((t.price!==void 0?t.price:10)*.5),s.innerHTML=`
      <div class="item-icon">${W(t)}</div>
      <div class="item-name" style="color: ${l}; font-weight: bold;">
        ${H(t)}
      </div>
    `,s.addEventListener("mouseenter",o=>{I=t,B=o,V(o,t,P)}),s.addEventListener("mouseleave",o=>{I=null,B=null,z()}),s.addEventListener("mousemove",o=>{B=o,oe(o)}),s.addEventListener("click",o=>{if(o.preventDefault(),o.stopPropagation(),o.button===0){z();const c=parseInt(s.getAttribute("data-item-index")),r=a.player.inventory[c];if(r&&c>=0&&c<a.player.inventory.length){const d={...r};a.equipItem(d,!0,c),a.addLogMessage(`✨ Equipped ${d.fullName||d.name}!`,"system"),s.classList.add("equipping"),setTimeout(()=>{E()},300)}}}),s.addEventListener("contextmenu",o=>{o.preventDefault(),o.stopPropagation(),z();const c=parseInt(s.getAttribute("data-item-index")),r=a.player.inventory[c];r&&c>=0&&c<a.player.inventory.length&&(a.sellItem(r),a.player.inventory.splice(c,1),a.needsInventoryUpdate=!0,s.classList.add("selling"),setTimeout(()=>{E()},300))}),n.appendChild(s)})}function ye(){if(a.currentZone!=="town")return;const n=document.getElementById("shop-items"),e=document.getElementById("shop-gold");e&&(e.textContent=a.player.gold),n.innerHTML="",a.shopItems.forEach((t,i)=>{const s=document.createElement("div");s.className="shop-item",K(t)&&s.classList.add("stat-improvement");const l=a.player.gold>=t.price,o=[];t.attack>0&&o.push(`ATK: ${t.attack}`),t.maxHp>0&&o.push(`HP: ${t.maxHp}`);const c=o.join(" | ");s.innerHTML=`
      <div class="item-name">${t.name}</div>
      <div class="item-stats">
        ${c}
      </div>
      <div class="item-type">${t.type.charAt(0).toUpperCase()+t.type.slice(1)}</div>
      <div class="item-price ${l?"affordable":"expensive"}">${t.price}g</div>
    `,l?s.addEventListener("click",()=>{a.player.gold-=t.price;const r={...t};a.addToInventory(r),a.addLogMessage(`💰 Purchased ${t.name} for ${t.price} gold`,"shop"),a.needsShopUpdate=!0,s.classList.add("purchasing"),setTimeout(()=>{E()},300)}):(s.style.opacity="0.6",s.style.cursor="not-allowed",s.title=`Need ${t.price-a.player.gold} more gold`),n.appendChild(s)})}function J(){if(!(a.currentZone==="town"||a.currentZone==="restArea")&&!a.currentEnemy){if(a.currentEnemy=a.spawnEnemy(),!a.currentEnemy)return;a.addCombatMessage(`A wild ${a.currentEnemy.name} appears!`),a.combat.isActive=!0,a.combat.lastAttackTime=Date.now(),a.attackBars.player.currentTime=0,a.attackBars.enemy.currentTime=0,a.attackBars.player.maxTime=a.getPlayerAttackInterval(),a.attackBars.enemy.maxTime=a.getEnemyAttackInterval(a.currentEnemy),E()}}function ve(){const n=document.getElementById("death-modal");n.style.display="flex",a.combat.isActive=!1}function ke(){const n=document.getElementById("death-modal");n.style.display="none",be()}function be(){const n=document.getElementById("talent-tree-modal");n.style.display="flex",a.isShowingTalentTree=!0,Q(),ee()}function xe(){const n=document.getElementById("talent-tree-modal");n.style.display="none",a.isShowingTalentTree=!1,a.ascend(),M("basement"),E()}function Q(){setTimeout(()=>{Object.keys(G).forEach(n=>{const e=G[n],t=document.getElementById(`pathway-${n}`);if(!t)return;let i=t.querySelector(".talent-nodes-container"),s=t.querySelector(".talent-connections");if(i||(i=document.getElementById(`${n}-nodes`)),s||(s=document.getElementById(`${n}-connections`)),!i||!s)return;i.innerHTML="",s.innerHTML="";const l=i.clientWidth||180,o=i.clientHeight||350,c=60,r=Math.max(...e.nodes.map(u=>u.position.x)),d=Math.max(...e.nodes.map(u=>u.position.y));if(r===0||d===0)return;const p={};e.nodes.forEach(u=>{const f=a.getTalentLevel(n,u.id),y=a.canAllocateTalent(n,u.id);let m=u.cost*(f+1);a.getTalentLevel("knowledge","knowledge_4")>0&&(m=Math.floor(m*.5));const h=u.position.x/r*(l-c)+c/2,k=u.position.y/d*(o-c)+c/2;p[u.id]={x:h,y:k};const g=document.createElement("div");g.className=`talent-node tier-${u.tier} ${f>0?"allocated":""} ${y?"available":"locked"}`,g.dataset.pathway=n,g.dataset.talent=u.id,g.style.left=`${h}px`,g.style.top=`${k}px`,g.innerHTML=`
          ${f>0?`<div class="purchase-counter">${f}</div>`:""}
          <div class="talent-icon">${u.icon}</div>
        `,g.addEventListener("mouseenter",x=>{Ce(x,u,f,m)}),g.addEventListener("mouseleave",()=>{Se()}),g.addEventListener("mousemove",x=>{te(x)}),g.addEventListener("click",()=>{a.canAllocateTalent(n,u.id)&&(a.allocateTalent(n,u.id),ee())}),i.appendChild(g)}),e.nodes.forEach(u=>{u.prerequisites&&u.prerequisites.length>0&&u.prerequisites.forEach(f=>{e.nodes.find(m=>m.id===f)&&p[u.id]&&p[f]&&we(s,p[f],p[u.id],a.getTalentLevel(n,f)>0,a.canAllocateTalent(n,u.id))})})})},100)}function we(n,e,t,i,s){const l=document.createElementNS("http://www.w3.org/2000/svg","line");l.setAttribute("x1",e.x),l.setAttribute("y1",e.y),l.setAttribute("x2",t.x),l.setAttribute("y2",t.y);let o="talent-connection-line";i&&(o+=" active"),s&&(o+=" available"),l.setAttribute("class",o),n.appendChild(l)}function ee(){const n=document.getElementById("talent-gold");n&&(n.textContent=a.player.gold);const e=document.getElementById("talent-points");e&&(e.textContent=a.getTotalTalentPoints());const t=document.getElementById("ascension-count");t&&(t.textContent=a.ascensionCount),Q()}function Ce(n,e,t,i){const s=document.getElementById("talent-tooltip"),l=document.getElementById("talent-tooltip-name"),o=document.getElementById("talent-tooltip-level"),c=document.getElementById("talent-tooltip-description"),r=document.getElementById("talent-tooltip-effect"),d=document.getElementById("talent-tooltip-cost");s&&l&&o&&c&&r&&d&&(l.textContent=e.name,o.textContent=`${t}/${e.maxLevel}`,c.textContent=e.description,r.textContent=e.effect,t>=e.maxLevel?d.textContent="Max Level":d.textContent=`Cost: ${i} gold`,s.style.display="block",s.classList.add("visible"),te(n))}function Se(){const n=document.getElementById("talent-tooltip");n&&(n.classList.remove("visible"),setTimeout(()=>{n.classList.contains("visible")||(n.style.display="none")},200))}function te(n){const e=document.getElementById("talent-tooltip");if(e&&e.style.display==="block"){const t=n.clientX+10,i=n.clientY+10,s=e.getBoundingClientRect(),l=window.innerWidth,o=window.innerHeight;let c=t,r=i;t+s.width>l&&(c=n.clientX-s.width-10),i+s.height>o&&(r=n.clientY-s.height-10),e.style.left=c+"px",e.style.top=r+"px"}}function A(n,e,t,i,s=null){const l=document.getElementById("zone-tooltip"),o=document.getElementById("zone-tooltip-icon"),c=document.getElementById("zone-tooltip-title"),r=document.getElementById("zone-tooltip-description"),d=document.getElementById("zone-tooltip-content");if(!l||!o||!c||!r||!d)return;const p={forest:"🌲",town:"🏘️",cave:"🕳️",goblinCave:"👹",mountain:"🏔️"};o.textContent=p[e]||"🗺️",c.textContent=t.name,r.textContent=t.description;let u="";if(e==="town"?u+=`
      <div class="zone-tooltip-enemies">
        <div class="zone-tooltip-enemies-title">🏪 Features:</div>
        <div class="zone-tooltip-enemy-list">
          • Purchase equipment<br>
          • Heal over time<br>
          • Safe from combat
        </div>
      </div>
    `:t.enemies&&t.enemies.length>0&&(u+=`
      <div class="zone-tooltip-enemies">
        <div class="zone-tooltip-enemies-title">⚔️ Enemies:</div>
        <div class="zone-tooltip-enemy-list">
          ${t.enemies.map(f=>`• ${f.name} (HP: ${f.hp}, ATK: ${f.attack})`).join("<br>")}
        </div>
      </div>
    `),e==="goblinCave"&&t.boss&&(u+=`
      <div class="zone-tooltip-boss">
        <div class="zone-tooltip-boss-title">👑 Boss: ${t.boss.name}</div>
        <div class="zone-tooltip-boss-info">HP: ${t.boss.hp}, ATK: ${t.boss.attack}<br>Requires ${t.boss.requiredKills} goblin kills<br>Drops legendary items!</div>
      </div>
    `),!i)if(s){const f=a.player.level;u+=`
        <div class="zone-tooltip-unlock">
          <div class="zone-tooltip-unlock-title">🔒 Zone Locked</div>
          <div class="zone-tooltip-unlock-req">Required Level: ${s.level}</div>
          <div class="zone-tooltip-unlock-current">Current Level: ${f}</div>
        </div>
      `}else u+=`
        <div class="zone-tooltip-unlock">
          <div class="zone-tooltip-unlock-title">🔒 Zone Locked</div>
          <div class="zone-tooltip-unlock-req">Complete more areas to unlock</div>
        </div>
      `;d.innerHTML=u,l.style.display="block",l.classList.add("visible"),$(n)}function D(){const n=document.getElementById("zone-tooltip");n&&(n.classList.remove("visible"),setTimeout(()=>{n.classList.contains("visible")||(n.style.display="none")},200))}function $(n){const e=document.getElementById("zone-tooltip");if(e&&e.style.display==="block"){const t=n.clientX+15,i=n.clientY+15,s=e.getBoundingClientRect(),l=window.innerWidth,o=window.innerHeight;let c=t,r=i;t+s.width>l&&(c=n.clientX-s.width-15),i+s.height>o&&(r=n.clientY-s.height-15),e.style.left=c+"px",e.style.top=r+"px"}}function M(n){a.currentZone==="goblinCave"&&n!=="goblinCave"&&(a.zones.goblinCave.killCount=0),a.currentZone=n,a.currentEnemy=null,a.combat.isActive=!1,document.querySelectorAll(".zone-btn").forEach(i=>{i.classList.remove("active")}),document.querySelector(`[data-zone="${n}"]`).classList.add("active");const e=document.querySelector(".combat-area"),t=document.getElementById("shop-area");if(n==="town"){e.style.display="none",t.style.display="flex",a.addLogMessage("Welcome to the peaceful town. Rest and shop here.","system"),a.needsShopUpdate=!0;const i=setInterval(()=>{a.currentZone==="town"&&a.player.hp<a.player.maxHp?(a.player.hp=Math.min(a.player.maxHp,a.player.hp+2),E()):clearInterval(i)},1e3)}else n==="restArea"?(e.style.display="grid",t.style.display="none",a.addLogMessage(`${a.zones[n].name} - ${a.zones[n].description}`,"system")):(e.style.display="grid",t.style.display="none",a.addLogMessage(`Entered ${a.zones[n].name}. ${a.zones[n].description}`,"system"),setTimeout(()=>J(),500));E()}function Ee(){const n=document.getElementById("zone-buttons"),e={forest:{level:2,message:"The Dark Forest path has opened!"},cave:{level:5,message:"The Mysterious Cave is now accessible!"},goblinCave:{level:8,message:"You discovered the Goblin Cave!"},mountain:{level:12,message:"The Snowy Mountains path has opened!"},town:{level:3,message:"You can now visit the Town to trade and rest!"}};for(const[t,i]of Object.entries(a.zones)){const s=document.createElement("button"),l=a.unlockedZones.includes(t);s.className=`zone-btn ${t==="town"?"town":""} ${l?"":"locked"}`,s.textContent=i.name,s.setAttribute("data-zone",t),l?s.addEventListener("click",()=>M(t)):s.addEventListener("click",()=>{const o=e[t];o?a.addLogMessage(`This zone is locked. Reach level ${o.level} to unlock it!`,"system"):a.addLogMessage("This zone is locked. Complete more areas to unlock it!","system")}),l?i.enemies&&i.enemies.length>0?(s.addEventListener("mouseenter",o=>{A(o,t,i,!0)}),s.addEventListener("mouseleave",()=>{D()}),s.addEventListener("mousemove",o=>{$(o)})):(s.addEventListener("mouseenter",o=>{A(o,t,i,!0)}),s.addEventListener("mouseleave",()=>{D()}),s.addEventListener("mousemove",o=>{$(o)})):(s.addEventListener("mouseenter",o=>{A(o,t,i,!1,e[t])}),s.addEventListener("mouseleave",()=>{D()}),s.addEventListener("mousemove",o=>{$(o)})),n.appendChild(s)}}function Le(){const n={forest:{level:2,message:"The Dark Forest path has opened!"},cave:{level:5,message:"The Mysterious Cave is now accessible!"},goblinCave:{level:8,message:"You discovered the Goblin Cave!"},mountain:{level:12,message:"The Snowy Mountains path has opened!"},town:{level:3,message:"You can now visit the Town to trade and rest!"}};document.querySelectorAll(".zone-btn").forEach(t=>{const i=t.getAttribute("data-zone"),s=a.zones[i],l=a.unlockedZones.includes(i),o=t.cloneNode(!0);t.parentNode.replaceChild(o,t),l?o.addEventListener("click",()=>M(i)):o.addEventListener("click",()=>{const c=n[i];c?a.addLogMessage(`This zone is locked. Reach level ${c.level} to unlock it!`,"system"):a.addLogMessage("This zone is locked. Complete more areas to unlock it!","system")}),l?(o.addEventListener("mouseenter",c=>{A(c,i,s,!0)}),o.addEventListener("mouseleave",()=>{D()}),o.addEventListener("mousemove",c=>{$(c)})):(o.addEventListener("mouseenter",c=>{A(c,i,s,!1,n[i])}),o.addEventListener("mouseleave",()=>{D()}),o.addEventListener("mousemove",c=>{$(c)}))})}function ae(){const n=a.player.level;let e=!1;const t={forest:{level:2,message:"The Dark Forest path has opened!"},cave:{level:5,message:"The Mysterious Cave is now accessible!"},goblinCave:{level:8,message:"You discovered the Goblin Cave!"},mountain:{level:12,message:"The Snowy Mountains path has opened!"},town:{level:3,message:"You can now visit the Town to trade and rest!"}};for(const[i,s]of Object.entries(t))!a.unlockedZones.includes(i)&&n>=s.level&&(a.unlockedZones.push(i),a.addLogMessage(s.message,"system"),e=!0);Le(),e&&Te()}function Te(){document.querySelectorAll(".zone-btn").forEach(e=>{const t=e.getAttribute("data-zone");if(a.unlockedZones.includes(t)&&e.classList.contains("locked")){e.classList.remove("locked");const s=e.cloneNode(!0);s.addEventListener("click",()=>M(t));const l=a.zones[t];s.addEventListener("mouseenter",o=>{A(o,t,l,!0)}),s.addEventListener("mouseleave",()=>{D()}),s.addEventListener("mousemove",o=>{$(o)}),e.parentNode.replaceChild(s,e)}})}function Be(){const n=document.getElementById("kill-counter"),e=document.getElementById("kill-counter-text");if(a.currentZone==="goblinCave"){const t=a.zones.goblinCave;n.style.display="block",e.textContent=`Goblins defeated: ${t.killCount}/${t.boss.requiredKills}`}else n.style.display="none"}function $e(n){const e=document.getElementById("boss-warning"),t=document.getElementById("boss-warning-name");t.textContent=n,e.style.display="block",setTimeout(()=>{e.style.display="none"},2e3)}function Ie(n){const e=document.getElementById("victory-message"),t=document.getElementById("victory-subtext");t.textContent=`The ${n} has been defeated!`,e.style.display="block",setTimeout(()=>{e.style.display="none"},4e3)}function ne(){const n=document.getElementById("end-run-btn");n&&(n.textContent=`💀 ${a.currentDeathMessage}`,n.title=`End current run: ${a.currentDeathMessage}`)}document.getElementById("save-game").addEventListener("click",()=>a.save());document.getElementById("load-game").addEventListener("click",()=>{a.load()&&(E(),M(a.currentZone))});document.getElementById("reset-game").addEventListener("click",()=>a.reset());document.getElementById("end-run-btn").addEventListener("click",()=>{confirm(`Are you sure you want to ${a.currentDeathMessage.toLowerCase()}? This will end your current run and trigger ascension.`)&&(a.player.hp=0,a.handlePlayerDeath())});document.getElementById("ascend-btn").addEventListener("click",()=>ke());document.getElementById("confirm-ascend").addEventListener("click",()=>xe());document.querySelectorAll(".character-slot").forEach(n=>{n.addEventListener("click",()=>{const e=n.getAttribute("data-slot"),t=a.player.equipment[e];if(t){const i={...t,type:e,addedTimestamp:Date.now()};a.player.inventory.push(i),a.player.equipment[e]=null,a.needsCharacterUpdate=!0,a.needsInventoryUpdate=!0,a.calculateStats(),a.addLogMessage(`Unequipped ${t.fullName||t.name}`,"system"),n.classList.add("damage-animation"),setTimeout(()=>{n.classList.remove("damage-animation"),E()},300)}else a.addLogMessage(`No item equipped in ${e} slot`,"system")})});document.querySelectorAll(".stat-tooltip-item").forEach(n=>{const e=n.getAttribute("data-tooltip");n.addEventListener("mouseenter",t=>{Ae(t,e)}),n.addEventListener("mouseleave",()=>{De()}),n.addEventListener("mousemove",t=>{ie(t)})});let Y=0,R=0;const Me=100;function se(n=performance.now()){R===0&&(R=n);const e=n-R;R=n,a.updatePassiveSystems(n),a.combat.isActive&&a.currentEnemy&&a.currentZone!=="town"&&a.currentZone!=="restArea"&&a.updateAttackBars(e),a.respawnTimer.isActive&&a.currentZone!=="town"&&a.currentZone!=="restArea"&&a.updateRespawnTimer(e),n-Y>=Me&&(E(),Y=n),requestAnimationFrame(se)}function He(){a.calculateStats(),ae(),Ee(),M("basement"),ne(),document.querySelectorAll(".filter-btn").forEach(n=>{n.addEventListener("click",()=>{const e=n.getAttribute("data-filter");a.setLogFilter(e)})}),document.getElementById("clear-log").addEventListener("click",()=>{confirm("Clear all activity log entries?")&&a.clearActivityLog()}),document.getElementById("inventory-sort").addEventListener("change",n=>{a.inventorySettings.sortBy=n.target.value,a.needsInventoryUpdate=!0,O()}),document.getElementById("inventory-filter").addEventListener("change",n=>{a.inventorySettings.filterBy=n.target.value,a.needsInventoryUpdate=!0,O()}),document.getElementById("auto-sell-btn").addEventListener("click",()=>{document.getElementById("auto-sell-common").checked=a.inventorySettings.autoSell.rarities.common,document.getElementById("auto-sell-uncommon").checked=a.inventorySettings.autoSell.rarities.uncommon,document.getElementById("auto-sell-rare").checked=a.inventorySettings.autoSell.rarities.rare,document.getElementById("auto-sell-weapons").checked=a.inventorySettings.autoSell.types.weapon,document.getElementById("auto-sell-offhand").checked=a.inventorySettings.autoSell.types.offhand,document.getElementById("auto-sell-helmets").checked=a.inventorySettings.autoSell.types.helmet,document.getElementById("auto-sell-body").checked=a.inventorySettings.autoSell.types.body,document.getElementById("auto-sell-legs").checked=a.inventorySettings.autoSell.types.legs,document.getElementById("auto-sell-belt").checked=a.inventorySettings.autoSell.types.belt,document.getElementById("auto-sell-boots").checked=a.inventorySettings.autoSell.types.boots,document.getElementById("auto-sell-necklaces").checked=a.inventorySettings.autoSell.types.necklace,document.getElementById("auto-sell-rings").checked=a.inventorySettings.autoSell.types.ring,document.getElementById("auto-sell-modal").style.display="flex"}),document.getElementById("close-auto-sell").addEventListener("click",()=>{document.getElementById("auto-sell-modal").style.display="none"}),document.getElementById("save-auto-sell").addEventListener("click",()=>{if(a.inventorySettings.autoSell.rarities.common=document.getElementById("auto-sell-common").checked,a.inventorySettings.autoSell.rarities.uncommon=document.getElementById("auto-sell-uncommon").checked,a.inventorySettings.autoSell.rarities.rare=document.getElementById("auto-sell-rare").checked,a.inventorySettings.autoSell.types.weapon=document.getElementById("auto-sell-weapons").checked,a.inventorySettings.autoSell.types.offhand=document.getElementById("auto-sell-offhand").checked,a.inventorySettings.autoSell.types.helmet=document.getElementById("auto-sell-helmets").checked,a.inventorySettings.autoSell.types.body=document.getElementById("auto-sell-body").checked,a.inventorySettings.autoSell.types.legs=document.getElementById("auto-sell-legs").checked,a.inventorySettings.autoSell.types.belt=document.getElementById("auto-sell-belt").checked,a.inventorySettings.autoSell.types.boots=document.getElementById("auto-sell-boots").checked,a.inventorySettings.autoSell.types.necklace=document.getElementById("auto-sell-necklaces").checked,a.inventorySettings.autoSell.types.ring=document.getElementById("auto-sell-rings").checked,a.inventorySettings.autoSell.enabled){const n=[];if(a.player.inventory.forEach((e,t)=>{a.shouldAutoSell(e)&&n.push({item:e,index:t})}),n.length>0){let e=0;n.reverse().forEach(({item:t,index:i})=>{e+=a.sellItem(t,!1),a.player.inventory.splice(i,1),a.needsInventoryUpdate=!0}),a.addLogMessage(`💰 Auto-sold ${n.length} existing items for ${e} total gold`,"shop")}}document.getElementById("auto-sell-modal").style.display="none",a.addLogMessage("💾 Auto-sell settings saved","system")}),document.getElementById("auto-sell-enabled-main").addEventListener("change",n=>{if(a.inventorySettings.autoSell.enabled=n.target.checked,n.target.checked){a.addLogMessage("✅ Auto-sell enabled","system");const e=[];if(a.player.inventory.forEach((t,i)=>{a.shouldAutoSell(t)&&e.push({item:t,index:i})}),e.length>0){let t=0;e.reverse().forEach(({item:i,index:s})=>{t+=a.sellItem(i,!1),a.player.inventory.splice(s,1),a.needsInventoryUpdate=!0}),a.addLogMessage(`💰 Auto-sold ${e.length} existing items for ${t} total gold`,"shop")}}else a.addLogMessage("❌ Auto-sell disabled","system")}),document.getElementById("auto-sell-enabled-main").checked=a.inventorySettings.autoSell.enabled,a.addLogMessage("🎮 Welcome to the Idle RPG! Your adventure begins...","system"),localStorage.getItem("idleRPG_save")&&confirm("Found a saved game. Would you like to load it?")&&(a.load(),M(a.currentZone),a.addLogMessage("📂 Game loaded successfully!","system")),Object.keys(a.player.equipment).forEach(n=>{const e=a.player.equipment[n];e&&(e.type||(e.type=n))}),E(),se()}function V(n,e,t=!1){const i=document.getElementById("inventory-tooltip");if(!i||!e)return;const s=a.player.equipment[e.type],l=w[e.rarity]||w.common,o=s?w[s.rarity]||w.common:null;let c=`<div class="tooltip-title" style="color: ${l.color};">${H(e)}</div>`;c+=`<div class="tooltip-item-type">${e.type.charAt(0).toUpperCase()+e.type.slice(1)}</div>`;const{baseStats:r,affixStats:d}=L(e),p=[],u=[];if(r.attack>0){let m=`${r.attack} Base Attack`;if(t&&s){const{baseStats:v}=L(s),h=r.attack-v.attack;h>0?m=`<div class="stat-gain">${m} (+${h})</div>`:h<0?m=`<div class="stat-loss">${m} (${h})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-base">${m}</div>`;p.push(m)}if(e.type==="weapon"&&e.baseAttackInterval){let m=`${(e.baseAttackInterval/1e3).toFixed(1)}s Base Attack Speed`;if(t&&s){const v=s.baseAttackInterval||2e3,h=e.baseAttackInterval-v;h>0?m=`<div class="stat-loss">${m} (+${(h/1e3).toFixed(1)}s)</div>`:h<0?m=`<div class="stat-gain">${m} (${(h/1e3).toFixed(1)}s)</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-base">${m}</div>`;p.push(m)}if(r.maxHp>0){let m=`${r.maxHp} Max HP`;if(t&&s){const{baseStats:v}=L(s),h=r.maxHp-equippedbaseStats.maxHp;h>0?m=`<div class="stat-gain">${m} (+${h})</div>`:h<0?m=`<div class="stat-loss">${m} (${h})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-base">${m}</div>`;p.push(m)}const f=[{key:"attackSpeed",label:"Attack Speed",unit:"%"},{key:"critChance",label:"Crit Chance",unit:"%"},{key:"critDamage",label:"Crit Damage",unit:"%"},{key:"lifeSteal",label:"Life Steal",unit:"%"},{key:"dodge",label:"Dodge",unit:"%"},{key:"blockChance",label:"Block Chance",unit:"%"}];if(f.forEach(({key:m,label:v,unit:h})=>{if(r[m]>0){let g=`${r[m]}${h} ${v}`;if(t&&s){const{baseStats:x}=L(s),b=r[m]-x[m];b>0?g=`<div class="stat-gain">${g} (${b}${h})</div>`:b<0?g=`<div class="stat-loss">${g} (${b}${h})</div>`:g=`<div class="stat-neutral">${g}</div>`}else g=`<div class="stat-base">${g}</div>`;p.push(g)}}),d.attack>0){let m=`${d.attack} Attack`;if(t&&s){const{affixStats:v}=L(s),h=d.attack-v.attack;h>0?m=`<div class="stat-gain">${m} (+${h})</div>`:h<0?m=`<div class="stat-loss">${m} (${h})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-neutral">${m}</div>`;u.push(m)}if(d.maxHp>0){let m=`${d.maxHp} Max HP`;if(t&&s){const{affixStats:v}=L(s),h=d.maxHp-equippedaffixStats.maxHp;h>0?m=`<div class="stat-gain">${m} (+${h})</div>`:h<0?m=`<div class="stat-loss">${m} (${h})</div>`:m=`<div class="stat-neutral">${m}</div>`}else m=`<div class="stat-neutral">${m}</div>`;u.push(m)}if(f.forEach(({key:m,label:v,unit:h})=>{if(d[m]>0){let g=`${d[m]}${h} ${v}`;if(t&&s){const{affixStats:x}=L(s),b=d[m]-x[m];b>0?g=`<div class="stat-gain">${g} (${b}${h})</div>`:b<0?g=`<div class="stat-loss">${g} (${b}${h})</div>`:g=`<div class="stat-neutral">${g}</div>`}else g=`<div class="stat-neutral">${g}</div>`;u.push(g)}}),c+=p.join(""),p.length>0&&u.length>0&&(c+='<div class="tooltip-separator"></div>'),c+=u.join(""),t&&s){const{baseStats:m,affixStats:v}=L(s),h=[];[{key:"attack",label:"Attack",unit:"",isBase:!0},{key:"maxHp",label:"Max HP",unit:"",isBase:!0},{key:"attackSpeed",label:"Attack Speed",unit:"%",isBase:!0},{key:"critChance",label:"Crit Chance",unit:"%",isBase:!0},{key:"critDamage",label:"Crit Damage",unit:"%",isBase:!0},{key:"lifeSteal",label:"Life Steal",unit:"%",isBase:!0},{key:"dodge",label:"Dodge",unit:"%",isBase:!0},{key:"blockChance",label:"Block Chance",unit:"%",isBase:!0}].forEach(({key:g,label:x,unit:b})=>{const C=(m[g]||0)+(v[g]||0),F=(r[g]||0)+(d[g]||0);C>0&&F===0&&h.push(`<div class="stat-missing">${x}: ${C}${b} → 0${b} (-${C}${b})</div>`)}),h.length>0&&(c+='<div class="tooltip-separator"></div>',c+=h.join("")),c+=`<div class="tooltip-comparison">Compared to: <span style="color: ${o.color};">${H(s)}</span></div>`}else s?c+='<div class="tooltip-comparison">Hold Shift for detailed comparison</div>':c+=`<div class="tooltip-comparison">No ${e.type} equipped</div>`;const y=Math.floor((e.price!==void 0?e.price:10)*.5);c+=`<div class="tooltip-sell-info">Right click to sell for ${y} gold</div>`,i.innerHTML=c,i.style.display="block",oe(n)}function z(){const n=document.getElementById("inventory-tooltip");n&&(n.style.display="none")}function oe(n){const e=document.getElementById("inventory-tooltip");if(!e)return;const t=e.getBoundingClientRect(),i=window.innerWidth,s=window.innerHeight;let l=n.clientX+10,o=n.clientY+10;l+t.width>i&&(l=n.clientX-t.width-10),o+t.height>s&&(o=n.clientY-t.height-10),l=Math.max(5,l),o=Math.max(5,o),e.style.left=l+"px",e.style.top=o+"px"}function Ae(n,e){const t=document.getElementById("stats-tooltip"),i=document.getElementById("stats-tooltip-name"),s=document.getElementById("stats-tooltip-content");if(t&&i&&s){let l=function(c){const r=[];for(const d in a.player.equipment){const p=a.player.equipment[d];p&&p[c]&&p[c]>0&&r.push({slot:d,name:p.fullName||p.name,value:p[c]})}return r},o="";if(e==="attack"){const c=a.getBaseAttackWithTalents();a.player.equipmentAttack;const r=c-10,d=l("attack");i.textContent="Total Attack Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Attack:</span>
          <span class="stat-breakdown-value">10</span>
        </div>
        ${r>0?`
        <div class="stat-breakdown-item">
          <span>Talent Bonuses:</span>
          <span class="stat-breakdown-value">+${r}</span>
        </div>
        `:""}
        ${d.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${d.map(p=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${p.name}:</span>
            <span class="stat-breakdown-value">+${p.value}</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Attack:</span>
          <span class="stat-breakdown-value">${a.player.attack}</span>
        </div>
      `}else if(e==="hp"){const r=(a.player.level-1)*10,d=l("maxHp");d.reduce((p,u)=>p+u.value,0),i.textContent="Max HP Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base HP:</span>
          <span class="stat-breakdown-value">100</span>
        </div>
        <div class="stat-breakdown-item">
          <span>Level Bonus (${a.player.level-1} × 10):</span>
          <span class="stat-breakdown-value">+${r}</span>
        </div>
        ${d.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${d.map(p=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${p.name}:</span>
            <span class="stat-breakdown-value">+${p.value}</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Max HP:</span>
          <span class="stat-breakdown-value">${a.player.maxHp}</span>
        </div>
      `}else if(e==="attack-speed"){const r=a.player.equipment.weapon?.baseAttackInterval||2e3,d=a.player.attackSpeed||0,p=a.getBaseAttackSpeedWithTalents(),u=l("attackSpeed"),f=a.getPlayerAttackInterval();i.textContent="Attack Speed Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Attack Speed:</span>
          <span class="stat-breakdown-value">${(r/1e3).toFixed(1)}s</span>
        </div>
        ${p>0?`
        <div class="stat-breakdown-item">
          <span>Talent Speed Bonus:</span>
          <span class="stat-breakdown-value">+${p}%</span>
        </div>
        `:""}
        ${u.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${u.map(y=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${y.name}:</span>
            <span class="stat-breakdown-value">+${y.value}%</span>
          </div>
        `).join("")}
        `:""}
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Total Speed Bonus:</span>
          <span class="stat-breakdown-value">+${d}%</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Actual Attack Speed:</span>
          <span class="stat-breakdown-value">${(f/1e3).toFixed(1)}s</span>
        </div>
      `}else if(e==="crit-chance"){const c=a.getBaseCritChanceWithTalents(),r=l("critChance");r.reduce((d,p)=>d+p.value,0),i.textContent="Critical Chance Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Critical Chance:</span>
          <span class="stat-breakdown-value">0%</span>
        </div>
        ${c>0?`
        <div class="stat-breakdown-item">
          <span>Talent Bonuses:</span>
          <span class="stat-breakdown-value">+${c}%</span>
        </div>
        `:""}
        ${r.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${r.map(d=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${d.name}:</span>
            <span class="stat-breakdown-value">+${d.value}%</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Critical Chance:</span>
          <span class="stat-breakdown-value">${a.player.critChance||0}%</span>
        </div>
      `}else if(e==="crit-damage"){const c=l("critDamage");i.textContent="Critical Damage Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Critical Damage:</span>
          <span class="stat-breakdown-value">0%</span>
        </div>
        ${c.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${c.map(r=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${r.name}:</span>
            <span class="stat-breakdown-value">+${r.value}%</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Critical Damage:</span>
          <span class="stat-breakdown-value">${a.player.critDamage||0}%</span>
        </div>
      `}else if(e==="life-steal"){const c=l("lifeSteal");i.textContent="Life Steal Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Life Steal:</span>
          <span class="stat-breakdown-value">0%</span>
        </div>
        ${c.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${c.map(r=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${r.name}:</span>
            <span class="stat-breakdown-value">+${r.value}%</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Life Steal:</span>
          <span class="stat-breakdown-value">${a.player.lifeSteal||0}%</span>
        </div>
      `}else if(e==="dodge"){const c=l("dodge");i.textContent="Dodge Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Dodge:</span>
          <span class="stat-breakdown-value">0%</span>
        </div>
        ${c.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${c.map(r=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${r.name}:</span>
            <span class="stat-breakdown-value">+${r.value}%</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Dodge:</span>
          <span class="stat-breakdown-value">${a.player.dodge||0}%</span>
        </div>
      `}else if(e==="block-chance"){const c=l("blockChance");i.textContent="Block Chance Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Block Chance:</span>
          <span class="stat-breakdown-value">0%</span>
        </div>
        ${c.length>0?`
        <div class="stat-breakdown-section">Equipment Bonuses:</div>
        ${c.map(r=>`
          <div class="stat-breakdown-item equipment-item">
            <span>${r.name}:</span>
            <span class="stat-breakdown-value">+${r.value}%</span>
          </div>
        `).join("")}
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Block Chance:</span>
          <span class="stat-breakdown-value">${a.player.blockChance||0}%</span>
        </div>
      `}else if(e==="xp-multiplier"){const r=a.getTalentLevel("knowledge","knowledge_1"),d=a.getTalentLevel("knowledge","knowledge_2a"),p=a.getTalentLevel("knowledge","knowledge_4"),u=a.getExperienceMultiplier();i.textContent="Experience Multiplier Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Multiplier:</span>
          <span class="stat-breakdown-value">${1 .toFixed(2)}x</span>
        </div>
        ${r>0?`
        <div class="stat-breakdown-item">
          <span>Quick Learner (Lv${r}):</span>
          <span class="stat-breakdown-value">+${(r*.2).toFixed(2)}x</span>
        </div>
        `:""}
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Battle Wisdom (Lv${d}):</span>
          <span class="stat-breakdown-value">+${(d*.5).toFixed(2)}x</span>
        </div>
        `:""}
        ${p>0?`
        <div class="stat-breakdown-item">
          <span>Enlightened One:</span>
          <span class="stat-breakdown-value">×3.00x</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Experience Multiplier:</span>
          <span class="stat-breakdown-value">${u.toFixed(2)}x</span>
        </div>
      `}else if(e==="gold-multiplier"){const r=a.getTalentLevel("wealth","wealth_1"),d=a.getTalentLevel("wealth","wealth_4"),p=a.getGoldMultiplier();i.textContent="Gold Multiplier Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Multiplier:</span>
          <span class="stat-breakdown-value">${1 .toFixed(2)}x</span>
        </div>
        ${r>0?`
        <div class="stat-breakdown-item">
          <span>Coin Collector (Lv${r}):</span>
          <span class="stat-breakdown-value">+${(r*.25).toFixed(2)}x</span>
        </div>
        `:""}
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Golden Touch:</span>
          <span class="stat-breakdown-value">×2.00x</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Gold Multiplier:</span>
          <span class="stat-breakdown-value">${p.toFixed(2)}x</span>
        </div>
      `}else if(e==="item-drop-chance"){const r=a.getTalentLevel("wealth","wealth_2a"),d=a.getTalentLevel("wealth","wealth_4"),p=a.getItemDropMultiplier();i.textContent="Item Drop Chance Breakdown",o=`
        <div class="stat-breakdown-item">
          <span>Base Drop Chance:</span>
          <span class="stat-breakdown-value">25%</span>
        </div>
        ${r>0?`
        <div class="stat-breakdown-item">
          <span>Lucky Find (Lv${r}):</span>
          <span class="stat-breakdown-value">+${(r*10).toFixed(0)}%</span>
        </div>
        `:""}
        ${d>0?`
        <div class="stat-breakdown-item">
          <span>Golden Touch:</span>
          <span class="stat-breakdown-value">+50%</span>
        </div>
        `:""}
        <div class="stat-breakdown-item total">
          <span>Total Drop Chance:</span>
          <span class="stat-breakdown-value">${(25*p).toFixed(0)}%</span>
        </div>
      `}s.innerHTML=o,t.style.display="block",t.classList.add("visible"),ie(n)}}function De(){const n=document.getElementById("stats-tooltip");n&&(n.classList.remove("visible"),setTimeout(()=>{n.classList.contains("visible")||(n.style.display="none")},200))}function ie(n){const e=document.getElementById("stats-tooltip");if(e&&e.style.display==="block"){const t=n.clientX+10,i=n.clientY+10,s=e.getBoundingClientRect(),l=window.innerWidth,o=window.innerHeight;let c=t,r=i;t+s.width>l&&(c=n.clientX-s.width-10),i+s.height>o&&(r=n.clientY-s.height-10),e.style.left=`${c}px`,e.style.top=`${r}px`}}function qe(){["sword","axe","mace","dagger","staff","greatsword","battleaxe","warhammer","buckler","round-shield","tower-shield","tome","helmet","cap","crown","hood","armor","robe","vest","tunic","greaves","pants","leggings","shorts","sandals","boots","heavy-boots","speed-boots","leather-belt","utility-belt","chain-belt","war-belt","amulet","pendant","ring","bracelet"].forEach(e=>{const t=new Image;t.src=Z(`assets/gear/${e}.svg`)})}document.addEventListener("keydown",n=>{n.key==="Shift"&&(P=!0,I&&B&&V(B,I,P))});document.addEventListener("keyup",n=>{n.key==="Shift"&&(P=!1,I&&B&&V(B,I,P))});document.addEventListener("DOMContentLoaded",()=>{qe(),He()});
